const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');
const { URLSearchParams } = require('url');

// Import c√°c API Key v√† Secret t·ª´ file config.js
const {
    binanceApiKey, binanceApiSecret,
    bingxApiKey, bingxApiSecret,
    okxApiKey, okxApiSecret, okxPassword,
    bitgetApiKey, bitgetApiSecret, bitgetApiPassword
} = require('../config.js');

// Import ƒë·ªãa ch·ªâ v√≠ n·∫°p ti·ªÅn t·ª´ file depositAddresses.js
const { usdtBep20DepositAddresses } = require('../config/depositAddresses.js');

const BOT_PORT = 5006; // C·ªïng cho Bot UI (kh√°c v·ªõi c·ªïng c·ªßa Server ch√≠nh)
const SERVER_DATA_URL = 'http://localhost:5005/api/data'; // ƒê·ªãa ch·ªâ Server ch√≠nh

// ----- C·∫§U H√åNH BOT -----
const MIN_PNL_PERCENTAGE = 7; // %PnL t·ªëi thi·ªÉu ƒë·ªÉ bot xem x√©t
const MAX_MINUTES_UNTIL_FUNDING = 30; // Trong v√≤ng 30 ph√∫t t·ªõi s·∫Ω t·ªõi gi·ªù funding
const FUND_TRANSFER_MIN_AMOUNT = 10; // S·ªë ti·ªÅn t·ªëi thi·ªÉu cho m·ªói l·∫ßn chuy·ªÉn ti·ªÅn qua BEP20
const BEP20_NETWORK_ID = 'BEP20'; // ID m·∫°ng cho BEP20 (Binance Smart Chain)

const DATA_FETCH_INTERVAL_MINUTES = 1; // M·ªói ph√∫t c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ server
const HOURLY_FETCH_TIME_MINUTE = 45; // M·ªói gi·ªù v√†o ph√∫t th·ª© 45, bot l·∫•y d·ªØ li·ªáu ch√≠nh

// ----- BI·∫æN TO√ÄN C·ª§C CHO BOT -----
let botState = 'STOPPED'; // 'STOPPED', 'RUNNING', 'FETCHING_DATA', 'PROCESSING_DATA', 'TRANSFERRING_FUNDS', 'EXECUTING_TRADES', 'CLOSING_TRADES'
let botLoopIntervalId = null;

let balances = {
    binanceusdm: { total: 0, available: 0, originalSymbol: {} },
    bingx: { total: 0, available: 0, originalSymbol: {} },
    okx: { total: 0, available: 0, originalSymbol: {} },
    bitget: { total: 0, available: 0, originalSymbol: {} },
    totalOverall: 0
};
let initialTotalBalance = 0;
let cumulativePnl = 0; // PnL t·ª´ l√∫c bot ch·∫°y
let tradeHistory = []; // L·ªãch s·ª≠ c√°c chu k·ª≥ giao d·ªãch (t·ªëi ƒëa 50)
let currentSelectedOpportunity = null; // C∆° h·ªôi arbitrage ƒëang ƒë∆∞·ª£c ch·ªçn
let currentTradeDetails = null; // <-- ƒê√É TH√äM D√íNG N√ÄY ƒê·ªÇ KH·∫ÆC PH·ª§C ReferenceError

// CCXT Exchange instances
const exchanges = {};
['binanceusdm', 'bingx', 'okx', 'bitget'].forEach(id => {
    const exchangeClass = ccxt[id];
    const config = {
        'options': { 'defaultType': 'swap' },
        'enableRateLimit': true,
        'headers': {
            'User-Agent': 'Mozilla/5.0 (compatible; ccxt/1.0;)',
        }
    };

    if (id === 'binanceusdm') { config.apiKey = binanceApiKey; config.secret = binanceApiSecret; }
    else if (id === 'bingx') { config.apiKey = bingxApiKey; config.secret = bingaspiSecret; }
    else if (id === 'okx') { config.apiKey = okxApiKey; config.secret = okxApiSecret; if(okxPassword) config.password = okxPassword; }
    else if (id === 'bitget') { config.apiKey = bitgetApiKey; config.secret = bitgetApiSecret; if(bitgetApiPassword) config.password = bitgetApiPassword; }
    else { console.warn(`[AUTH] ‚ö†Ô∏è Thi·∫øu API Key/Secret ho·∫∑c c·∫•u h√¨nh cho ${id.toUpperCase()}.`); }

    exchanges[id] = new exchangeClass(config);
});

// H√†m h·ªó tr·ª£ (sao ch√©p t·ª´ server ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n n·∫øu c·∫ßn)
function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

// H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ server ch√≠nh
async function fetchDataFromServer() {
    console.log(`[BOT] üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ server ch√≠nh: ${SERVER_DATA_URL}`);
    try {
        const response = await fetch(SERVER_DATA_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log(`[BOT] ‚úÖ ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ server. T·ªïng s·ªë c∆° h·ªôi arbitrage: ${data.arbitrageData.length}`);
        return data;
    } catch (error) {
        console.error('[BOT] ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server:', error.message);
        return null;
    }
}

// H√†m c·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ c√°c s√†n
async function updateBalances() {
    console('[BOT] üîÑ C·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ c√°c s√†n...');
    let totalOverall = 0;
    for (const id of Object.keys(exchanges)) {
        try {
            const exchange = exchanges[id];
            // Load markets ƒë·ªÉ ƒë·∫£m b·∫£o fetchBalance ho·∫°t ƒë·ªông ch√≠nh x√°c
            await exchange.loadMarkets(true);
            
            // L·∫•y s·ªë d∆∞ t·ªïng qu√°t
            const accountBalance = await exchange.fetchBalance({ 'type': 'future' }); 
            const usdtBalance = accountBalance.free?.USDT || 0; // free ho·∫∑c total t√πy s√†n
            const usdtTotalBalance = accountBalance.total?.USDT || 0;

            balances[id].total = usdtTotalBalance;
            balances[id].available = usdtBalance;
            
            balances[id].originalSymbol = {}; 

            totalOverall += usdtBalance; // T√≠nh t·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng

            console.log(`[BOT] ‚úÖ ${id.toUpperCase()} Balance: Total ${usdtTotalBalance.toFixed(2)} USDT, Available ${usdtBalance.toFixed(2)} USDT.`);
        } catch (e) {
            console.error(`[BOT] ‚ùå L·ªói khi l·∫•y s·ªë d∆∞ ${id.toUpperCase()}: ${e.message}`);
        }
    }
    balances.totalOverall = totalOverall;
    console.log(`[BOT] T·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng tr√™n t·∫•t c·∫£ c√°c s√†n: ${totalOverall.toFixed(2)} USDT.`);
    if (initialTotalBalance === 0) { // Set initial balance only once
        initialTotalBalance = totalOverall;
    }
}


// H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ server v√† t√¨m c∆° h·ªôi
async function processServerData(serverData) {
    if (!serverData || !serverData.arbitrageData) {
        console.warn('[BOT] D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu arbitrageData.');
        currentSelectedOpportunity = null;
        return;
    }

    const now = Date.now();
    let bestOpportunity = null;

    // L·ªçc v√† t√¨m c∆° h·ªôi t·ªët nh·∫•t
    for (const op of serverData.arbitrageData) {
        const minutesUntilFunding = (op.nextFundingTime - now) / (1000 * 60);

        if (op.estimatedPnl >= MIN_PNL_PERCENTAGE && minutesUntilFunding > 0 && minutesUntilFunding <= MAX_MINUTES_UNTIL_FUNDING) {
            if (!bestOpportunity || op.estimatedPnl > bestOpportunity.estimatedPnl) {
                bestOpportunity = op;
            }
        }
    }

    if (bestOpportunity) {
        console.log(`[BOT] üéØ C∆° h·ªôi t·ªët nh·∫•t ƒë∆∞·ª£c t√¨m th·∫•y: ${bestOpportunity.coin} tr√™n ${bestOpportunity.exchanges}, PnL ∆∞·ªõc t√≠nh: ${bestOpportunity.estimatedPnl}%, Funding trong ${bestOpportunity.details.minutesUntilFunding.toFixed(1)} ph√∫t.`);
        currentSelectedOpportunity = bestOpportunity;
    } else {
        console.log('[BOT] üîé Kh√¥ng t√¨m th·∫•y c∆° h·ªôi arbitrage n√†o ƒë·ªß ƒëi·ªÅu ki·ªán.');
        currentSelectedOpportunity = null;
    }
}

// H√†m qu·∫£n l√Ω v√† chuy·ªÉn ti·ªÅn gi·ªØa c√°c s√†n
async function manageFundsAndTransfer(opportunity, percentageToUse) {
    if (!opportunity || percentageToUse <= 0) {
        console.warn('[BOT_TRANSFER] Kh√¥ng c√≥ c∆° h·ªôi ho·∫∑c ph·∫ßn trƒÉm s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá.');
        return false;
    }

    const [shortExchangeId, longExchangeId] = opportunity.exchanges.split(' / ').map(id => {
        if (id === 'binance') return 'binanceusdm'; // Map back to internal ID if 'binance' is used in server data
        return id;
    });

    console.log(`[BOT_TRANSFER] B·∫Øt ƒë·∫ßu qu·∫£n l√Ω v√† chuy·ªÉn ti·ªÅn cho ${opportunity.coin} gi·ªØa ${shortExchangeId} v√† ${longExchangeId}.`);
    
    await updateBalances(); // C·∫≠p nh·∫≠t s·ªë d∆∞ m·ªõi nh·∫•t

    const targetBalancePerExchange = balances.totalOverall / 2; // Chia ƒë√¥i t·ªïng s·ªë d∆∞

    const involvedExchanges = [shortExchangeId, longExchangeId];
    const otherExchanges = Object.keys(exchanges).filter(id => !involvedExchanges.includes(id));

    let fundsTransferredSuccessfully = true;

    for (const sourceExchangeId of otherExchanges) {
        const sourceBalance = balances[sourceExchangeId].available;
        if (sourceBalance >= FUND_TRANSFER_MIN_AMOUNT) {
            let targetExchangeToFund = null;
            // ∆Øu ti√™n chuy·ªÉn cho s√†n thi·∫øu nhi·ªÅu h∆°n trong 2 s√†n m·ª•c ti√™u
            if (balances[shortExchangeId].available < targetBalancePerExchange && balances[longExchangeId].available < targetBalancePerExchange) {
                targetExchangeToFund = balances[shortExchangeId].available < balances[longExchangeId].available ? shortExchangeId : longExchangeId;
            } else if (balances[shortExchangeId].available < targetBalancePerExchange) {
                targetExchangeToFund = shortExchangeId;
            } else if (balances[longExchangeId].available < targetBalancePerExchange) {
                targetExchangeToFund = longExchangeId;
            }

            if (targetExchangeToFund) {
                // S·ªë ti·ªÅn c·∫ßn chuy·ªÉn ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u (ho·∫∑c chuy·ªÉn h·∫øt s·ªë d∆∞ n·∫øu √≠t h∆°n)
                const amountToTransfer = Math.min(sourceBalance, targetBalancePerExchange - balances[targetExchangeToFund].available);
                
                if (amountToTransfer >= FUND_TRANSFER_MIN_AMOUNT) {
                    const depositAddress = usdtBep20DepositAddresses[targetExchangeToFund];

                    if (!depositAddress) {
                        console.error(`[BOT_TRANSFER] ‚ùå Thi·∫øu ƒë·ªãa ch·ªâ n·∫°p ti·ªÅn BEP20 cho ${targetExchangeToFund}.`);
                        fundsTransferredSuccessfully = false;
                        break;
                    }

                    console.log(`[BOT_TRANSFER] ƒêang c·ªë g·∫Øng chuy·ªÉn ${amountToTransfer.toFixed(2)} USDT t·ª´ ${sourceExchangeId} sang ${targetExchangeToFund} (${depositAddress}) qua BEP20...`);
                    try {
                        const withdrawResult = await exchanges[sourceExchangeId].withdraw(
                            'USDT',            // M√£ ti·ªÅn t·ªá
                            amountToTransfer,  // S·ªë ti·ªÅn
                            depositAddress,    // ƒê·ªãa ch·ªâ v√≠ nh·∫≠n
                            undefined,         // Tag/Memo (kh√¥ng c·∫ßn cho ƒë·ªãa ch·ªâ v√≠)
                            { network: BEP20_NETWORK_ID } // T√πy ch·ªçn m·∫°ng
                        );
                        console.log(`[BOT_TRANSFER] ‚úÖ Y√™u c·∫ßu chuy·ªÉn ti·ªÅn ho√†n t·∫•t t·ª´ ${sourceExchangeId} sang ${targetExchangeToFund}. ID giao d·ªãch: ${withdrawResult.id}`);
                        // ƒê·ª¢I TH·ªúI GIAN ƒê·ªÇ GIAO D·ªäCH BLOCKCHAIN ƒê∆Ø·ª¢C X√ÅC NH·∫¨N
                        // TRONG TH·ª∞C T·∫æ, C·∫¶N C∆† CH·∫æ KI·ªÇM TRA TR·∫†NG TH√ÅI N·∫†P TI·ªÄN TH·ª∞C S·ª∞
                        await sleep(60000); // ƒê·ª£i 60 gi√¢y (1 ph√∫t) ƒë·ªÉ giao d·ªãch c√≥ th·ªÉ ƒë∆∞·ª£c x√°c nh·∫≠n
                    } catch (transferError) {
                        console.error(`[BOT_TRANSFER] ‚ùå L·ªói khi chuy·ªÉn ti·ªÅn t·ª´ ${sourceExchangeId} sang ${targetExchangeToFund}: ${transferError.message}`);
                        fundsTransferredSuccessfully = false;
                        break; // D·ª´ng n·∫øu c√≥ l·ªói chuy·ªÉn ti·ªÅn
                    }
                    await updateBalances(); // C·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ sau khi chuy·ªÉn (hy v·ªçng ti·ªÅn ƒë√£ ƒë·∫øn)
                }
            }
        }
    }

    if (!fundsTransferredSuccessfully) {
        console.error('[BOT_TRANSFER] Qu√° tr√¨nh chuy·ªÉn ti·ªÅn kh√¥ng ho√†n t·∫•t do l·ªói. H·ªßy b·ªè giao d·ªãch.');
        return false;
    }

    // Ki·ªÉm tra l·∫°i xem hai s√†n m·ª•c ti√™u c√≥ ƒë·ªß s·ªë d∆∞ c·∫ßn thi·∫øt kh√¥ng
    // (L∆∞u √Ω: s·ªë d∆∞ c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t k·ªãp th·ªùi n·∫øu giao d·ªãch blockchain ch·∫≠m)
    if (balances[shortExchangeId].available < targetBalancePerExchange * (percentageToUse / 100) ||
        balances[longExchangeId].available < targetBalancePerExchange * (percentageToUse / 100)) {
        console.error('[BOT_TRANSFER] S·ªë d∆∞ tr√™n s√†n m·ª•c ti√™u kh√¥ng ƒë·ªß sau khi chuy·ªÉn ti·ªÅn ho·∫∑c ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t. H·ªßy b·ªè giao d·ªãch.');
        return false;
    }
    
    console.log(`[BOT_TRANSFER] ‚úÖ Qu·∫£n l√Ω ti·ªÅn ho√†n t·∫•t. ${shortExchangeId}: ${balances[shortExchangeId].available.toFixed(2)} USDT, ${longExchangeId}: ${balances[longExchangeId].available.toFixed(2)} USDT.`);
    return true;
}

// H√†m th·ª±c hi·ªán m·ªü l·ªánh
async function executeTrades(opportunity, percentageToUse) {
    if (!opportunity || percentageToUse <= 0) {
        console.warn('[BOT_TRADE] Kh√¥ng c√≥ c∆° h·ªôi ho·∫∑c ph·∫ßn trƒÉm s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá.');
        return false;
    }

    const rawRatesData = serverDataGlobal?.rawRates; // S·ª≠ d·ª•ng optional chaining ƒë·ªÉ tr√°nh l·ªói n·∫øu serverDataGlobal l√† null
    if (!rawRatesData) {
        console.error('[BOT_TRADE] D·ªØ li·ªáu gi√° th√¥ t·ª´ server kh√¥ng c√≥ s·∫µn. Kh√¥ng th·ªÉ m·ªü l·ªánh.');
        return false;
    }

    const shortExchangeId = opportunity.details.shortExchange;
    const longExchangeId = opportunity.details.longExchange;
    const cleanedCoin = opportunity.coin;

    let shortOriginalSymbol, longOriginalSymbol;

    if (rawRatesData[shortExchangeId] && rawRatesData[shortExchangeId][cleanedCoin]) {
        shortOriginalSymbol = rawRatesData[shortExchangeId][cleanedCoin].symbol;
    } else {
        console.error(`[BOT_TRADE] Kh√¥ng t√¨m th·∫•y symbol g·ªëc cho ${cleanedCoin} tr√™n ${shortExchangeId}.`);
        return false;
    }

    if (rawRatesData[longExchangeId] && rawRatesData[longExchangeId][cleanedCoin]) {
        longOriginalSymbol = rawRatesData[longExchangeId][cleanedCoin].symbol;
    } else {
        console.error(`[BOT_TRADE] Kh√¥ng t√¨m th·∫•y symbol g·ªëc cho ${cleanedCoin} tr√™n ${longExchangeId}.`);
        return false;
    }

    const shortExchange = exchanges[shortExchangeId];
    const longExchange = exchanges[longExchangeId];

    const shortCollateral = balances[shortExchangeId].available * (percentageToUse / 100);
    const longCollateral = balances[longExchangeId].available * (percentageToUse / 100);

    if (shortCollateral <= 0 || longCollateral <= 0) {
        console.error('[BOT_TRADE] S·ªë ti·ªÅn m·ªü l·ªánh (collateral) kh√¥ng h·ª£p l·ªá. H·ªßy b·ªè l·ªánh.');
        return false;
    }

    console.log(`[BOT_TRADE] Chu·∫©n b·ªã m·ªü l·ªánh cho ${cleanedCoin}:`);
    console.log(`  SHORT ${shortExchangeId} (${shortOriginalSymbol}): ${shortCollateral.toFixed(2)} USDT collateral`);
    console.log(`  LONG ${longExchangeId} (${longOriginalSymbol}): ${longCollateral.toFixed(2)} USDT collateral`);

    let tradeSuccess = true;
    let shortOrder = null, longOrder = null; // Kh·ªüi t·∫°o null

    try {
        const tickerShort = await shortExchange.fetchTicker(shortOriginalSymbol);
        const tickerLong = await longExchange.fetchTicker(longOriginalSymbol);

        const shortEntryPrice = tickerShort.last; 
        const longEntryPrice = tickerLong.last; 

        if (!shortEntryPrice || !longEntryPrice) {
            console.error(`[BOT_TRADE] Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i cho ${cleanedCoin}.`);
            return false;
        }

        const shortAmount = (shortCollateral * opportunity.commonLeverage) / shortEntryPrice;
        const longAmount = (longCollateral * opportunity.commonLeverage) / longEntryPrice;

        if (shortAmount <= 0 || longAmount <= 0) {
            console.error('[BOT_TRADE] L∆∞·ª£ng h·ª£p ƒë·ªìng t√≠nh to√°n kh√¥ng h·ª£p l·ªá. H·ªßy b·ªè l·ªánh.');
            return false;
        }

        // --- M·ªü l·ªánh Short ---
        console.log(`[BOT_TRADE] M·ªü SHORT ${shortAmount.toFixed(opportunity.details.shortExchange === 'okx' ? 0 : 3)} ${cleanedCoin} tr√™n ${shortExchangeId} v·ªõi gi√° ${shortEntryPrice.toFixed(4)}...`);
        shortOrder = await shortExchange.createMarketSellOrder(shortOriginalSymbol, shortAmount);
        console.log(`[BOT_TRADE] ‚úÖ L·ªánh SHORT ${shortExchangeId} kh·ªõp: ID ${shortOrder.id}, Amount ${shortOrder.amount}, Price ${shortOrder.price}`);

        // --- M·ªü l·ªánh Long ---
        console.log(`[BOT_TRADE] M·ªü LONG ${longAmount.toFixed(opportunity.details.longExchange === 'okx' ? 0 : 3)} ${cleanedCoin} tr√™n ${longExchangeId} v·ªõi gi√° ${longEntryPrice.toFixed(4)}...`);
        longOrder = await longExchange.createMarketBuyOrder(longOriginalSymbol, longAmount);
        console.log(`[BOT_TRADE] ‚úÖ L·ªánh LONG ${longExchangeId} kh·ªõp: ID ${longOrder.id}, Amount ${longOrder.amount}, Price ${longOrder.price}`);

        // L∆ØU C√ÅC CHI TI·∫æT C·∫¶N THI·∫æT CHO VI·ªÜC ƒê√ìNG L·ªÜNH V√Ä T√çNH PNL
        currentTradeDetails = {
            coin: cleanedCoin,
            shortExchange: shortExchangeId,
            longExchange: longExchangeId,
            shortOriginalSymbol: shortOriginalSymbol, // L∆∞u symbol g·ªëc
            longOriginalSymbol: longOriginalSymbol,   // L∆∞u symbol g·ªëc
            shortOrderId: shortOrder.id,
            longOrderId: longOrder.id,
            shortOrderAmount: shortOrder.amount, // L∆ØU AMOUNT TH·ª∞C T·∫æ ƒê√É KH·ªöP
            longOrderAmount: longOrder.amount,   // L∆ØU AMOUNT TH·ª∞C T·∫æ ƒê√É KH·ªöP
            shortEntryPrice: shortEntryPrice,
            longEntryPrice: longEntryPrice,
            shortCollateral: shortCollateral, // L∆∞u collateral ban ƒë·∫ßu
            longCollateral: longCollateral,   // L∆∞u collateral ban ƒë·∫ßu
            status: 'OPEN',
            openTime: Date.now()
        };

    } catch (e) {
        console.error(`[BOT_TRADE] ‚ùå L·ªói khi th·ª±c hi·ªán giao d·ªãch: ${e.message}`);
        tradeSuccess = false;
        // C·ªë g·∫Øng h·ªßy l·ªánh ƒë√£ kh·ªõp m·ªôt ph·∫ßn n·∫øu c√≥ l·ªói
        if (shortOrder?.id) {
            try { await shortExchange.cancelOrder(shortOrder.id, shortOriginalSymbol); } catch (ce) { console.error(`[BOT_TRADE] L·ªói h·ªßy l·ªánh SHORT: ${ce.message}`); }
        }
        if (longOrder?.id) {
            try { await longExchange.cancelOrder(longOrder.id, longOriginalSymbol); } catch (ce) { console.error(`[BOT_TRADE] L·ªói h·ªßy l·ªánh LONG: ${ce.message}`); }
        }
    }
    return tradeSuccess;
}

// H√†m ƒë√≥ng l·ªánh v√† t√≠nh to√°n PnL
async function closeTradesAndCalculatePnL() {
    if (!currentTradeDetails || currentTradeDetails.status !== 'OPEN') {
        console.log('[BOT_PNL] Kh√¥ng c√≥ giao d·ªãch n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.');
        return;
    }

    console.log('[BOT_PNL] üîÑ ƒêang ƒë√≥ng c√°c v·ªã th·∫ø v√† t√≠nh to√°n PnL...');
    const { coin, shortExchange, longExchange, shortOriginalSymbol, longOriginalSymbol, shortOrderAmount, longOrderAmount, shortCollateral, longCollateral } = currentTradeDetails;

    try {
        // ƒê√≥ng v·ªã th·∫ø Short: mua l·∫°i l∆∞·ª£ng ƒë√£ short
        console.log(`[BOT_PNL] ƒê√≥ng v·ªã th·∫ø SHORT ${coin} tr√™n ${shortExchange} (amount: ${shortOrderAmount})...`);
        const closeShortOrder = await exchanges[shortExchange].createMarketBuyOrder(shortOriginalSymbol, shortOrderAmount);
        console.log(`[BOT_PNL] ‚úÖ V·ªã th·∫ø SHORT tr√™n ${shortExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeShortOrder.id}`);

        // ƒê√≥ng v·ªã th·∫ø Long: b√°n ra l∆∞·ª£ng ƒë√£ long
        console.log(`[BOT_PNL] ƒê√≥ng v·ªã th·∫ø LONG ${coin} tr√™n ${longExchange} (amount: ${longOrderAmount})...`);
        const closeLongOrder = await exchanges[longExchange].createMarketSellOrder(longOriginalSymbol, longOrderAmount);
        console.log(`[BOT_PNL] ‚úÖ V·ªã th·∫ø LONG tr√™n ${longExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeLongOrder.id}`);

        await sleep(15000); // ƒê·ª£i 15 gi√¢y ƒë·ªÉ s√†n c·∫≠p nh·∫≠t s·ªë d∆∞/PnL sau khi ƒë√≥ng l·ªánh

        await updateBalances(); // C·∫≠p nh·∫≠t s·ªë d∆∞ cu·ªëi c√πng sau khi ƒë√≥ng l·ªánh

        // PnL ∆∞·ªõc t√≠nh t·∫°m th·ªùi d·ª±a tr√™n thay ƒë·ªïi s·ªë d∆∞ so v·ªõi collateral ban ƒë·∫ßu
        // L∆ØU √ù: ƒê√¢y l√† m·ªôt c√°ch t√≠nh PnL r·∫•t ƒë∆°n gi·∫£n v√† c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c
        // Do ph√≠ giao d·ªãch, ph√≠ funding, v√† c√°ch s√†n t√≠nh to√°n PnL n·ªôi b·ªô.
        // C·∫ßn l·∫•y PnL t·ª´ l·ªãch s·ª≠ l·ªánh ƒë√≥ng ho·∫∑c t·ª´ v·ªã th·∫ø ƒë√£ ƒë√≥ng c·ªßa s√†n n·∫øu c√≥ API h·ªó tr·ª£.
        const shortBalanceAfter = balances[shortExchange].available;
        const longBalanceAfter = balances[longExchange].available;

        // Gi·∫£ s·ª≠ PnL l√† s·ª± thay ƒë·ªïi t·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng sau khi ƒë√≥ng l·ªánh so v·ªõi s·ªë collateral ban ƒë·∫ßu
        // C√°ch t√≠nh n√†y c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra k·ªπ v·ªõi t·ª´ng s√†n c·ª• th·ªÉ.
        const cyclePnl = (shortBalanceAfter - shortCollateral) + (longBalanceAfter - longCollateral); 
        cumulativePnl += cyclePnl;

        // L∆∞u v√†o l·ªãch s·ª≠
        tradeHistory.unshift({ 
            id: Date.now(),
            coin: coin,
            exchanges: `${shortExchange}/${longExchange}`,
            // Ki·ªÉm tra currentSelectedOpportunity tr∆∞·ªõc khi truy c·∫≠p properties
            fundingDiff: currentSelectedOpportunity?.fundingDiff,
            estimatedPnl: currentSelectedOpportunity?.estimatedPnl,
            actualPnl: parseFloat(cyclePnl.toFixed(2)), 
            timestamp: new Date().toISOString()
        });

        if (tradeHistory.length > 50) {
            tradeHistory.pop(); 
        }

        console.log(`[BOT_PNL] ‚úÖ Chu k·ª≥ giao d·ªãch cho ${coin} ho√†n t·∫•t. PnL chu k·ª≥: ${cyclePnl.toFixed(2)} USD. T·ªïng PnL: ${cumulativePnl.toFixed(2)} USD.`);

    } catch (e) {
        console.error(`[BOT_PNL] ‚ùå L·ªói khi ƒë√≥ng v·ªã th·∫ø ho·∫∑c t√≠nh to√°n PnL: ${e.message}`);
    } finally {
        currentSelectedOpportunity = null; // Reset c∆° h·ªôi
        currentTradeDetails = null; // Reset chi ti·∫øt giao d·ªãch
        console.log('[BOT_PNL] D·ªçn d·∫πp l·ªánh ch·ªù v√† v·ªã th·∫ø ƒë√£ ƒë√≥ng (n·∫øu c√≥).');
        // C·∫ßn th√™m logic h·ªßy m·ªçi l·ªánh ch·ªù (SL/TP) c√≤n s√≥t l·∫°i
    }
}


let serverDataGlobal = null; 

// V√≤ng l·∫∑p ch√≠nh c·ªßa Bot
async function mainBotLoop() {
    // ƒê·ªÉ √Ω: botLoopIntervalId ƒë∆∞·ª£c d√πng cho setTimeout, kh√¥ng ph·∫£i setInterval.
    // D√≤ng n√†y ƒë·∫£m b·∫£o ch·ªâ c√≥ 1 v√≤ng l·∫∑p ch√≠nh ch·∫°y.
    if (botLoopIntervalId) clearTimeout(botLoopIntervalId); // X√≥a v√≤ng l·∫∑p c≈© tr∆∞·ªõc khi t·∫°o m·ªõi

    if (botState !== 'RUNNING') {
        console.log('[BOT_LOOP] Bot kh√¥ng ·ªü tr·∫°ng th√°i RUNNING. D·ª´ng v√≤ng l·∫∑p.');
        return;
    }

    const now = new Date();
    const currentMinute = now.getUTCMinutes();
    const currentSecond = now.getUTCSeconds();

    console.log(`[BOT_LOOP] ƒêang ch·∫°y v√≤ng l·∫∑p bot. Ph√∫t: ${currentMinute}, Gi√¢y: ${currentSecond}`);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ server ch√≠nh m·ªói ph√∫t ho·∫∑c v√†o ph√∫t HOURLY_FETCH_TIME_MINUTE
    // Logic n√†y s·∫Ω fetch data m·ªói khi `currentSecond` nh·ªè h∆°n 5 ho·∫∑c l·ªõn h∆°n 55
    // ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y fetch qu√° nhi·ªÅu. Ch·ªâ n√™n fetch 1 l·∫ßn/ph√∫t ho·∫∑c theo interval c·ªë ƒë·ªãnh.
    if ((currentMinute === HOURLY_FETCH_TIME_MINUTE && currentSecond < 5) || 
        (currentSecond < 5 && (currentMinute % DATA_FETCH_INTERVAL_MINUTES === 0))) {
        
        console.log(`[BOT_LOOP] K√≠ch ho·∫°t c·∫≠p nh·∫≠t d·ªØ li·ªáu ch√≠nh t·ª´ server.`);
        const fetchedData = await fetchDataFromServer();
        if (fetchedData) {
            serverDataGlobal = fetchedData; // C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
            await processServerData(serverDataGlobal);
        }
    }


    // Logic giao d·ªãch (ch·ªâ th·ª±c hi·ªán v√†o c√°c ph√∫t c·ª• th·ªÉ)
    if (currentSelectedOpportunity) {
        // currentSelectedOpportunity.nextFundingTime c·∫ßn ƒë∆∞·ª£c t√≠nh to√°n l·∫°i sau m·ªói fetch d·ªØ li·ªáu m·ªõi
        // Ho·∫∑c ƒë·∫£m b·∫£o n√≥ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh x√°c.
        // const minutesUntilFunding = (currentSelectedOpportunity.nextFundingTime - now.getTime()) / (1000 * 60);

        // Chu·∫©n b·ªã chuy·ªÉn ti·ªÅn v√†o ph√∫t 50 (ho·∫∑c s·ªõm h∆°n m·ªôt ch√∫t ƒë·ªÉ c√≥ th·ªùi gian)
        if (currentMinute === 50 && currentSecond >= 5 && currentSecond < 10 && botState === 'RUNNING' && !currentTradeDetails) {
            console.log(`[BOT_LOOP] üöÄ K√≠ch ho·∫°t chuy·ªÉn ti·ªÅn cho c∆° h·ªôi ${currentSelectedOpportunity.coin} v√†o ph√∫t 50.`);
            botState = 'TRANSFERRING_FUNDS';
            const transferSuccess = await manageFundsAndTransfer(currentSelectedOpportunity, 50); // Gi·∫£ s·ª≠ d√πng 50% s·ªë d∆∞ cho m·ªói s√†n
            if (transferSuccess) {
                console.log('[BOT_LOOP] ‚úÖ Chuy·ªÉn ti·ªÅn ho√†n t·∫•t. Ch·ªù m·ªü l·ªánh.');
            } else {
                console.error('[BOT_LOOP] ‚ùå L·ªói chuy·ªÉn ti·ªÅn ho·∫∑c kh√¥ng ƒë·ªß s·ªë d∆∞. H·ªßy chu k·ª≥ n√†y.');
                currentSelectedOpportunity = null; // Reset c∆° h·ªôi
            }
            botState = 'RUNNING'; // Tr·ªü l·∫°i tr·∫°ng th√°i ch·∫°y
        }

        // Th·ª±c hi·ªán m·ªü l·ªánh v√†o ph√∫t 59:55
        if (currentMinute === 59 && currentSecond >= 55 && currentSecond < 59 && botState === 'RUNNING' && currentSelectedOpportunity && !currentTradeDetails) {
            console.log(`[BOT_LOOP] ‚ö° K√≠ch ho·∫°t m·ªü l·ªánh cho c∆° h·ªôi ${currentSelectedOpportunity.coin} v√†o ph√∫t 59:55.`);
            botState = 'EXECUTING_TRADES';
            const tradeSuccess = await executeTrades(currentSelectedOpportunity, 50); // D√πng 50% s·ªë d∆∞ cho m·ªói l·ªánh
            if (tradeSuccess) {
                console.log('[BOT_LOOP] ‚úÖ M·ªü l·ªánh ho√†n t·∫•t.');
            } else {
                console.error('[BOT_LOOP] ‚ùå L·ªói m·ªü l·ªánh. H·ªßy chu k·ª≥ n√†y.');
                currentSelectedOpportunity = null; // Reset c∆° h·ªôi
            }
            botState = 'RUNNING'; // Tr·ªü l·∫°i tr·∫°ng th√°i ch·∫°y
        }
    }
    
    // ƒê√≥ng l·ªánh v√† t√≠nh PnL sau gi·ªù funding (ph√∫t 00:05 c·ªßa gi·ªù ti·∫øp theo)
    if (currentMinute === 0 && currentSecond >= 5 && currentSecond < 10 && botState === 'RUNNING' && currentTradeDetails?.status === 'OPEN') {
        console.log('[BOT_LOOP] üõë K√≠ch ho·∫°t ƒë√≥ng l·ªánh v√† t√≠nh PnL v√†o ph√∫t 00:05.');
        botState = 'CLOSING_TRADES';
        await closeTradesAndCalculatePnL();
        botState = 'RUNNING'; // Tr·ªü l·∫°i tr·∫°ng th√°i ch·∫°y
    }

    // L·∫∑p l·∫°i sau 1 gi√¢y ƒë·ªÉ ki·ªÉm tra th·ªùi gian ch√≠nh x√°c
    botLoopIntervalId = setTimeout(mainBotLoop, 1000); 
}

// ----- C√ÅC H√ÄM ƒêI·ªÄU KHI·ªÇN BOT T·ª™ UI -----
function startBot() {
    if (botState === 'STOPPED') {
        console.log('[BOT] ‚ñ∂Ô∏è Kh·ªüi ƒë·ªông Bot...');
        botState = 'RUNNING';
        updateBalances(); // L·∫•y s·ªë d∆∞ ban ƒë·∫ßu khi kh·ªüi ƒë·ªông
        mainBotLoop(); // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh
        return true;
    }
    console.warn('[BOT] Bot ƒë√£ ch·∫°y ho·∫∑c ƒëang trong qu√° tr√¨nh chuy·ªÉn tr·∫°ng th√°i.');
    return false;
}

function stopBot() {
    if (botState === 'RUNNING' || botState === 'FETCHING_DATA' || botState === 'PROCESSING_DATA' || botState === 'TRANSFERRING_FUNDS' || botState === 'EXECUTING_TRADES' || botState === 'CLOSING_TRADES') {
        console.log('[BOT] ‚è∏Ô∏è D·ª´ng Bot...');
        if (botLoopIntervalId) {
            clearTimeout(botLoopIntervalId);
            botLoopIntervalId = null;
        }
        botState = 'STOPPED';
        // TH√äM LOGIC ƒê·ªÇ H·ª¶Y L·ªÜNH HO·∫∂C ƒê√ìNG V·ªä TH·∫æ N·∫æU BOT D·ª™NG ƒê·ªòT NG·ªòT ·ªû ƒê√ÇY
        // (ƒê√¢y l√† m·ªôt t√≠nh nƒÉng ph·ª©c t·∫°p, c·∫ßn tri·ªÉn khai ri√™ng n·∫øu mu·ªën)
        return true;
    }
    console.warn('[BOT] Bot kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng th·ªÉ d·ª´ng.');
    return false;
}

// ----- KH·ªûI T·∫†O SERVER HTTP CHO BOT UI -----
const botServer = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        fs.readFile(path.join(__dirname, 'index.html'), (err, content) => {
            if (err) {
                console.error('[BOT_SERVER] ‚ùå L·ªói khi ƒë·ªçc index.html:', err.message);
                res.writeHead(500);
                res.end('L·ªói khi ƒë·ªçc index.html');
                return;
            }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/bot-api/status' && req.method === 'GET') {
        const statusData = {
            botState: botState,
            balances: balances,
            initialTotalBalance: initialTotalBalance,
            cumulativePnl: cumulativePnl,
            tradeHistory: tradeHistory,
            currentSelectedOpportunity: currentSelectedOpportunity,
            currentTradeDetails: currentTradeDetails
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(statusData));
    } else if (req.url === '/bot-api/start' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', () => {
            try {
                const data = body ? JSON.parse(body) : {}; // X·ª≠ l√Ω body r·ªóng
                const started = startBot();
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: started, message: started ? 'Bot ƒë√£ kh·ªüi ƒë·ªông.' : 'Bot ƒë√£ ch·∫°y.' }));
            } catch (error) {
                console.error('[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/start:', error.message);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server.' }));
            }
        });
    } else if (req.url === '/bot-api/stop' && req.method === 'POST') {
        const stopped = stopBot();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: stopped, message: stopped ? 'Bot ƒë√£ d·ª´ng.' : 'Bot kh√¥ng ho·∫°t ƒë·ªông.' }));
    } else {
        res.writeHead(404); res.end('Not Found');
    }
});

botServer.listen(BOT_PORT, () => {
    console.log(`‚úÖ M√°y ch·ªß UI c·ªßa Bot ƒëang ch·∫°y t·∫°i http://localhost:${BOT_PORT}`);
    console.log('Bot ƒëang ch·ªù l·ªánh "Start" t·ª´ giao di·ªán HTML.');
});
