const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');
const { URLSearchParams } = require('url');

const safeLog = (type, ...args) => {
    try {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const timestamp = `${hours}:${minutes}`;
        if (typeof console === 'object' && typeof console[type] === 'function') {
            console[type](`[${timestamp} ${type.toUpperCase()}]`, ...args);
        } else {
            const message = `[${timestamp} ${type.toUpperCase()}] ${args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg).join(' ')}\n`;
            if (type === 'error' || type === 'warn') {
                process.stderr.write(message);
            } else {
                process.stdout.write(message);
            }
        }
    } catch (e) {
        process.stderr.write(`FATAL LOG ERROR (safeLog itself failed): ${e.message} - Original log: [${type.toUpperCase()}] ${args.join(' ')}\n`);
    }
};

const {
    binanceApiKey, binanceApiSecret,
    bingxApiKey, bingxApiSecret,
    okxApiKey, okxApiSecret, okxPassword,
    bitgetApiKey, bitgetApiSecret, bitgetApiPassword
} = require('../config.js');

const BOT_PORT = 5008;
const SERVER_DATA_URL = 'http://localhost:5005/api/data';

const MIN_PNL_PERCENTAGE = 1;
const MAX_MINUTES_UNTIL_FUNDING = 30;
const MIN_MINUTES_FOR_EXECUTION = 15;

const DATA_FETCH_INTERVAL_SECONDS = 5;
const HOURLY_FETCH_TIME_MINUTE = 45;

const SL_PERCENT_OF_COLLATERAL = 700;
const TP_PERCENT_OF_COLLATERAL = 700; 

const DISABLED_EXCHANGES = ['bitget'];

const ALL_POSSIBLE_EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];

const activeExchangeIds = ALL_POSSIBLE_EXCHANGE_IDS.filter(id => !DISABLED_EXCHANGES.includes(id));

let botState = 'STOPPED';
let botLoopIntervalId = null;

const exchanges = {};
activeExchangeIds.forEach(id => {
    const exchangeClass = ccxt[id];
    const config = {
        'options': { 'defaultType': 'swap' },
        'enableRateLimit': true,
        'headers': {
            'User-Agent': 'Mozilla/5.0 (compatible; ccxt/1.0;)',
        }
    };

    if (id === 'binanceusdm') { config.apiKey = binanceApiKey; config.secret = binanceApiSecret; }
    else if (id === 'bingx') { config.apiKey = bingxApiKey; config.secret = bingxApiSecret; }
    else if (id === 'okx') { config.apiKey = okxApiKey; config.secret = okxApiSecret; if(okxPassword) config.password = okxPassword; }
    else if (id === 'bitget') { config.apiKey = bitgetApiKey; config.secret = bitgetApiSecret; if(bitgetApiPassword) config.password = bitgetApiPassword; }

    if ((config.apiKey && config.secret) || (id === 'okx' && config.password) || (id === 'bitget' && config.password && config.apiKey && config.secret)) {
        exchanges[id] = new exchangeClass(config);
    } else {
        safeLog('warn', `[INIT] B·ªè qua kh·ªüi t·∫°o ${id.toUpperCase()} v√¨ thi·∫øu API Key/Secret/Password ho·∫∑c kh√¥ng h·ª£p l·ªá.`);
    }
});

let balances = {};
activeExchangeIds.forEach(id => {
    balances[id] = { total: 0, available: 0, originalSymbol: {} };
});
balances.totalOverall = 0;

let initialTotalBalance = 0;
let cumulativePnl = 0;
let tradeHistory = [];

let currentSelectedOpportunityForExecution = null;
let bestPotentialOpportunityForDisplay = null;
let allCurrentOpportunities = [];

const LAST_ACTION_TIMESTAMP = {
    dataFetch: 0,
    selectionTime: 0,
    tradeExecution: 0,
    closeTrade: 0,
};

let currentTradeDetails = null;
let currentPercentageToUse = 50;

function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

/**
 * H√†m gi√∫p chuy·ªÉn ƒë·ªïi symbol t·ª´ ƒë·ªãnh d·∫°ng BASEQUOTE (v√≠ d·ª•: BTCUSDT)
 * sang ƒë·ªãnh d·∫°ng th·ªëng nh·∫•t BASE/QUOTE (v√≠ d·ª•: BTC/USDT) m√† CCXT mong ƒë·ª£i.
 * @param {string} baseQuoteSymbol Symbol c·∫ßn chuy·ªÉn ƒë·ªïi.
 * @returns {string} Symbol ·ªü ƒë·ªãnh d·∫°ng th·ªëng nh·∫•t.
 */
function convertToUnifiedSymbol(baseQuoteSymbol) {
    if (typeof baseQuoteSymbol === 'string') {
        // M·ªôt s·ªë s√†n c√≥ th·ªÉ s·ª≠ d·ª•ng token kh√°c ngo√†i USDT, nh∆∞ng ph·ªï bi·∫øn nh·∫•t l√† USDT
        // C·∫ßn ƒëi·ªÅu ch·ªânh regex n·∫øu c√≥ nhi·ªÅu stablecoin kh√°c
        const match = baseQuoteSymbol.match(/^(.+)(USDT|USD)$/i); // B·∫Øt c·∫£ USDT v√† USD
        if (match && match[1] && match[2]) {
            const base = match[1].toUpperCase();
            const quote = match[2].toUpperCase();
            return `${base}/${quote}`;
        }
    }
    // N·∫øu kh√¥ng kh·ªõp ho·∫∑c ƒë√£ ·ªü ƒë·ªãnh d·∫°ng th·ªëng nh·∫•t (v√≠ d·ª•: BTC/USDT), tr·∫£ v·ªÅ nguy√™n tr·∫°ng
    return baseQuoteSymbol;
}


async function fetchDataFromServer() {
    try {
        const response = await fetch(SERVER_DATA_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: ${error.message}`, error);
        return null;
    }
}

async function updateBalances() {
    safeLog('log', '[BOT] üîÑ C·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ c√°c s√†n...');
    let currentTotalOverall = 0;
    for (const id of activeExchangeIds) {
        if (!exchanges[id]) {
            safeLog('warn', `[BOT] ${id.toUpperCase()} kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o (c√≥ th·ªÉ do thi·∫øu API Key/Secret). B·ªè qua c·∫≠p nh·∫≠t s·ªë d∆∞.`);
            continue;
        }
        try {
            const exchange = exchanges[id];
            await exchange.loadMarkets(true); // T·∫£i markets cho s√†n

            const accountBalance = await exchange.fetchBalance({ 'type': 'future' });
            const usdtFreeBalance = accountBalance.free?.USDT || 0;
            const usdtTotalBalance = accountBalance.total?.USDT || 0;

            balances[id].available = usdtFreeBalance;
            balances[id].total = usdtTotalBalance;
            // balances[id].originalSymbol = {}; // D√≤ng n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt ·ªü ƒë√¢y n·ªØa
            currentTotalOverall += balances[id].available;

            safeLog('log', `[BOT] ‚úÖ ${id.toUpperCase()} Balance: Total ${usdtTotalBalance.toFixed(2)} USDT, Available ${balances[id].available.toFixed(2)} USDT.`);
        } catch (e) {
            safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y s·ªë d∆∞ ${id.toUpperCase()}: ${e.message}`, e);
        }
    }
    balances.totalOverall = currentTotalOverall;
    safeLog('log', `[BOT] T·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng tr√™n t·∫•t c·∫£ c√°c s√†n (c√≥ th·ªÉ bao g·ªìm √¢m): ${currentTotalOverall.toFixed(2)} USDT.`);
    if (initialTotalBalance === 0) {
        initialTotalBalance = currentTotalOverall;
    }
}

async function processServerData(serverData) {
    if (!serverData || !serverData.arbitrageData) {
        safeLog('warn', '[BOT] D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu arbitrageData.');
        bestPotentialOpportunityForDisplay = null;
        allCurrentOpportunities = [];
        return;
    }

    const now = Date.now();
    let bestForDisplay = null;
    const tempAllOpportunities = [];

    for (const op of serverData.arbitrageData) {
        const minutesUntilFunding = (op.nextFundingTime - now) / (1000 * 60);
        const shortExIdNormalized = op.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.shortExchange.toLowerCase();
        const longExIdNormalized = op.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.longExchange.toLowerCase();

        if (DISABLED_EXCHANGES.includes(shortExIdNormalized) || DISABLED_EXCHANGES.includes(longExIdNormalized) ||
            !exchanges[shortExIdNormalized] || !exchanges[longExIdNormalized]) {
            safeLog('warn', `[PROCESS_DATA] B·ªè qua c∆° h·ªôi ${op.coin} v√¨ s√†n ${shortExIdNormalized} ho·∫∑c ${longExIdNormalized} b·ªã t·∫Øt ho·∫∑c ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.`);
            continue;
        }

        let shortOriginalSymbol = null;
        let longOriginalSymbol = null;

        // --- S·ª¨A ƒê·ªîI T·∫†I ƒê√ÇY: Chuy·ªÉn ƒë·ªïi op.coin sang ƒë·ªãnh d·∫°ng th·ªëng nh·∫•t ---
        const unifiedCoinSymbol = convertToUnifiedSymbol(op.coin);

        // L·∫•y m√£ hi·ªáu g·ªëc c·ªßa s√†n b·∫±ng c√°ch s·ª≠ d·ª•ng markets ƒë√£ t·∫£i
        try {
            const shortMarket = exchanges[shortExIdNormalized].market(unifiedCoinSymbol);
            if (shortMarket && shortMarket.id) {
                shortOriginalSymbol = shortMarket.id;
            } else {
                safeLog('warn', `[PROCESS_DATA] Kh√¥ng t√¨m th·∫•y market CCXT cho symbol th·ªëng nh·∫•t "${unifiedCoinSymbol}" tr√™n s√†n ${shortExIdNormalized}. B·ªè qua c∆° h·ªôi n√†y.`);
                continue;
            }
        } catch (e) {
            safeLog('error', `[PROCESS_DATA] L·ªói khi l·∫•y market cho ${unifiedCoinSymbol} tr√™n s√†n ${shortExIdNormalized}: ${e.message}. B·ªè qua c∆° h·ªôi n√†y.`);
            continue;
        }

        try {
            const longMarket = exchanges[longExIdNormalized].market(unifiedCoinSymbol);
            if (longMarket && longMarket.id) {
                longOriginalSymbol = longMarket.id;
            } else {
                safeLog('warn', `[PROCESS_DATA] Kh√¥ng t√¨m th·∫•y market CCXT cho symbol th·ªëng nh·∫•t "${unifiedCoinSymbol}" tr√™n s√†n ${longExIdNormalized}. B·ªè qua c∆° h·ªôi n√†y.`);
                continue;
            }
        } catch (e) {
            safeLog('error', `[PROCESS_DATA] L·ªói khi l·∫•y market cho ${unifiedCoinSymbol} tr√™n s√†n ${longExIdNormalized}: ${e.message}. B·ªè qua c∆° h·ªôi n√†y.`);
            continue;
        }

        // G√°n c√°c m√£ hi·ªáu g·ªëc ƒë√£ l·∫•y ƒë∆∞·ª£c v√†o ƒë·ªëi t∆∞·ª£ng details
        op.details.shortOriginalSymbol = shortOriginalSymbol;
        op.details.longOriginalSymbol = longOriginalSymbol;

        // Ti·∫øp t·ª•c x·ª≠ l√Ω c∆° h·ªôi nh∆∞ hi·ªán c√≥ n·∫øu c√°c symbol ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng
        if (op.estimatedPnl > 0 && minutesUntilFunding > 0) {
            op.details.minutesUntilFunding = minutesUntilFunding;
            op.details.shortFundingRate = op.details.shortRate !== undefined ? op.details.shortRate : 'N/A';
            op.details.longFundingRate = op.details.longRate !== undefined ? op.details.longRate : 'N/A';
            op.fundingDiff = op.fundingDiff !== undefined ? op.fundingDiff : 'N/A';
            op.commonLeverage = op.commonLeverage !== undefined ? op.commonLeverage : 'N/A';

            let currentShortExId = shortExIdNormalized;
            let currentLongExId = longExIdNormalized;
            let currentShortOriginalSymbol = op.details.shortOriginalSymbol;
            let currentLongOriginalSymbol = op.details.longOriginalSymbol;

            // Logic ƒë·∫£o chi·ªÅu s√†n n·∫øu shortRate < longRate
            if (typeof op.details.shortFundingRate === 'number' && typeof op.details.longFundingRate === 'number') {
                if (op.details.shortFundingRate < op.details.longFundingRate) {
                    // ƒê·∫£o lu√¥n c·∫£ exchange ID v√† original symbol
                    const tempExId = currentShortExId;
                    currentShortExId = currentLongExId;
                    currentLongExId = tempExId;

                    const tempSymbol = currentShortOriginalSymbol;
                    currentShortOriginalSymbol = currentLongOriginalSymbol;
                    currentLongOriginalSymbol = tempSymbol;
                }
            }
            op.details.shortExchange = currentShortExId;
            op.details.longExchange = currentLongExId;
            op.details.shortOriginalSymbol = currentShortOriginalSymbol;
            op.details.longOriginalSymbol = currentLongOriginalSymbol;

            tempAllOpportunities.push(op);

            if (!bestForDisplay ||
                op.estimatedPnl > bestForDisplay.estimatedPnl ||
                (op.estimatedPnl === bestForDisplay.estimatedPnl && minutesUntilFunding < bestForDisplay.details.minutesUntilFunding)
            ) {
                bestForDisplay = op;
            }
        }
    }

    allCurrentOpportunities = tempAllOpportunities;

    if (bestForDisplay) {
        bestPotentialOpportunityForDisplay = bestForDisplay;
        const shortExId = bestForDisplay.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.details.shortExchange.toLowerCase();
        const longExId = bestForDisplay.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.details.longExchange.toLowerCase();
        const minAvailableBalance = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
        bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalance * (currentPercentageToUse / 100)).toFixed(2);
    } else {
        bestPotentialOpportunityForDisplay = null;
    }
}


async function getMaxLeverageForSymbol(exchange, symbol) {
    try {
        await exchange.loadMarkets(true);
        const market = exchange.market(symbol);
        if (!market) {
            safeLog('warn', `[HELPER] Kh√¥ng t√¨m th·∫•y market cho ${symbol} tr√™n s√†n ${exchange.id}`);
            return null;
        }

        const exchangeId = exchange.id;
        let maxLeverage = null;

        switch (exchangeId) {
            case 'binanceusdm':
                if (market.info && market.info.leverageFilter && market.info.leverageFilter.maxLeverage) {
                    maxLeverage = parseInt(market.info.leverageFilter.maxLeverage, 10);
                }
                break;
            case 'bingx':
                if (market.info && market.info.leverage_limit && market.info.leverage_limit.max_leverage) {
                    maxLeverage = parseInt(market.info.leverage_limit.max_leverage, 10);
                }
                break;
            case 'okx':
                if (market.maxLever) {
                    maxLeverage = parseInt(market.maxLever, 10);
                } else if (market.info && market.info.maxLever) {
                    maxLeverage = parseInt(market.info.maxLever, 10);
                } else {
                    safeLog('warn', `[HELPER] Kh√¥ng t√¨m th·∫•y maxLever tr·ª±c ti·∫øp cho ${symbol} tr√™n OKX. Th·ª≠ l·∫•y t·ª´ leverage tiers (n·∫øu c√≥).`);
                    try {
                        const leverageTiers = await exchange.fetchLeverageTiers([symbol]);
                        if (leverageTiers && leverageTiers[symbol] && leverageTiers[symbol].length > 0) {
                            if (leverageTiers[symbol][0] && leverageTiers[symbol][0].maxLeverage) {
                                maxLeverage = parseInt(leverageTiers[symbol][0].maxLeverage, 10);
                            }
                        }
                    } catch (tierErr) {
                        safeLog('warn', `[HELPER] L·ªói khi l·∫•y leverage tiers cho ${symbol} tr√™n OKX: ${tierErr.message}`);
                    }
                }
                break;
            default:
                safeLog('warn', `[HELPER] Ch∆∞a h·ªó tr·ª£ l·∫•y max leverage t·ª± ƒë·ªông cho s√†n ${exchangeId}.`);
                return null;
        }

        return maxLeverage;

    } catch (e) {
        safeLog('error', `[HELPER] L·ªói khi l·∫•y max leverage cho ${symbol} tr√™n ${exchange.id}: ${e.message}`);
        return null;
    }
}

async function executeTrades(opportunity, percentageToUse) {
    if (!opportunity || percentageToUse <= 0) {
        safeLog('warn', '[BOT_TRADE] Kh√¥ng c√≥ c∆° h·ªôi ho·∫∑c ph·∫ßn trƒÉm s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá.');
        return false;
    }

    // --- B·ªï sung ki·ªÉm tra chi ti·∫øt c√°c tr∆∞·ªùng b·ªã thi·∫øu theo y√™u c·∫ßu c·ªßa b·∫°n ---
    if (!opportunity.details) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng "details". H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (!opportunity.details.shortExchange) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng "shortExchange" (ID s√†n short). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (!opportunity.details.longExchange) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng "longExchange" (ID s√†n long). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (!opportunity.details.shortOriginalSymbol) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng "shortOriginalSymbol" (m√£ coin g·ªëc cho s√†n short). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (!opportunity.details.longOriginalSymbol) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng "longOriginalSymbol" (m√£ coin g·ªëc cho s√†n long). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    // --- K·∫øt th√∫c ph·∫ßn b·ªï sung ki·ªÉm tra chi ti·∫øt ---

    const shortExchangeId = opportunity.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.shortExchange.toLowerCase();
    const longExchangeId = opportunity.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.longExchange.toLowerCase();

    if (DISABLED_EXCHANGES.includes(shortExchangeId) || DISABLED_EXCHANGES.includes(longExchangeId) ||
        !exchanges[shortExchangeId] || !exchanges[longExchangeId]) {
        safeLog('error', `[BOT_TRADE] B·ªè qua th·ª±c hi·ªán l·ªánh v√¨ s√†n ${shortExchangeId} ho·∫∑c ${longExchangeId} b·ªã t·∫Øt ho·∫∑c ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.`);
        return false;
    }

    const cleanedCoin = opportunity.coin;
    const shortOriginalSymbol = opportunity.details.shortOriginalSymbol;
    const longOriginalSymbol = opportunity.details.longOriginalSymbol;

    const shortExchange = exchanges[shortExchangeId];
    const longExchange = exchanges[longExchangeId];

    const minAvailableBalanceInPair = Math.min(balances[shortExchangeId]?.available || 0, balances[longExchangeId]?.available || 0);
    const baseCollateralPerSide = minAvailableBalanceInPair * (percentageToUse / 100);

    const shortCollateral = baseCollateralPerSide;
    const longCollateral = baseCollateralPerSide;

    if (shortCollateral <= 0 || longCollateral <= 0) {
        safeLog('error', '[BOT_TRADE] S·ªë ti·ªÅn m·ªü l·ªánh (collateral) kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (balances[shortExchangeId]?.available < shortCollateral || balances[longExchangeId]?.available < longCollateral) {
        safeLog('error', `[BOT_TRADE] S·ªë d∆∞ kh·∫£ d·ª•ng kh√¥ng ƒë·ªß ƒë·ªÉ m·ªü l·ªánh v·ªõi v·ªën ${baseCollateralPerSide.toFixed(2)} USDT m·ªói b√™n. ${shortExchangeId}: ${balances[shortExchangeId]?.available.toFixed(2)}, ${longExchangeId}: ${balances[longExchangeId]?.available.toFixed(2)}. H·ªßy b·ªè l·ªánh.`);
        return false;
    }

    safeLog('log', `[BOT_TRADE] Chu·∫©n b·ªã m·ªü l·ªánh cho ${cleanedCoin}:`);
    safeLog('log', `  SHORT ${shortExchangeId} (${shortOriginalSymbol}): ${shortCollateral.toFixed(2)} USDT collateral`);
    safeLog('log', `  LONG ${longExchangeId} (${longOriginalSymbol}): ${longCollateral.toFixed(2)} USDT collateral`);

    let shortOrder = null, longOrder = null;
    let actualShortLeverage = null;
    let actualLongLeverage = null;

    try {
        await shortExchange.loadMarkets(true);
        await longExchange.loadMarkets(true);

        const tickerShort = await shortExchange.fetchTicker(shortOriginalSymbol);
        const tickerLong = await longExchange.fetchTicker(longOriginalSymbol);

        const shortEntryPrice = tickerShort.last;
        const longEntryPrice = tickerLong.last;

        if (!shortEntryPrice || !longEntryPrice) {
            safeLog('error', `[BOT_TRADE] Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i cho ${cleanedCoin}.`);
            return false;
        }

        // --- Set Leverage for SHORT side ---
        let desiredLeverageShort = opportunity.commonLeverage;
        if (!desiredLeverageShort || desiredLeverageShort < 1) {
            safeLog('warn', `[BOT_TRADE] ƒê√≤n b·∫©y t·ª´ server cho SHORT ${shortOriginalSymbol} kh√¥ng h·ª£p l·ªá (${desiredLeverageShort}). Th·ª≠ ƒë·∫∑t ƒë√≤n b·∫©y T·ªêI ƒêA.`);
            desiredLeverageShort = await getMaxLeverageForSymbol(shortExchange, shortOriginalSymbol);
            if (!desiredLeverageShort) {
                safeLog('error', `[BOT_TRADE] ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë√≤n b·∫©y t·ªëi ƒëa cho SHORT ${shortOriginalSymbol} tr√™n ${shortExchangeId}. H·ª¶Y B·ªé L·ªÜNH.`);
                return false;
            }
        }
        actualShortLeverage = desiredLeverageShort;

        try {
            const symbolToUseShort = typeof shortOriginalSymbol === 'string' ? shortOriginalSymbol : String(shortOriginalSymbol);
            if (shortExchange.has['setLeverage']) {
                if (shortExchangeId === 'bingx') {
                    await shortExchange.setLeverage(symbolToUseShort, actualShortLeverage, { 'side': 'BOTH' }); 
                } else if (shortExchangeId === 'binanceusdm') {
                    const binanceSymbolId = shortExchange.market(symbolToUseShort).id;
                    await shortExchange.setLeverage(binanceSymbolId, actualShortLeverage); 
                } else {
                    await shortExchange.setLeverage(symbolToUseShort, actualShortLeverage);
                }
            }
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t ƒë√≤n b·∫©y x${actualShortLeverage} cho SHORT ${shortOriginalSymbol} tr√™n ${shortExchangeId}.`);
        } catch (levErr) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói khi ƒë·∫∑t ƒë√≤n b·∫©y x${actualShortLeverage} cho SHORT ${shortOriginalSymbol}: ${levErr.message}. H·ª¶Y B·ªé L·ªÜNH.`, levErr);
            return false;
        }

        // --- Set Leverage for LONG side ---
        let desiredLeverageLong = opportunity.commonLeverage;
        if (!desiredLeverageLong || desiredLeverageLong < 1) {
            safeLog('warn', `[BOT_TRADE] ƒê√≤n b·∫©y t·ª´ server cho LONG ${longOriginalSymbol} kh√¥ng h·ª£p l·ªá (${desiredLeverageLong}). Th·ª≠ ƒë·∫∑t ƒë√≤n b·∫©y T·ªêI ƒêA.`);
            desiredLeverageLong = await getMaxLeverageForSymbol(longExchange, longOriginalSymbol);
            if (!desiredLeverageLong) {
                safeLog('error', `[BOT_TRADE] ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë√≤n b·∫©y t·ªëi ƒëa cho LONG ${longOriginalSymbol} tr√™n ${longExchangeId}. H·ª¶Y B·ªé L·ªÜNH.`);
                return false;
            }
        }
        actualLongLeverage = desiredLeverageLong;

        try {
            const symbolToUseLong = typeof longOriginalSymbol === 'string' ? longOriginalSymbol : String(longOriginalSymbol);
            if (longExchange.has['setLeverage']) {
                if (longExchangeId === 'bingx') {
                    await longExchange.setLeverage(symbolToUseLong, actualLongLeverage, { 'side': 'BOTH' });
                } else if (longExchangeId === 'binanceusdm') {
                    const binanceSymbolId = longExchange.market(symbolToUseLong).id;
                    await longExchange.setLeverage(binanceSymbolId, actualLongLeverage);
                } else {
                    await longExchange.setLeverage(symbolToUseLong, actualLongLeverage);
                }
            }
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t ƒë√≤n b·∫©y x${actualLongLeverage} cho LONG ${longOriginalSymbol} tr√™n ${longExchangeId}.`);
        } catch (levErr) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói khi ƒë·∫∑t ƒë√≤n b·∫©y x${actualLongLeverage} cho LONG ${longOriginalSymbol}: ${levErr.message}. H·ª¶Y B·ªé L·ªÜNH.`, levErr);
            return false;
        }
        
        const shortAmount = (shortCollateral * actualShortLeverage) / shortEntryPrice;
        const longAmount = (longCollateral * actualLongLeverage) / longEntryPrice;

        if (shortAmount <= 0 || longAmount <= 0) {
            safeLog('error', '[BOT_TRADE] L∆∞·ª£ng h·ª£p ƒë·ªìng t√≠nh to√°n kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.');
            return false;
        }
        
        const shortAmountToOrder = shortExchange.amountToPrecision(shortOriginalSymbol, shortAmount);
        const longAmountToOrder = longExchange.amountToPrecision(longOriginalSymbol, longAmount);

        const shortParams = { 'positionSide': 'SHORT' };
        const longParams = { 'positionSide': 'LONG' };

        safeLog('log', `[BOT_TRADE] M·ªü SHORT ${shortAmountToOrder} ${shortOriginalSymbol} tr√™n ${shortExchangeId}...`);
        shortOrder = await shortExchange.createMarketSellOrder(shortOriginalSymbol, parseFloat(shortAmountToOrder), shortParams);
        safeLog('log', `[BOT_TRADE] ‚úÖ L·ªánh SHORT ${shortExchangeId} kh·ªõp: ID ${shortOrder.id}`);

        safeLog('log', `[BOT_TRADE] M·ªü LONG ${longAmountToOrder} ${longOriginalSymbol} tr√™n ${longExchangeId}...`);
        longOrder = await longExchange.createMarketBuyOrder(longOriginalSymbol, parseFloat(longAmountToOrder), longParams);
        safeLog('log', `[BOT_TRADE] ‚úÖ L·ªánh LONG ${longExchangeId} kh·ªõp: ID ${longOrder.id}`);

        currentTradeDetails = {
            coin: cleanedCoin, shortExchange: shortExchangeId, longExchange: longExchangeId,
            shortOriginalSymbol, longOriginalSymbol,
            shortOrderId: shortOrder.id, longOrderId: longOrder.id,
            shortOrderAmount: shortOrder.amount, longOrderAmount: longOrder.amount,
            shortEntryPrice, longEntryPrice,
            shortCollateral, longCollateral,
            commonLeverage: actualShortLeverage,
            status: 'OPEN', openTime: Date.now()
        };

        await sleep(2000);

        const shortTpPrice = shortEntryPrice * (1 - (TP_PERCENT_OF_COLLATERAL / (actualShortLeverage * 100)));
        const shortSlPrice = shortEntryPrice * (1 + (SL_PERCENT_OF_COLLATERAL / (actualShortLeverage * 100)));
        const longTpPrice = longEntryPrice * (1 + (TP_PERCENT_OF_COLLATERAL / (actualLongLeverage * 100)));
        const longSlPrice = longEntryPrice * (1 - (SL_PERCENT_OF_COLLATERAL / (actualLongLeverage * 100)));
        
        const shortTpPriceToOrder = shortExchange.priceToPrecision(shortOriginalSymbol, shortTpPrice);
        const shortSlPriceToOrder = shortExchange.priceToPrecision(shortOriginalSymbol, shortSlPrice);
        const longTpPriceToOrder = longExchange.priceToPrecision(longOriginalSymbol, longTpPrice);
        const longSlPriceToOrder = longExchange.priceToPrecision(longOriginalSymbol, longSlPrice);

        currentTradeDetails.shortSlPrice = parseFloat(shortSlPriceToOrder);
        currentTradeDetails.shortTpPrice = parseFloat(shortTpPriceToOrder);
        currentTradeDetails.longSlPrice = parseFloat(longSlPriceToOrder);
        currentTradeDetails.longTpPrice = parseFloat(longTpPriceToOrder);

        try { if (parseFloat(shortSlPriceToOrder) > 0) await shortExchange.createOrder(shortOriginalSymbol, 'STOP_MARKET', 'buy', shortOrder.amount, undefined, { 'stopPrice': parseFloat(shortSlPriceToOrder), ...shortParams }); } catch (e) { safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t SL SHORT: ${e.message}`); }
        try { if (parseFloat(shortTpPriceToOrder) > 0) await shortExchange.createOrder(shortOriginalSymbol, 'TAKE_PROFIT_MARKET', 'buy', shortOrder.amount, undefined, { 'stopPrice': parseFloat(shortTpPriceToOrder), ...shortParams }); } catch (e) { safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t TP SHORT: ${e.message}`); }
        try { if (parseFloat(longSlPriceToOrder) > 0) await longExchange.createOrder(longOriginalSymbol, 'STOP_MARKET', 'sell', longOrder.amount, undefined, { 'stopPrice': parseFloat(longSlPriceToOrder), ...longParams }); } catch (e) { safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t SL LONG: ${e.message}`); }
        try { if (parseFloat(longTpPriceToOrder) > 0) await longExchange.createOrder(longOriginalSymbol, 'TAKE_PROFIT_MARKET', 'sell', longOrder.amount, undefined, { 'stopPrice': parseFloat(longTpPriceToOrder), ...longParams }); } catch (e) { safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t TP LONG: ${e.message}`); }
        
        return true;
    } catch (e) {
        safeLog('error', `[BOT_TRADE] ‚ùå L·ªói nghi√™m tr·ªçng khi th·ª±c hi·ªán giao d·ªãch: ${e.message}`, e);
        if (shortOrder?.id) { try { await exchanges[shortExchangeId].cancelOrder(shortOrder.id, shortOriginalSymbol); } catch (ce) { safeLog('error', `[BOT_TRADE] L·ªói h·ªßy l·ªánh SHORT: ${ce.message}`, ce); } }
        if (longOrder?.id) { try { await exchanges[longExchangeId].cancelOrder(longOrder.id, longOriginalSymbol); } catch (ce) { safeLog('error', `[BOT_TRADE] L·ªói h·ªßy l·ªánh LONG: ${ce.message}`, ce); } }
        currentTradeDetails = null;
        return false;
    }
}

async function closeTradesAndCalculatePnL() {
    if (!currentTradeDetails || currentTradeDetails.status !== 'OPEN') {
        safeLog('log', '[BOT_PNL] Kh√¥ng c√≥ giao d·ªãch n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.');
        return;
    }

    safeLog('log', '[BOT_PNL] üîÑ ƒêang ƒë√≥ng c√°c v·ªã th·∫ø v√† t√≠nh to√°n PnL...');
    const { coin, shortExchange, longExchange, shortOriginalSymbol, longOriginalSymbol, shortOrderAmount, longOrderAmount, shortCollateral, longCollateral } = currentTradeDetails;

    try {
        safeLog('log', '[BOT_PNL] H·ªßy c√°c l·ªánh TP/SL c√≤n ch·ªù (n·∫øu c√≥)...');
        // Fetch and cancel specific symbol orders for SHORT side
        try {
            const shortOpenOrders = await exchanges[shortExchange].fetchOpenOrders(shortOriginalSymbol);
            for (const order of shortOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[shortExchange].cancelOrder(order.id, shortOriginalSymbol);
                    safeLog('log', `[BOT_PNL] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${shortOriginalSymbol} tr√™n ${shortExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${shortOriginalSymbol} tr√™n ${shortExchange}: ${e.message}`, e); }
        
        // Fetch and cancel specific symbol orders for LONG side
        try {
            const longOpenOrders = await exchanges[longExchange].fetchOpenOrders(longOriginalSymbol);
            for (const order of longOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[longExchange].cancelOrder(order.id, longOriginalSymbol);
                    safeLog('log', `[BOT_PNL] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${longOriginalSymbol} tr√™n ${longExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${longOriginalSymbol} tr√™n ${longExchange}: ${e.message}`, e); }

        // Parameters for closing orders on BingX (Hedge Mode) and BinanceUSDM (Hedge Mode)
        const closeShortParams = {};
        if (shortExchange === 'bingx') {
            closeShortParams.positionSide = 'SHORT';
        } else if (shortExchange === 'binanceusdm') {
            closeShortParams.positionSide = 'SHORT';
        }

        const closeLongParams = {};
        if (longExchange === 'bingx') {
            closeLongParams.positionSide = 'LONG';
        } else if (longExchange === 'binanceusdm') {
            closeLongParams.positionSide = 'LONG';
        }

        safeLog('log', `[BOT_PNL] ƒê√≥ng v·ªã th·∫ø SHORT ${coin} tr√™n ${shortExchange} (amount: ${shortOrderAmount})...`);
        const closeShortOrder = await exchanges[shortExchange].createMarketBuyOrder(shortOriginalSymbol, shortOrderAmount, closeShortParams);
        safeLog('log', `[BOT_PNL] ‚úÖ V·ªã th·∫ø SHORT tr√™n ${shortExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeShortOrder.id}`);

        safeLog('log', `[BOT_PNL] ƒê√≥ng v·ªã th·∫ø LONG ${coin} tr√™n ${longExchange} (amount: ${longOrderAmount})...`);
        const closeLongOrder = await exchanges[longExchange].createMarketSellOrder(longOriginalSymbol, longOrderAmount, closeLongParams);
        safeLog('log', `[BOT_PNL] ‚úÖ V·ªã th·∫ø LONG tr√™n ${longExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeLongOrder.id}`);

        safeLog('log', '[BOT_PNL] ƒê·ª£i 30 gi√¢y ƒë·ªÉ s√†n x·ª≠ l√Ω d·ªØ li·ªáu PnL...');
        await sleep(30000); 

        let shortSidePnl = 0;
        let longSidePnl = 0;

        // L·∫•y PnL th·ª±c t·∫ø cho b√™n SHORT
        try {
            let pnlFound = false;
            const shortTrades = await exchanges[shortExchange].fetchMyTrades(shortOriginalSymbol, undefined, undefined, { orderId: closeShortOrder.id, limit: 10 }); 
            for (const trade of shortTrades) {
                if (trade.order === closeShortOrder.id && trade.info?.realizedPnl !== undefined) {
                    shortSidePnl = parseFloat(trade.info.realizedPnl);
                    safeLog('log', `[BOT_PNL] PnL SHORT t·ª´ trade ${trade.id} (order ${closeShortOrder.id}): ${shortSidePnl.toFixed(2)} USDT.`);
                    pnlFound = true;
                    break;
                }
            }
            if (!pnlFound) {
                safeLog('warn', `[BOT_PNL] Kh√¥ng t√¨m th·∫•y PnL th·ª±c t·∫ø cho l·ªánh SHORT ${closeShortOrder.id} tr√™n ${shortExchange} t·ª´ trade history. C·∫≠p nh·∫≠t s·ªë d∆∞ v√† t√≠nh t·ª´ ƒë√≥.`);
                await updateBalances(); 
                shortSidePnl = (balances[shortExchange]?.available || 0) - currentTradeDetails.shortCollateral;
                safeLog('log', `[BOT_PNL] PnL SHORT t√≠nh t·ª´ s·ªë d∆∞ ${shortExchange}: ${shortSidePnl.toFixed(2)} USDT.`);
            }
        } catch (e) {
            safeLog('error', `[BOT_PNL] ‚ùå L·ªói khi l·∫•y PnL th·ª±c t·∫ø cho SHORT ${shortExchange}: ${e.message}`, e);
            await updateBalances(); 
            shortSidePnl = (balances[shortExchange]?.available || 0) - currentTradeDetails.shortCollateral;
            safeLog('log', `[BOT_PNL] PnL SHORT t√≠nh t·ª´ s·ªë d∆∞ (do l·ªói): ${shortSidePnl.toFixed(2)} USDT.`);
        }

        // L·∫•y PnL th·ª±c t·∫ø cho b√™n LONG
        try {
            let pnlFound = false;
            const longTrades = await exchanges[longExchange].fetchMyTrades(longOriginalSymbol, undefined, undefined, { orderId: closeLongOrder.id, limit: 10 });
            for (const trade of longTrades) {
                if (trade.order === closeLongOrder.id && trade.info?.realizedPnl !== undefined) {
                    longSidePnl = parseFloat(trade.info.realizedPnl);
                    safeLog('log', `[BOT_PNL] PnL LONG t·ª´ trade ${trade.id} (order ${closeLongOrder.id}): ${longSidePnl.toFixed(2)} USDT.`);
                    pnlFound = true;
                    break;
                }
            }
            if (!pnlFound) {
                safeLog('warn', `[BOT_PNL] Kh√¥ng t√¨m th·∫•y PnL th·ª±c t·∫ø cho l·ªánh LONG ${closeLongOrder.id} tr√™n ${longExchange} t·ª´ trade history. C·∫≠p nh·∫≠t s·ªë d∆∞ v√† t√≠nh t·ª´ ƒë√≥.`);
                await updateBalances(); 
                longSidePnl = (balances[longExchange]?.available || 0) - currentTradeDetails.longCollateral;
                safeLog('log', `[BOT_PNL] PnL LONG t√≠nh t·ª´ s·ªë d∆∞ ${longExchange}: ${longSidePnl.toFixed(2)} USDT.`);
            }
        } catch (e) {
            safeLog('error', `[BOT_PNL] ‚ùå L·ªói khi l·∫•y PnL th·ª±c t·∫ø cho LONG ${longExchange}: ${e.message}`, e);
            await updateBalances(); 
            longSidePnl = (balances[longExchange]?.available || 0) - currentTradeDetails.longCollateral;
            safeLog('log', `[BOT_PNL] PnL LONG t√≠nh t·ª´ s·ªë d∆∞ (do l·ªói): ${longSidePnl.toFixed(2)} USDT.`);
        }

        const cyclePnl = shortSidePnl + longSidePnl;
        cumulativePnl += cyclePnl;

        tradeHistory.unshift({
            id: Date.now(),
            coin: coin,
            exchanges: `${shortExchange}/${longExchange}`,
            fundingDiff: currentSelectedOpportunityForExecution?.fundingDiff, 
            estimatedPnl: currentSelectedOpportunityForExecution?.estimatedPnl, 
            actualPnl: parseFloat(cyclePnl.toFixed(2)),
            timestamp: new Date().toISOString()
        });

        if (tradeHistory.length > 50) {
            tradeHistory.pop();
        }

        safeLog('log', `[BOT_PNL] ‚úÖ Chu k·ª≥ giao d·ªãch cho ${coin} ho√†n t·∫•t. PnL chu k·ª≥: ${cyclePnl.toFixed(2)} USDT. T·ªïng PnL: ${cumulativePnl.toFixed(2)} USDT.`);

    } catch (e) {
        safeLog('error', `[BOT_PNL] ‚ùå L·ªói khi ƒë√≥ng v·ªã th·∫ø ho·∫∑c t√≠nh to√°n PnL: ${e.message}`, e);
    } finally {
        currentSelectedOpportunityForExecution = null; 
        safeLog('log', `[BOT] currentTradeDetails ƒëang ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ null.`);
        currentTradeDetails = null; 
        safeLog('log', '[BOT_PNL] D·ªçn d·∫πp l·ªánh ch·ªù v√† v·ªã th·∫ø ƒë√£ ƒë√≥ng (n·∫øu c√≥).');
    }
}

let serverDataGlobal = null;

async function mainBotLoop() {
    if (botLoopIntervalId) clearTimeout(botLoopIntervalId);

    if (botState !== 'RUNNING') {
        safeLog('log', '[BOT_LOOP] Bot kh√¥ng ·ªü tr·∫°ng th√°i RUNNING. D·ª´ng v√≤ng l·∫∑p.');
        return;
    }

    const now = new Date();
    const currentMinute = now.getUTCMinutes();
    const currentSecond = now.getUTCSeconds();

    const minuteAligned = Math.floor(now.getTime() / (60 * 1000));

    if (currentSecond % DATA_FETCH_INTERVAL_SECONDS === 0 && LAST_ACTION_TIMESTAMP.dataFetch !== currentSecond) {
        LAST_ACTION_TIMESTAMP.dataFetch = currentSecond;

        const fetchedData = await fetchDataFromServer();
        if (fetchedData) {
            serverDataGlobal = fetchedData;
            await processServerData(serverDataGlobal);
        }
    }

    if (currentMinute === 50 && currentSecond >= 0 && currentSecond < 5 && botState === 'RUNNING' && !currentTradeDetails && !currentSelectedOpportunityForExecution) {
        if (LAST_ACTION_TIMESTAMP.selectionTime !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.selectionTime = minuteAligned;

            safeLog('log', `[BOT_LOOP] üåü K√≠ch ho·∫°t l·ª±a ch·ªçn c∆° h·ªôi ƒë·ªÉ TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}:${currentSecond} gi√¢y.`);

            let bestOpportunityFoundForExecution = null;
            for (const op of allCurrentOpportunities) {
                const minutesUntilFunding = (op.nextFundingTime - now.getTime()) / (1000 * 60); 
                op.details.minutesUntilFunding = minutesUntilFunding; 

                if (op.estimatedPnl >= MIN_PNL_PERCENTAGE &&
                    minutesUntilFunding > 0 &&
                    minutesUntilFunding < MIN_MINUTES_FOR_EXECUTION && 
                    minutesUntilFunding <= MAX_MINUTES_UNTIL_FUNDING) {

                    if (!bestOpportunityFoundForExecution ||
                        minutesUntilFunding < bestOpportunityFoundForExecution.details.minutesUntilFunding ||
                        (minutesUntilFunding === bestOpportunityFoundForExecution.details.minutesUntilFunding && op.estimatedPnl > bestOpportunityFoundForExecution.estimatedPnl)
                    ) {
                        bestOpportunityFoundForExecution = op;
                    }
                }
            }

            if (bestOpportunityFoundForExecution) {
                currentSelectedOpportunityForExecution = bestOpportunityFoundForExecution;
                safeLog('log', `[BOT_LOOP] ‚úÖ Bot ƒë√£ ch·ªçn c∆° h·ªôi: ${currentSelectedOpportunityForExecution.coin} tr√™n ${currentSelectedOpportunityForExecution.exchanges} ƒë·ªÉ TH·ª∞C HI·ªÜN.`);
                safeLog('log', `  Th√¥ng tin chi ti·∫øt: PnL ∆∞·ªõc t√≠nh: ${currentSelectedOpportunityForExecution.estimatedPnl.toFixed(2)}%, Funding trong: ${currentSelectedOpportunityForExecution.details.minutesUntilFunding.toFixed(1)} ph√∫t.`);
                safeLog('log', `  S√†n Short: ${currentSelectedOpportunityForExecution.details.shortExchange} (${currentSelectedOpportunityForExecution.details.shortOriginalSymbol}), S√†n Long: ${currentSelectedOpportunityForExecution.details.longExchange} (${currentSelectedOpportunityForExecution.details.longOriginalSymbol})`);
                
                const shortExId = currentSelectedOpportunityForExecution.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.details.shortExchange.toLowerCase();
                const longExId = currentSelectedOpportunityForExecution.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.details.longExchange.toLowerCase();
                const minAvailableBalanceForDisplay = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
                bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalanceForDisplay * (currentPercentageToUse / 100)).toFixed(2);
                safeLog('log', `  V·ªën d·ª± ki·∫øn: ${bestPotentialOpportunityForDisplay.estimatedTradeCollateral} USDT`);

                safeLog('log', '[BOT_LOOP] B·ªè qua b∆∞·ªõc chuy·ªÉn ti·ªÅn. Ti·ªÅn ph·∫£i c√≥ s·∫µn tr√™n c√°c s√†n.');

            } else {
                safeLog('log', `[BOT_LOOP] üîç Kh√¥ng t√¨m th·∫•y c∆° h·ªôi n√†o ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}.`);
                currentSelectedOpportunityForExecution = null;
            }
        }
    }

    if (currentMinute === 59 && currentSecond >= 55 && currentSecond < 59 && botState === 'RUNNING' && currentSelectedOpportunityForExecution && !currentTradeDetails) {
        if (LAST_ACTION_TIMESTAMP.tradeExecution !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.tradeExecution = minuteAligned;

            safeLog('log', `[BOT_LOOP] ‚ö° K√≠ch ho·∫°t m·ªü l·ªánh cho c∆° h·ªôi ${currentSelectedOpportunityForExecution.coin} v√†o ph√∫t 59:55.`);
            botState = 'EXECUTING_TRADES';
            const tradeSuccess = await executeTrades(currentSelectedOpportunityForExecution, currentPercentageToUse);
            if (tradeSuccess) {
                safeLog('log', '[BOT_LOOP] ‚úÖ M·ªü l·ªánh ho√†n t·∫•t.');
            } else {
                safeLog('error', '[BOT_LOOP] ‚ùå L·ªói m·ªü l·ªánh. H·ªßy chu k·ª≥ n√†y.');
                currentSelectedOpportunityForExecution = null;
                currentTradeDetails = null;
            }
            botState = 'RUNNING';
        }
    }

    if (currentMinute === 0 && currentSecond >= 5 && currentSecond < 10 && botState === 'RUNNING' && currentTradeDetails?.status === 'OPEN') {
        if (LAST_ACTION_TIMESTAMP.closeTrade !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.closeTrade = minuteAligned;

            safeLog('log', '[BOT_LOOP] üõë K√≠ch ho·∫°t ƒë√≥ng l·ªánh v√† t√≠nh PnL v√†o ph√∫t 00:05.');
            botState = 'CLOSING_TRADES';
            
            closeTradesAndCalculatePnL()
                .then(() => {
                    safeLog('log', '[BOT_LOOP] ‚úÖ ƒê√≥ng l·ªánh v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then).');
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_LOOP] ‚ùå L·ªói khi ƒë√≥ng l·ªánh v√† t√≠nh PnL (qua Promise.catch): ${errorInClose.message}`, errorInClose);
                })
                .finally(() => {
                    botState = 'RUNNING';
                });
        }
    }

    botLoopIntervalId = setTimeout(() => { mainBotLoop(); }, 1000);
}

function startBot() {
    if (botState === 'STOPPED') {
        safeLog('log', '[BOT] ‚ñ∂Ô∏è Kh·ªüi ƒë·ªông Bot...');
        botState = 'RUNNING';
        updateBalances().then(() => {
            safeLog('log', '[BOT] ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ ban ƒë·∫ßu. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot.');
            mainBotLoop();
        }).catch(err => {
            safeLog('error', `[BOT] L·ªói khi kh·ªüi t·∫°o s·ªë d∆∞ ban ƒë·∫ßu: ${err.message}`, err);
            botState = 'STOPPED';
        });
        return true;
    }
    safeLog('warn', '[BOT] Bot ƒë√£ ch·∫°y ho·∫∑c ƒëang trong qu√° tr√¨nh chuy·ªÉn tr·∫°ng th√°i.');
    return false;
}

function stopBot() {
    if (botState === 'RUNNING' || botState === 'FETCHING_DATA' || botState === 'PROCESSING_DATA' || botState === 'EXECUTING_TRADES' || botState === 'CLOSING_TRADES') {
        safeLog('log', '[BOT] ‚è∏Ô∏è D·ª´ng Bot...');
        if (botLoopIntervalId) {
            clearTimeout(botLoopIntervalId);
            botLoopIntervalId = null;
        }
        botState = 'STOPPED';
        safeLog('log', '[BOT] Bot ƒë√£ d·ª´ng th√†nh c√¥ng.');
        return true;
    }
    safeLog('warn', '[BOT] Bot kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng th·ªÉ d·ª´ng.');
    return false;
}

const botServer = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        fs.readFile(path.join(__dirname, 'index.html'), (err, content) => {
            if (err) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói khi ƒë·ªçc index.html:', err.message, err);
                res.writeHead(500);
                res.end('L·ªói khi ƒë·ªçc index.html');
                return;
            }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/bot-api/status' && req.method === 'GET') {
        let displayCurrentTradeDetails = null;
        try {
            if (currentTradeDetails && typeof currentTradeDetails === 'object' && currentTradeDetails.status === 'OPEN') {
                displayCurrentTradeDetails = currentTradeDetails;
            } else {
                displayCurrentTradeDetails = null;
            }
        } catch (e) {
            safeLog('error', `[BOT_SERVER] CRITICAL EXCEPTION accessing currentTradeDetails for status API: ${e.message}. Setting to null.`, e);
            displayCurrentTradeDetails = null;
        }

        const statusData = {
            botState: botState,
            balances: Object.fromEntries(Object.entries(balances).filter(([id]) => activeExchangeIds.includes(id) || id === 'totalOverall')),
            initialTotalBalance: initialTotalBalance,
            cumulativePnl: cumulativePnl,
            tradeHistory: tradeHistory,
            currentSelectedOpportunity: bestPotentialOpportunityForDisplay,
            currentTradeDetails: displayCurrentTradeDetails
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(statusData));
    } else if (req.url === '/bot-api/start' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', () => {
            try {
                const data = body ? JSON.parse(body) : {};
                currentPercentageToUse = parseFloat(data.percentageToUse);
                if (isNaN(currentPercentageToUse) || currentPercentageToUse < 1 || currentPercentageToUse > 100) {
                    currentPercentageToUse = 50;
                    safeLog('warn', `Gi√° tr·ªã ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá t·ª´ UI, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: ${currentPercentageToUse}%`);
                }

                const started = startBot();
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: started, message: started ? 'Bot ƒë√£ kh·ªüi ƒë·ªông.' : 'Bot ƒë√£ ch·∫°y.' }));
            } catch (error) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/start:', error.message, error);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server.' }));
            }
        });
    } else if (req.url === '/bot-api/stop' && req.method === 'POST') {
        const stopped = stopBot();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: stopped, message: stopped ? 'Bot ƒë√£ d·ª´ng.' : 'Bot kh√¥ng ho·∫°t ƒë·ªông.' }));
    } else if (req.url === '/bot-api/test-trade' && req.method === 'POST') { 
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', async () => {
            try {
                const data = body ? JSON.parse(body) : {};
                const testPercentageToUse = parseFloat(data.percentageToUse);

                if (isNaN(testPercentageToUse) || testPercentageToUse < 1 || testPercentageToUse > 100) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá (1-100).' }));
                    return;
                }

                if (!bestPotentialOpportunityForDisplay) {
                    safeLog('warn', '[BOT_SERVER] Kh√¥ng t√¨m th·∫•y c∆° h·ªôi n√†o ƒëang ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI. Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh test.');
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Kh√¥ng t√¨m th·∫•y c∆° h·ªôi arbitrage n√†o ƒë·ªÉ test. Vui l√≤ng ƒë·∫£m b·∫£o c√≥ c∆° h·ªôi ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI.' }));
                    return;
                }

                if (currentTradeDetails && currentTradeDetails.status === 'OPEN') {
                    safeLog('warn', '[BOT_SERVER] ƒê√£ c√≥ l·ªánh ƒëang m·ªü. Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh test khi c√≥ l·ªánh ƒëang ƒë∆∞·ª£c theo d√µi.');
                    res.writeHead(409, { 'Content-Type': 'application/json' }); 
                    res.end(JSON.stringify({ success: false, message: 'ƒê√£ c√≥ l·ªánh ƒëang m·ªü. Vui l√≤ng ƒë√≥ng l·ªánh hi·ªán t·∫°i tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh test.' }));
                    return;
                }
                
                const testOpportunity = bestPotentialOpportunityForDisplay;

                safeLog('log', `[BOT_SERVER] ‚ö° Y√™u c·∫ßu TEST M·ªû L·ªÜNH: ${testOpportunity.coin} tr√™n ${testOpportunity.exchanges} v·ªõi ${testPercentageToUse}% v·ªën.`);
                safeLog('log', '[BOT_SERVER] Th√¥ng tin c∆° h·ªôi Test:', testOpportunity);

                const originalCurrentSelectedOpportunityForExecution = currentSelectedOpportunityForExecution;
                currentSelectedOpportunityForExecution = testOpportunity; 

                const tradeSuccess = await executeTrades(testOpportunity, testPercentageToUse);

                currentSelectedOpportunityForExecution = originalCurrentSelectedOpportunityForExecution;

                if (tradeSuccess) {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'L·ªánh TEST ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!' }));
                } else {
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªánh TEST. Vui l√≤ng ki·ªÉm tra log bot.' }));
                }

            } catch (error) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/test-trade:', error.message, error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'L·ªói server khi th·ª±c hi·ªán l·ªánh test.' }));
            }
        });
    } else if (req.url === '/bot-api/stop-test-trade' && req.method === 'POST') { 
        try {
            if (!currentTradeDetails || currentTradeDetails.status !== 'OPEN') {
                safeLog('log', '[BOT_SERVER] Y√™u c·∫ßu d·ª´ng l·ªánh nh∆∞ng kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.');
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.' }));
                return;
            }

            safeLog('log', '[BOT_SERVER] üõë Y√™u c·∫ßu D·ª™NG L·ªÜNH ƒêANG M·ªû (c√≥ th·ªÉ l√† l·ªánh test ho·∫∑c l·ªánh t·ª± ƒë·ªông).');
            closeTradesAndCalculatePnL()
                .then(() => {
                    safeLog('log', '[BOT_SERVER] ‚úÖ ƒê√≥ng l·ªánh v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then trong API stop-test-trade).');
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'ƒê√£ g·ª≠i l·ªánh ƒë√≥ng v·ªã th·∫ø th√†nh c√¥ng.' }));
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_SERVER] ‚ùå L·ªói khi ƒë√≥ng l·ªánh v√† t√≠nh PnL (qua Promise.catch trong API stop-test-trade): ${errorInClose.message}`, errorInClose);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh.' }));
                });

        } catch (error) {
            safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/stop-test-trade:', error.message, error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh.' }));
        }
    }
    else {
        res.writeHead(404); res.end('Not Found');
    }
});

botServer.listen(BOT_PORT, () => {
    safeLog('log', `‚úÖ M√°y ch·ªß UI c·ªßa Bot ƒëang ch·∫°y t·∫°i http://localhost:${BOT_PORT}`);
    safeLog('log', 'Bot ƒëang ch·ªù l·ªánh "Start" t·ª´ giao di·ªán HTML.');
});
