const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');
const { URLSearchParams } = require('url');

const safeLog = (type, ...args) => {
    try {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const timestamp = `${hours}:${minutes}`;
        if (typeof console === 'object' && typeof console[type] === 'function') {
            console[type](`[${timestamp} ${type.toUpperCase()}]`, ...args);
        } else {
            const message = `[${timestamp} ${type.toUpperCase()}] ${args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg).join(' ')}\n`;
            if (type === 'error' || type === 'warn') {
                process.stderr.write(message);
            } else {
                process.stdout.write(message);
            }
        }
    } catch (e) {
        process.stderr.write(`FATAL LOG ERROR (safeLog itself failed): ${e.message} - Original log: [${type.toUpperCase()}] ${args.join(' ')}\n`);
    }
};

const {
    binanceApiKey, binanceApiSecret,
    bingxApiKey, bingxApiSecret,
    okxApiKey, okxApiSecret, okxPassword,
    bitgetApiKey, bitgetApiSecret, bitgetApiPassword
} = require('../config.js');

// const { usdtDepositAddressesByNetwork } = require('./balance.js'); // <<-- ƒê√É LO·∫†I B·ªé

const BOT_PORT = 5008;
const SERVER_DATA_URL = 'http://localhost:5005/api/data';

const MIN_PNL_PERCENTAGE = 1;
const MAX_MINUTES_UNTIL_FUNDING = 30;
const MIN_MINUTES_FOR_EXECUTION = 15;

// C·∫≠p nh·∫≠t s·ªë ti·ªÅn chuy·ªÉn t·ªëi thi·ªÉu theo y√™u c·∫ßu (KH√îNG C√íN ƒê∆Ø·ª¢C D√ôNG)
// const FUND_TRANSFER_MIN_AMOUNT_BINANCE = 10; // <<-- ƒê√É LO·∫†I B·ªé
// const FUND_TRANSFER_MIN_AMOUNT_BINGX = 5; // <<-- ƒê√É LO·∫†I B·ªé
// const FUND_TRANSFER_MIN_AMOUNT_OKX = 1; // <<-- ƒê√É LO·∫†I B·ªé

const DATA_FETCH_INTERVAL_SECONDS = 5;
const HOURLY_FETCH_TIME_MINUTE = 45;

const SL_PERCENT_OF_COLLATERAL = 700;
const TP_PERCENT_OF_COLLATERAL = 8386;

const DISABLED_EXCHANGES = ['bitget'];

const ALL_POSSIBLE_EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];

const activeExchangeIds = ALL_POSSIBLE_EXCHANGE_IDS.filter(id => !DISABLED_EXCHANGES.includes(id));

let botState = 'STOPPED';
let botLoopIntervalId = null;

const exchanges = {};
activeExchangeIds.forEach(id => {
    const exchangeClass = ccxt[id];
    const config = {
        'options': { 'defaultType': 'swap' },
        'enableRateLimit': true,
        'headers': {
            'User-Agent': 'Mozilla/5.0 (compatible; ccxt/1.0;)',
        }
    };

    if (id === 'binanceusdm') { config.apiKey = binanceApiKey; config.secret = binanceApiSecret; }
    else if (id === 'bingx') { config.apiKey = bingxApiKey; config.secret = bingxApiSecret; }
    else if (id === 'okx') { config.apiKey = okxApiKey; config.secret = okxApiSecret; if(okxPassword) config.password = okxPassword; }
    else if (id === 'bitget') { config.apiKey = bitgetApiKey; config.secret = bitgetApiSecret; if(bitgetApiPassword) config.password = bitgetApiPassword; }

    if ((config.apiKey && config.secret) || (id === 'okx' && config.password) || (id === 'bitget' && config.password && config.apiKey && config.secret)) {
        exchanges[id] = new exchangeClass(config);
    } else {
        safeLog('warn', `[INIT] B·ªè qua kh·ªüi t·∫°o ${id.toUpperCase()} v√¨ thi·∫øu API Key/Secret/Password ho·∫∑c kh√¥ng h·ª£p l·ªá.`);
    }
});

let balances = {};
activeExchangeIds.forEach(id => {
    balances[id] = { total: 0, available: 0, originalSymbol: {} };
});
balances.totalOverall = 0;

let initialTotalBalance = 0;
let cumulativePnl = 0;
let tradeHistory = [];

let currentSelectedOpportunityForExecution = null;
let bestPotentialOpportunityForDisplay = null;
let allCurrentOpportunities = [];

const LAST_ACTION_TIMESTAMP = {
    dataFetch: 0,
    selectionTime: 0,
    tradeExecution: 0,
    closeTrade: 0,
};

let currentTradeDetails = null;

let currentPercentageToUse = 50;

function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

// <<-- getMinTransferAmount ƒê√É LO·∫†I B·ªé -->>
// function getMinTransferAmount(fromExchangeId) { ... }

// <<-- getTargetDepositInfo ƒê√É LO·∫†I B·ªé -->>
// function getTargetDepositInfo(fromExchangeId, toExchangeId) { ... }

// <<-- pollForBalance ƒê√É LO·∫†I B·ªé -->>

async function fetchDataFromServer() {
    try {
        const response = await fetch(SERVER_DATA_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        safeLog('debug', '[SERVER_DATA_FETCHED]', data); // Log data returned from server
        return data;
    } catch (error) {
        safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: ${error.message}`, error);
        return null;
    }
}

async function updateBalances() {
    safeLog('log', '[BOT] üîÑ C·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ c√°c s√†n...');
    let currentTotalOverall = 0;
    for (const id of activeExchangeIds) {
        if (!exchanges[id]) {
            safeLog('warn', `[BOT] ${id.toUpperCase()} kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o (c√≥ th·ªÉ do thi·∫øu API Key/Secret). B·ªè qua c·∫≠p nh·∫≠t s·ªë d∆∞.`);
            continue;
        }
        try {
            const exchange = exchanges[id];
            await exchange.loadMarkets(true);

            // Fetch futures balance for trading
            const accountBalance = await exchange.fetchBalance({ 'type': 'future' });
            const usdtFreeBalance = accountBalance.free?.USDT || 0;
            const usdtTotalBalance = accountBalance.total?.USDT || 0;

            balances[id].available = usdtFreeBalance;
            balances[id].total = usdtTotalBalance;

            balances[id].originalSymbol = {};

            currentTotalOverall += balances[id].available;

            safeLog('log', `[BOT] ‚úÖ ${id.toUpperCase()} Balance: Total ${usdtTotalBalance.toFixed(2)} USDT, Available ${balances[id].available.toFixed(2)} USDT.`);
        } catch (e) {
            safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y s·ªë d∆∞ ${id.toUpperCase()}: ${e.message}`, e);
        }
    }
    balances.totalOverall = currentTotalOverall;
    safeLog('log', `[BOT] T·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng tr√™n t·∫•t c·∫£ c√°c s√†n (c√≥ th·ªÉ bao g·ªìm √¢m): ${currentTotalOverall.toFixed(2)} USDT.`);
    if (initialTotalBalance === 0) {
        initialTotalBalance = currentTotalOverall;
    }
}

async function processServerData(serverData) {
    if (!serverData || !serverData.arbitrageData) {
        safeLog('warn', '[BOT] D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu arbitrageData.');
        bestPotentialOpportunityForDisplay = null;
        allCurrentOpportunities = [];
        return;
    }

    const now = Date.now();
    let bestForDisplay = null;
    const tempAllOpportunities = [];

    serverData.arbitrageData.forEach(op => {
        const minutesUntilFunding = (op.nextFundingTime - now) / (1000 * 60);

        const shortExIdNormalized = op.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.shortExchange.toLowerCase();
        const longExIdNormalized = op.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.longExchange.toLowerCase();

        if (DISABLED_EXCHANGES.includes(shortExIdNormalized) || DISABLED_EXCHANGES.includes(longExIdNormalized) ||
            !exchanges[shortExIdNormalized] || !exchanges[longExIdNormalized]) {
            return;
        }

        if (op.estimatedPnl > 0 && minutesUntilFunding > 0) {
            op.details.minutesUntilFunding = minutesUntilFunding;

            op.details.shortFundingRate = op.details.shortRate !== undefined ? op.details.shortRate : 'N/A';
            op.details.longFundingRate = op.details.longRate !== undefined ? op.details.longRate : 'N/A';
            op.fundingDiff = op.fundingDiff !== undefined ? op.fundingDiff : 'N/A';
            op.commonLeverage = op.commonLeverage !== undefined ? op.commonLeverage : 'N/A';

            let shortExId = op.details.shortExchange;
            let longExId = op.details.longExchange;

            if (typeof op.details.shortFundingRate === 'number' && typeof op.details.longFundingRate === 'number') {
                if (op.details.shortFundingRate < op.details.longFundingRate) {
                    shortExId = op.details.longExchange;
                    longExId = op.details.shortExchange;
                }
            }
            op.details.shortExchange = shortExId;
            op.details.longExchange = longExId;

            tempAllOpportunities.push(op);

            if (!bestForDisplay ||
                minutesUntilFunding < bestForDisplay.details.minutesUntilFunding ||
                (minutesUntilFunding === bestForDisplay.details.minutesUntilFunding && op.estimatedPnl > bestForDisplay.estimatedPnl)
            ) {
                bestForDisplay = op;
            }
        }
    });

    allCurrentOpportunities = tempAllOpportunities;

    if (bestForDisplay) {
        bestPotentialOpportunityForDisplay = bestForDisplay;
        // C·∫≠p nh·∫≠t hi·ªÉn th·ªã v·ªën ∆∞·ªõc t√≠nh theo c√°ch t√≠nh m·ªõi
        const shortExId = bestForDisplay.exchanges.split(' / ')[0].toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.exchanges.split(' / ')[0].toLowerCase();
        const longExId = bestForDisplay.exchanges.split(' / ')[1].toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.exchanges.split(' / ')[1].toLowerCase();
        const minAvailableBalance = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
        bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalance * (currentPercentageToUse / 100)).toFixed(2);
    } else {
        bestPotentialOpportunityForDisplay = null;
    }
}

// H√†m gi√∫p t√¨m symbol ƒë·∫ßy ƒë·ªß c·ªßa s√†n t·ª´ t√™n coin "g·ªçn"
function findExchangeSymbol(exchangeId, baseCoin, quoteCoin, rawRates) {
    const exchangeRates = rawRates[exchangeId]?.rates;
    if (!exchangeRates) {
        safeLog('warn', `[HELPER] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu rates cho s√†n ${exchangeId.toUpperCase()}.`);
        return null;
    }

    const commonFormats = [
        `${baseCoin}/${quoteCoin}`,         // V√≠ d·ª•: BTC/USDT (Binance, BingX)
        `${baseCoin}-${quoteCoin}-SWAP`,    // V√≠ d·ª•: BTC-USDT-SWAP (OKX)
        `${baseCoin}${quoteCoin}`,          // V√≠ d·ª•: BTCUSDT (m·ªôt s·ªë ƒë·ªãnh d·∫°ng kh√°c)
        `${baseCoin}_${quoteCoin}`,         // V√≠ d·ª•: BTC_USDT (m·ªôt s·ªë s√†n kh√°c)
    ];

    for (const format of commonFormats) {
        if (exchangeRates[format] && exchangeRates[format].originalSymbol) {
            safeLog('log', `[HELPER] T√¨m th·∫•y symbol kh·ªõp (${format}) cho ${baseCoin}/${quoteCoin} tr√™n ${exchangeId.toUpperCase()}.`);
            return exchangeRates[format].originalSymbol;
        }
    }

    for (const symbolKey in exchangeRates) {
        const symbolData = exchangeRates[symbolKey];
        if (symbolData.originalSymbol && symbolData.base === baseCoin && symbolData.quote === quoteCoin) {
            safeLog('log', `[HELPER] T√¨m th·∫•y symbol kh·ªõp (${symbolKey}) qua thu·ªôc t√≠nh base/quote cho ${baseCoin}/${quoteCoin} tr√™n ${exchangeId.toUpperCase()}.`);
            return symbolData.originalSymbol;
        }
    }

    safeLog('warn', `[HELPER] Kh√¥ng t√¨m th·∫•y symbol h·ª£p l·ªá cho c·∫∑p ${baseCoin}/${quoteCoin} tr√™n s√†n ${exchangeId.toUpperCase()}.`);
    return null;
}

// <<-- LO·∫†I B·ªé TO√ÄN B·ªò PH·∫¶N BINGX CUSTOM TRANSFER LOGIC ·ªû ƒê√ÇY (TR∆Ø·ªöC ƒê√ÇY T√îI ƒê√É ƒê·∫∂T ·ªû ƒê√ÇY) -->>

// <<-- LO·∫†I B·ªé TO√ÄN B·ªò H√ÄM manageFundsAndTransfer ·ªû ƒê√ÇY -->>

async function executeTrades(opportunity, percentageToUse) {
    if (!opportunity || percentageToUse <= 0) {
        safeLog('warn', '[BOT_TRADE] Kh√¥ng c√≥ c∆° h·ªôi ho·∫∑c ph·∫ßn trƒÉm s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá.');
        return false;
    }

    const rawRatesData = serverDataGlobal?.rawRates;
    if (!rawRatesData) {
        safeLog('error', '[BOT_TRADE] D·ªØ li·ªáu gi√° th√¥ t·ª´ server kh√¥ng c√≥ s·∫µn. Kh√¥ng th·ªÉ m·ªü l·ªánh.');
        return false;
    }

    // Ensure opportunity.details exists and contains shortExchange/longExchange
    if (!opportunity.details || !opportunity.details.shortExchange || !opportunity.details.longExchange) {
        safeLog('error', '[BOT_TRADE] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng shortExchange ho·∫∑c longExchange. H·ªßy b·ªè l·ªánh.');
        return false;
    }

    const shortExchangeId = opportunity.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.shortExchange.toLowerCase(); // ƒê·∫£m b·∫£o ID ƒë∆∞·ª£c chu·∫©n h√≥a
    const longExchangeId = opportunity.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.longExchange.toLowerCase(); // ƒê·∫£m b·∫£o ID ƒë∆∞·ª£c chu·∫©n h√≥a

    if (DISABLED_EXCHANGES.includes(shortExchangeId) || DISABLED_EXCHANGES.includes(longExchangeId) ||
        !exchanges[shortExchangeId] || !exchanges[longExchangeId]) {
        safeLog('error', `[BOT_TRADE] B·ªè qua th·ª±c hi·ªán l·ªánh v√¨ s√†n ${shortExchangeId} ho·∫∑c ${longExchangeId} b·ªã t·∫Øt ho·∫∑c ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.`);
        return false;
    }

    const quoteAsset = 'USDT';
    const cleanedCoin = opportunity.coin;
    const shortOriginalSymbol = findExchangeSymbol(shortExchangeId, cleanedCoin, quoteAsset, rawRatesData);
    const longOriginalSymbol = findExchangeSymbol(longExchangeId, cleanedCoin, quoteAsset, rawRatesData);

    if (!shortOriginalSymbol) {
        safeLog('error', `[BOT_TRADE] ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh symbol ƒë·∫ßy ƒë·ªß cho ${cleanedCoin} tr√™n s√†n SHORT ${shortExchangeId}. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu t·ª´ server v√† c·∫•u tr√∫c rawRates.`);
        return false;
    }
    if (!longOriginalSymbol) {
        safeLog('error', `[BOT_TRADE] ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh symbol ƒë·∫ßy ƒë·ªß cho ${cleanedCoin} tr√™n s√†n LONG ${longExchangeId}. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu t·ª´ server v√† c·∫•u tr√∫c rawRates.`);
        return false;
    }

    const shortExchange = exchanges[shortExchangeId];
    const longExchange = exchanges[longExchangeId];

    // <<-- ƒêI·ªÄU CH·ªàNH C√ÅCH T√çNH TO√ÅN S·ªê TI·ªÄN M·ªû L·ªÜNH: L·∫§Y S·ªê D∆Ø C·ª¶A S√ÄN TH·∫§P NH·∫§T TRONG C·∫∂P S√ÄN -->>
    const minAvailableBalanceInPair = Math.min(balances[shortExchangeId]?.available || 0, balances[longExchangeId]?.available || 0);
    const baseCollateralPerSide = minAvailableBalanceInPair * (percentageToUse / 100); // Use the passed percentageToUse
    // <<-- K·∫æT TH√öC ƒêI·ªÄU CH·ªàNH -->>

    const shortCollateral = baseCollateralPerSide;
    const longCollateral = baseCollateralPerSide;

    if (shortCollateral <= 0 || longCollateral <= 0) {
        safeLog('error', '[BOT_TRADE] S·ªë ti·ªÅn m·ªü l·ªánh (collateral) kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.');
        return false;
    }
    if (balances[shortExchangeId]?.available < shortCollateral || balances[longExchangeId]?.available < longCollateral) {
        safeLog('error', `[BOT_TRADE] S·ªë d∆∞ kh·∫£ d·ª•ng kh√¥ng ƒë·ªß ƒë·ªÉ m·ªü l·ªánh v·ªõi v·ªën ${baseCollateralPerSide.toFixed(2)} USDT m·ªói b√™n. ${shortExchangeId}: ${balances[shortExchangeId]?.available.toFixed(2)}, ${longExchangeId}: ${balances[longExchangeId]?.available.toFixed(2)}. H·ªßy b·ªè l·ªánh.`);
        return false;
    }

    safeLog('log', `[BOT_TRADE] Chu·∫©n b·ªã m·ªü l·ªánh cho ${cleanedCoin}:`);
    safeLog('log', `  SHORT ${shortExchangeId} (${shortOriginalSymbol}): ${shortCollateral.toFixed(2)} USDT collateral`);
    safeLog('log', `  LONG ${longExchangeId} (${longOriginalSymbol}): ${longCollateral.toFixed(2)} USDT collateral`);

    let tradeSuccess = true;
    let shortOrder = null, longOrder = null;

    try {
        const tickerShort = await shortExchange.fetchTicker(shortOriginalSymbol);
        const tickerLong = await longExchange.fetchTicker(longOriginalSymbol);

        const shortEntryPrice = tickerShort.last;
        const longEntryPrice = tickerLong.last;

        if (!shortEntryPrice || !longEntryPrice) {
            safeLog('error', `[BOT_TRADE] Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i cho ${cleanedCoin}.`);
            return false;
        }

        const commonLeverage = opportunity.commonLeverage || 1;

        const shortAmount = (shortCollateral * commonLeverage) / shortEntryPrice;
        const longAmount = (longCollateral * commonLeverage) / longEntryPrice;

        if (shortAmount <= 0 || longAmount <= 0) {
            safeLog('error', '[BOT_TRADE] L∆∞·ª£ng h·ª£p ƒë·ªìng t√≠nh to√°n kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.');
            return false;
        }

        const shortAmountFormatted = shortExchangeId === 'okx' ? shortAmount.toFixed(0) : shortAmount.toFixed(3);
        safeLog('log', `[BOT_TRADE] M·ªü SHORT ${shortAmountFormatted} ${cleanedCoin} tr√™n ${shortExchangeId} v·ªõi gi√° ${shortEntryPrice.toFixed(4)}...`);
        shortOrder = await shortExchange.createMarketSellOrder(shortOriginalSymbol, parseFloat(shortAmountFormatted));
        safeLog('log', `[BOT_TRADE] ‚úÖ L·ªánh SHORT ${shortExchangeId} kh·ªõp: ID ${shortOrder.id}, Amount ${shortOrder.amount}, Price ${shortOrder.price}`);

        const longAmountFormatted = longExchangeId === 'okx' ? longAmount.toFixed(0) : longAmount.toFixed(3);
        safeLog('log', `[BOT_TRADE] M·ªü LONG ${longAmountFormatted} ${cleanedCoin} tr√™n ${longExchangeId} v·ªõi gi√° ${longEntryPrice.toFixed(4)}...`);
        longOrder = await longExchange.createMarketBuyOrder(longOriginalSymbol, parseFloat(longAmountFormatted));
        safeLog('log', `[BOT_TRADE] ‚úÖ L·ªánh LONG ${longExchangeId} kh·ªõp: ID ${longOrder.id}, Amount ${longOrder.amount}, Price ${longOrder.price}`);

        safeLog('log', `[BOT_TRADE] Setting currentTradeDetails for ${cleanedCoin} on ${shortExchangeId}/${longExchangeId}`);
        currentTradeDetails = {
            coin: cleanedCoin,
            shortExchange: shortExchangeId,
            longExchange: longExchangeId,
            shortOriginalSymbol: shortOriginalSymbol,
            longOriginalSymbol: longOriginalSymbol,
            shortOrderId: shortOrder.id,
            longOrderId: longOrder.id,
            shortOrderAmount: shortOrder.amount,
            longOrderAmount: longOrder.amount,
            shortEntryPrice: shortEntryPrice,
            longEntryPrice: longEntryPrice,
            shortCollateral: shortCollateral,
            longCollateral: longCollateral,
            commonLeverage: commonLeverage,
            status: 'OPEN',
            openTime: Date.now()
        };
        safeLog('log', `[BOT_TRADE] currentTradeDetails set successfully.`);

        safeLog('log', '[BOT_TRADE] ƒê·ª£i 2 gi√¢y ƒë·ªÉ g·ª≠i l·ªánh TP/SL...');
        await sleep(2000);

        const shortTpPrice = shortEntryPrice * (1 - (TP_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));
        const shortSlPrice = shortEntryPrice * (1 + (SL_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));

        const longTpPrice = longEntryPrice * (1 + (TP_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));
        const longSlPrice = longEntryPrice * (1 - (SL_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));

        safeLog('log', `[BOT_TRADE] T√≠nh to√°n TP/SL cho ${cleanedCoin}:`);
        safeLog('log', `  Short Entry: ${shortEntryPrice.toFixed(4)}, SL: ${shortSlPrice.toFixed(4)}, TP: ${shortTpPrice.toFixed(4)}`);
        safeLog('log', `  Long Entry: ${longEntryPrice.toFixed(4)}, SL: ${longSlPrice.toFixed(4)}, TP: ${longTpPrice.toFixed(4)}`);

        currentTradeDetails.shortSlPrice = shortSlPrice;
        currentTradeDetails.shortTpPrice = shortTpPrice;
        currentTradeDetails.longSlPrice = longSlPrice;
        currentTradeDetails.longTpPrice = longTpPrice;

        try {
            await shortExchange.createOrder(
                shortOriginalSymbol,
                'STOP_MARKET',
                'buy',
                shortOrder.amount,
                undefined,
                { 'stopPrice': shortSlPrice }
            );
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t SL cho SHORT ${shortExchangeId} th√†nh c√¥ng.`);
        } catch (slShortError) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t SL cho SHORT ${shortExchangeId}: ${slShortError.message}`, slShortError);
        }

        try {
            await shortExchange.createOrder(
                shortOriginalSymbol,
                'TAKE_PROFIT_MARKET',
                'buy',
                shortOrder.amount,
                undefined,
                { 'stopPrice': shortTpPrice }
            );
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t TP cho SHORT ${shortExchangeId} th√†nh c√¥ng.`);
        } catch (tpShortError) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t TP cho SHORT ${shortExchangeId}: ${tpShortError.message}`, tpShortError);
        }

        try {
            await longExchange.createOrder(
                longOriginalSymbol,
                'STOP_MARKET',
                'sell',
                longOrder.amount,
                undefined,
                { 'stopPrice': longSlPrice }
            );
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t SL cho LONG ${longExchangeId} th√†nh c√¥ng.`);
        } catch (slLongError) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t SL cho LONG ${longExchangeId}: ${slLongError.message}`, slLongError);
        }

        try {
            await longExchange.createOrder(
                longOriginalSymbol,
                'TAKE_PROFIT_MARKET',
                'sell',
                longOrder.amount,
                undefined,
                { 'stopPrice': longTpPrice }
            );
            safeLog('log', `[BOT_TRADE] ‚úÖ ƒê·∫∑t TP cho LONG ${longExchangeId} th√†nh c√¥ng.`);
        } catch (tpLongError) {
            safeLog('error', `[BOT_TRADE] ‚ùå L·ªói ƒë·∫∑t TP cho LONG ${longExchangeId}: ${tpLongError.message}`, tpLongError);
        }

    } catch (e) {
        safeLog('error', `[BOT_TRADE] ‚ùå L·ªói khi th·ª±c hi·ªán giao d·ªãch (ho·∫∑c ƒë·∫∑t TP/SL): ${e.message}`, e);
        tradeSuccess = false;
        // Attempt to cancel orders if one side failed
        if (shortOrder?.id) {
            try { await exchanges[shortExchangeId].cancelOrder(shortOrder.id, shortOriginalSymbol); safeLog('log', `[BOT_TRADE] ƒê√£ h·ªßy l·ªánh SHORT ${shortExchangeId}: ${shortOrder.id}`); } catch (ce) { safeLog('error', `[BOT_TRADE] L·ªói h·ªßy l·ªánh SHORT: ${ce.message}`, ce); }
        }
        if (longOrder?.id) {
            try { await exchanges[longExchangeId].cancelOrder(longOrder.id, longOriginalSymbol); safeLog('log', `[BOT_TRADE] ƒê√£ h·ªßy l·ªánh LONG ${longExchangeId}: ${longOrder.id}`); } catch (ce) { safeLog('error', `[BOT_TRADE] L·ªói h·ªßy l·ªánh LONG: ${ce.message}`, ce); }
        }
        safeLog('log', `[BOT] currentTradeDetails being reset to null due to trade failure.`);
        currentTradeDetails = null; // Clear details if trade setup failed
    }
    return tradeSuccess;
}

async function closeTradesAndCalculatePnL() {
    if (!currentTradeDetails || currentTradeDetails.status !== 'OPEN') {
        safeLog('log', '[BOT_PNL] Kh√¥ng c√≥ giao d·ªãch n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.');
        return;
    }

    safeLog('log', '[BOT_PNL] üîÑ ƒêang ƒë√≥ng c√°c v·ªã th·∫ø v√† t√≠nh to√°n PnL...');
    const { coin, shortExchange, longExchange, shortOriginalSymbol, longOriginalSymbol, shortOrderAmount, longOrderAmount, shortCollateral, longCollateral } = currentTradeDetails;

    try {
        safeLog('log', '[BOT_PNL] H·ªßy c√°c l·ªánh TP/SL c√≤n ch·ªù (n·∫øu c√≥)...');
        try {
            // Fetch and cancel specific symbol orders
            const shortOpenOrders = await exchanges[shortExchange].fetchOpenOrders(shortOriginalSymbol);
            for (const order of shortOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[shortExchange].cancelOrder(order.id, shortOriginalSymbol);
                    safeLog('log', `[BOT_PNL] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${shortOriginalSymbol} tr√™n ${shortExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${shortOriginalSymbol} tr√™n ${shortExchange}: ${e.message}`, e); }
        try {
            // Fetch and cancel specific symbol orders
            const longOpenOrders = await exchanges[longExchange].fetchOpenOrders(longOriginalSymbol);
            for (const order of longOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[longExchange].cancelOrder(order.id, longOriginalSymbol);
                    safeLog('log', `[BOT_PNL] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${longOriginalSymbol} tr√™n ${longExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${longOriginalSymbol} tr√™n ${longExchange}: ${e.message}`, e); }

        safeLog('log', `[BOT_PNL] ƒê√≥ng v·ªã th·∫ø SHORT ${coin} tr√™n ${shortExchange} (amount: ${shortOrderAmount})...`);
        const closeShortOrder = await exchanges[shortExchange].createMarketBuyOrder(shortOriginalSymbol, shortOrderAmount);
        safeLog('log', `[BOT_PNL] ‚úÖ V·ªã th·∫ø SHORT tr√™n ${shortExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeShortOrder.id}`);

        safeLog('log', `[BOT_PNL] ƒê√≥ng v·ªã th·∫ø LONG ${coin} tr√™n ${longExchange} (amount: ${longOrderAmount})...`);
        const closeLongOrder = await exchanges[longExchange].createMarketSellOrder(longOriginalSymbol, longOrderAmount);
        safeLog('log', `[BOT_PNL] ‚úÖ V·ªã th·∫ø LONG tr√™n ${longExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeLongOrder.id}`);

        await sleep(15000); // Wait a bit for balances to settle on exchanges

        await updateBalances();

        // Calculate PnL based on collateral used and current available balance
        // This assumes that the entire initial collateral is what we are measuring against.
        // And the "available" balance correctly reflects the realized PnL from closing.
        const currentShortAvailable = balances[shortExchange]?.available;
        const currentLongAvailable = balances[longExchange]?.available;
        const cyclePnl = (currentShortAvailable - currentTradeDetails.shortCollateral) + (currentLongAvailable - currentTradeDetails.longCollateral);

        cumulativePnl += cyclePnl;

        tradeHistory.unshift({
            id: Date.now(),
            coin: coin,
            exchanges: `${shortExchange}/${longExchange}`,
            fundingDiff: currentSelectedOpportunityForExecution?.fundingDiff, // Use the last selected opportunity for metadata
            estimatedPnl: currentSelectedOpportunityForExecution?.estimatedPnl, // Use the last selected opportunity for metadata
            actualPnl: parseFloat(cyclePnl.toFixed(2)),
            timestamp: new Date().toISOString()
        });

        if (tradeHistory.length > 50) {
            tradeHistory.pop();
        }

        safeLog('log', `[BOT_PNL] ‚úÖ Chu k·ª≥ giao d·ªãch cho ${coin} ho√†n t·∫•t. PnL chu k·ª≥: ${cyclePnl.toFixed(2)} USDT. T·ªïng PnL: ${cumulativePnl.toFixed(2)} USDT.`);

    } catch (e) {
        safeLog('error', `[BOT_PNL] ‚ùå L·ªói khi ƒë√≥ng v·ªã th·∫ø ho·∫∑c t√≠nh to√°n PnL: ${e.message}`, e);
    } finally {
        currentSelectedOpportunityForExecution = null; // Clear selected opportunity for next cycle
        safeLog('log', `[BOT] currentTradeDetails being reset to null.`);
        currentTradeDetails = null; // Clear current trade details
        safeLog('log', '[BOT_PNL] D·ªçn d·∫πp l·ªánh ch·ªù v√† v·ªã th·∫ø ƒë√£ ƒë√≥ng (n·∫øu c√≥).');
    }
}

let serverDataGlobal = null;

// H√ÄM CH√çNH C·ª¶A V√íNG L·∫∂P BOT - V·∫´n l√† async v√¨ c√≥ c√°c await kh√°c
async function mainBotLoop() {
    safeLog('debug', '[MAIN_BOT_LOOP] Running LAST RESORT DEBUGGED VERSION (2024-07-31 V5 - Promise Chain).'); // Log ƒë·ªÉ x√°c nh·∫≠n phi√™n b·∫£n n√†y ƒëang ch·∫°y
    
    if (botLoopIntervalId) clearTimeout(botLoopIntervalId);

    // ƒê√£ lo·∫°i b·ªè c√°c tr·∫°ng th√°i TRANSFERRING_FUNDS kh·ªèi ƒëi·ªÅu ki·ªán d·ª´ng chung
    if (botState !== 'RUNNING') {
        safeLog('log', '[BOT_LOOP] Bot kh√¥ng ·ªü tr·∫°ng th√°i RUNNING. D·ª´ng v√≤ng l·∫∑p.');
        return;
    }

    const now = new Date();
    const currentMinute = now.getUTCMinutes();
    const currentSecond = now.getUTCSeconds();

    const minuteAligned = Math.floor(now.getTime() / (60 * 1000));

    if (currentSecond % DATA_FETCH_INTERVAL_SECONDS === 0 && LAST_ACTION_TIMESTAMP.dataFetch !== currentSecond) {
        LAST_ACTION_TIMESTAMP.dataFetch = currentSecond;

        const fetchedData = await fetchDataFromServer();
        if (fetchedData) {
            serverDataGlobal = fetchedData;
            await processServerData(serverDataGlobal);
        }
    }

    if (currentMinute === 50 && currentSecond >= 0 && currentSecond < 5 && botState === 'RUNNING' && !currentTradeDetails && !currentSelectedOpportunityForExecution) {
        if (LAST_ACTION_TIMESTAMP.selectionTime !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.selectionTime = minuteAligned;

            safeLog('log', `[BOT_LOOP] üåü K√≠ch ho·∫°t l·ª±a ch·ªçn c∆° h·ªôi ƒë·ªÉ TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}:${currentSecond} gi√¢y.`);

            let bestOpportunityFoundForExecution = null;
            for (const op of allCurrentOpportunities) {
                const minutesUntilFunding = op.details.minutesUntilFunding;

                if (op.estimatedPnl >= MIN_PNL_PERCENTAGE &&
                    minutesUntilFunding > 0 &&
                    minutesUntilFunding < MIN_MINUTES_FOR_EXECUTION &&
                    minutesUntilFunding <= MAX_MINUTES_UNTIL_FUNDING) {

                    if (!bestOpportunityFoundForExecution ||
                        minutesUntilFunding < bestOpportunityFoundForExecution.details.minutesUntilFunding ||
                        (minutesUntilFunding === bestOpportunityFoundForExecution.details.minutesUntilFunding && op.estimatedPnl > bestOpportunityFoundForExecution.estimatedPnl)
                    ) {
                        bestOpportunityFoundForExecution = op;
                    }
                }
            }

            if (bestOpportunityFoundForExecution) {
                currentSelectedOpportunityForExecution = bestOpportunityFoundForExecution;
                safeLog('log', `[BOT_LOOP] ‚úÖ Bot ƒë√£ ch·ªçn c∆° h·ªôi: ${currentSelectedOpportunityForExecution.coin} tr√™n ${currentSelectedOpportunityForExecution.exchanges} ƒë·ªÉ TH·ª∞C HI·ªÜN.`);
                safeLog('log', `  Th√¥ng tin chi ti·∫øt: PnL ∆∞·ªõc t√≠nh: ${currentSelectedOpportunityForExecution.estimatedPnl.toFixed(2)}%, Funding trong: ${currentSelectedOpportunityForExecution.details.minutesUntilFunding.toFixed(1)} ph√∫t.`);
                safeLog('log', `  S√†n Short: ${currentSelectedOpportunityForExecution.details.shortExchange}, S√†n Long: ${currentSelectedOpportunityForExecution.details.longExchange}`);
                
                // C·∫≠p nh·∫≠t hi·ªÉn th·ªã v·ªën d·ª± ki·∫øn theo c√°ch t√≠nh m·ªõi
                const shortExId = currentSelectedOpportunityForExecution.exchanges.split(' / ')[0].toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.exchanges.split(' / ')[0].toLowerCase();
                const longExId = currentSelectedOpportunityForExecution.exchanges.split(' / ')[1].toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.exchanges.split(' / ')[1].toLowerCase();
                const minAvailableBalanceForDisplay = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
                bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalanceForDisplay * (currentPercentageToUse / 100)).toFixed(2);
                safeLog('log', `  V·ªën d·ª± ki·∫øn: ${bestPotentialOpportunityForDisplay.estimatedTradeCollateral} USDT`);

                // <<-- ƒê√É LO·∫†I B·ªé LOGIC V√Ä TR·∫†NG TH√ÅI CHUY·ªÇN TI·ªÄN ·ªû ƒê√ÇY -->>
                safeLog('log', '[BOT_LOOP] B·ªè qua b∆∞·ªõc chuy·ªÉn ti·ªÅn. Ti·ªÅn ph·∫£i c√≥ s·∫µn tr√™n c√°c s√†n.');
                // K·∫ø ti·∫øp l√† s·∫Ω ch·ªù ƒë·∫øn th·ªùi ƒëi·ªÉm m·ªü l·ªánh (ph√∫t 59)

            } else {
                safeLog('log', `[BOT_LOOP] üîç Kh√¥ng t√¨m th·∫•y c∆° h·ªôi n√†o ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}.`);
                currentSelectedOpportunityForExecution = null;
            }
        }
    }

    if (currentMinute === 59 && currentSecond >= 55 && currentSecond < 59 && botState === 'RUNNING' && currentSelectedOpportunityForExecution && !currentTradeDetails) {
        if (LAST_ACTION_TIMESTAMP.tradeExecution !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.tradeExecution = minuteAligned;

            safeLog('log', `[BOT_LOOP] ‚ö° K√≠ch ho·∫°t m·ªü l·ªánh cho c∆° h·ªôi ${currentSelectedOpportunityForExecution.coin} v√†o ph√∫t 59:55.`);
            botState = 'EXECUTING_TRADES'; // V·∫´n gi·ªØ tr·∫°ng th√°i n√†y ƒë·ªÉ UI c·∫≠p nh·∫≠t v√† theo d√µi
            const tradeSuccess = await executeTrades(currentSelectedOpportunityForExecution, currentPercentageToUse);
            if (tradeSuccess) {
                safeLog('log', '[BOT_LOOP] ‚úÖ M·ªü l·ªánh ho√†n t·∫•t.');
            } else {
                safeLog('error', '[BOT_LOOP] ‚ùå L·ªói m·ªü l·ªánh. H·ªßy chu k·ª≥ n√†y.');
                currentSelectedOpportunityForExecution = null;
                currentTradeDetails = null;
            }
            botState = 'RUNNING'; // Tr·∫£ v·ªÅ RUNNING sau khi th·ª±c hi·ªán xong
        }
    }

    // THIS IS THE MODIFIED BLOCK: Now uses Promise chain directly.
    if (currentMinute === 0 && currentSecond >= 5 && currentSecond < 10 && botState === 'RUNNING' && currentTradeDetails?.status === 'OPEN') {
        if (LAST_ACTION_TIMESTAMP.closeTrade !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.closeTrade = minuteAligned;

            safeLog('log', '[BOT_LOOP] üõë K√≠ch ho·∫°t ƒë√≥ng l·ªánh v√† t√≠nh PnL v√†o ph√∫t 00:05.');
            botState = 'CLOSING_TRADES'; // V·∫´n gi·ªØ tr·∫°ng th√°i n√†y ƒë·ªÉ UI c·∫≠p nh·∫≠t v√† theo d√µi
            
            // Calling closeTradesAndCalculatePnL and handling its Promise directly
            closeTradesAndCalculatePnL()
                .then(() => {
                    safeLog('log', '[BOT_LOOP] ‚úÖ ƒê√≥ng l·ªánh v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then).');
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_LOOP] ‚ùå L·ªói khi ƒë√≥ng l·ªánh v√† t√≠nh PnL (qua Promise.catch): ${errorInClose.message}`, errorInClose);
                })
                .finally(() => {
                    botState = 'RUNNING'; // Tr·∫£ v·ªÅ RUNNING sau khi th·ª±c hi·ªán xong, b·∫•t k·ªÉ th√†nh c√¥ng hay th·∫•t b·∫°i
                });
        }
    }

    // L·∫∑p l·∫°i v√≤ng l·∫∑p sau 1 gi√¢y
    botLoopIntervalId = setTimeout(() => { mainBotLoop(); }, 1000); 
}

function startBot() {
    if (botState === 'STOPPED') {
        safeLog('log', '[BOT] ‚ñ∂Ô∏è Kh·ªüi ƒë·ªông Bot...');
        botState = 'RUNNING';

        updateBalances().then(() => {
            safeLog('log', '[BOT] ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ ban ƒë·∫ßu. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot.');
            mainBotLoop();
        }).catch(err => {
            safeLog('error', `[BOT] L·ªói khi kh·ªüi t·∫°o s·ªë d∆∞ ban ƒë·∫ßu: ${err.message}`, err);
            botState = 'STOPPED';
        });
        return true;
    }
    safeLog('warn', '[BOT] Bot ƒë√£ ch·∫°y ho·∫∑c ƒëang trong qu√° tr√¨nh chuy·ªÉn tr·∫°ng th√°i.');
    return false;
}

function stopBot() {
    // ƒêi·ªÅu ch·ªânh tr·∫°ng th√°i c√≥ th·ªÉ d·ª´ng ƒë·ªÉ ph√π h·ª£p v·ªõi vi·ªác lo·∫°i b·ªè c√°c b∆∞·ªõc chuy·ªÉn ti·ªÅn
    if (botState === 'RUNNING' || botState === 'FETCHING_DATA' || botState === 'PROCESSING_DATA' || botState === 'EXECUTING_TRADES' || botState === 'CLOSING_TRADES') {
        safeLog('log', '[BOT] ‚è∏Ô∏è D·ª´ng Bot...');
        if (botLoopIntervalId) {
            clearTimeout(botLoopIntervalId);
            botLoopIntervalId = null;
        }
        botState = 'STOPPED';
        safeLog('log', '[BOT] Bot ƒë√£ d·ª´ng th√†nh c√¥ng.');
        return true;
    }
    safeLog('warn', '[BOT] Bot kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng th·ªÉ d·ª´ng.');
    return false;
}

const botServer = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        fs.readFile(path.join(__dirname, 'index.html'), (err, content) => {
            if (err) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói khi ƒë·ªçc index.html:', err.message, err);
                res.writeHead(500);
                res.end('L·ªói khi ƒë·ªçc index.html');
                return;
            }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/bot-api/status' && req.method === 'GET') {
        let displayCurrentTradeDetails = null;
        try {
            if (currentTradeDetails && typeof currentTradeDetails === 'object' && currentTradeDetails.status === 'OPEN') {
                displayCurrentTradeDetails = currentTradeDetails;
            } else {
                displayCurrentTradeDetails = null;
            }
        } catch (e) {
            safeLog('error', `[BOT_SERVER] CRITICAL EXCEPTION accessing currentTradeDetails for status API: ${e.message}. Setting to null.`, e);
            displayCurrentTradeDetails = null;
        }

        const statusData = {
            botState: botState,
            balances: Object.fromEntries(Object.entries(balances).filter(([id]) => activeExchangeIds.includes(id) || id === 'totalOverall')),
            initialTotalBalance: initialTotalBalance,
            cumulativePnl: cumulativePnl,
            tradeHistory: tradeHistory,
            currentSelectedOpportunity: bestPotentialOpportunityForDisplay,
            currentTradeDetails: displayCurrentTradeDetails
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(statusData));
    } else if (req.url === '/bot-api/start' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', () => {
            try {
                const data = body ? JSON.parse(body) : {};
                currentPercentageToUse = parseFloat(data.percentageToUse);
                if (isNaN(currentPercentageToUse) || currentPercentageToUse < 1 || currentPercentageToUse > 100) {
                    currentPercentageToUse = 50;
                    safeLog('warn', `Gi√° tr·ªã ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá t·ª´ UI, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: ${currentPercentageToUse}%`);
                }

                const started = startBot();
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: started, message: started ? 'Bot ƒë√£ kh·ªüi ƒë·ªông.' : 'Bot ƒë√£ ch·∫°y.' }));
            } catch (error) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/start:', error.message, error);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server.' }));
            }
        });
    } else if (req.url === '/bot-api/stop' && req.method === 'POST') {
        const stopped = stopBot();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: stopped, message: stopped ? 'Bot ƒë√£ d·ª´ng.' : 'Bot kh√¥ng ho·∫°t ƒë·ªông.' }));
    } else if (req.url === '/bot-api/test-trade' && req.method === 'POST') { // TEST TRADE ENDPOINT
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', async () => { // Make this async to use await
            try {
                const data = body ? JSON.parse(body) : {};
                const testPercentageToUse = parseFloat(data.percentageToUse);

                if (isNaN(testPercentageToUse) || testPercentageToUse < 1 || testPercentageToUse > 100) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá (1-100).' }));
                    return;
                }

                // Ensure serverDataGlobal is available before trying to use opportunities
                if (!serverDataGlobal || !serverDataGlobal.arbitrageData || serverDataGlobal.arbitrageData.length === 0) {
                    // Attempt to fetch data if not available or stale for test purposes
                    const fetchedDataForTest = await fetchDataFromServer();
                    if (fetchedDataForTest) {
                        serverDataGlobal = fetchedDataForTest;
                        safeLog('log', '[BOT_SERVER] ƒê√£ fetch l·∫°i d·ªØ li·ªáu server cho l·ªánh test.');
                    } else {
                         res.writeHead(500, { 'Content-Type': 'application/json' });
                         res.end(JSON.stringify({ success: false, message: 'Kh√¥ng th·ªÉ fetch d·ªØ li·ªáu server cho l·ªánh test.' }));
                         return;
                    }
                }

                let testOpportunity = null;
                // Prefer the best opportunity currently displayed/calculated for display
                if (bestPotentialOpportunityForDisplay) {
                    testOpportunity = { ...bestPotentialOpportunityForDisplay }; // Clone to avoid direct mutation
                    // Ensure 'details' object is present for safety, as executeTrades expects it
                    if (!testOpportunity.details) {
                        testOpportunity.details = {};
                    }
                    // For test, ensure shortExchange and longExchange are set from the 'exchanges' string if 'details' is minimal
                    if (!testOpportunity.details.shortExchange && testOpportunity.exchanges) {
                        const exParts = testOpportunity.exchanges.split(' / ');
                        if (exParts.length === 2) {
                            testOpportunity.details.shortExchange = exParts[0];
                            testOpportunity.details.longExchange = exParts[1];
                        }
                    }
                } else if (allCurrentOpportunities.length > 0) {
                    // Fallback: If bestPotentialOpportunityForDisplay is null, find the one with highest PnL from all current
                    testOpportunity = allCurrentOpportunities.reduce((best, current) => {
                        return (best === null || current.estimatedPnl > best.estimatedPnl) ? current : best;
                    }, null);
                }

                if (!testOpportunity) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Kh√¥ng t√¨m th·∫•y c∆° h·ªôi arbitrage n√†o ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ test. Vui l√≤ng ƒë·∫£m b·∫£o c√≥ c∆° h·ªôi ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI.' }));
                    return;
                }

                // IMPORTANT: Before executing a test trade, ensure no other trade is currently being tracked.
                if (currentTradeDetails && currentTradeDetails.status === 'OPEN') {
                    safeLog('warn', '[BOT_SERVER] ƒê√£ c√≥ l·ªánh ƒëang m·ªü. Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh test khi c√≥ l·ªánh ƒëang ƒë∆∞·ª£c theo d√µi.');
                    res.writeHead(409, { 'Content-Type': 'application/json' }); // 409 Conflict
                    res.end(JSON.stringify({ success: false, message: 'ƒê√£ c√≥ l·ªánh ƒëang m·ªü. Vui l√≤ng ƒë√≥ng l·ªánh hi·ªán t·∫°i tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh test.' }));
                    return;
                }


                safeLog('log', `[BOT_SERVER] ‚ö° Y√™u c·∫ßu TEST M·ªû L·ªÜNH: ${testOpportunity.coin} tr√™n ${testOpportunity.exchanges} v·ªõi ${testPercentageToUse}% v·ªën.`);
                safeLog('log', '[BOT_SERVER] Th√¥ng tin c∆° h·ªôi Test:', testOpportunity);

                // Temporarily set currentSelectedOpportunityForExecution for executeTrades function
                // This is used by closeTradesAndCalculatePnL for metadata in trade history.
                // It's crucial to restore this later to avoid interfering with the main bot loop's selection.
                const originalCurrentSelectedOpportunityForExecution = currentSelectedOpportunityForExecution;
                currentSelectedOpportunityForExecution = testOpportunity; 

                const tradeSuccess = await executeTrades(testOpportunity, testPercentageToUse);

                // Restore previous currentSelectedOpportunityForExecution after test
                currentSelectedOpportunityForExecution = originalCurrentSelectedOpportunityForExecution;

                if (tradeSuccess) {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'L·ªánh TEST ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!' }));
                } else {
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªánh TEST. Vui l√≤ng ki·ªÉm tra log bot.' }));
                }

            } catch (error) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/test-trade:', error.message, error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'L·ªói server khi th·ª±c hi·ªán l·ªánh test.' }));
            }
        });
    } else if (req.url === '/bot-api/stop-test-trade' && req.method === 'POST') { // NEW: STOP TEST TRADE ENDPOINT
        try {
            if (!currentTradeDetails || currentTradeDetails.status !== 'OPEN') {
                safeLog('log', '[BOT_SERVER] Y√™u c·∫ßu d·ª´ng l·ªánh test nh∆∞ng kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.');
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.' }));
                return;
            }

            safeLog('log', '[BOT_SERVER] üõë Y√™u c·∫ßu D·ª™NG L·ªÜNH ƒêANG M·ªû (c√≥ th·ªÉ l√† l·ªánh test ho·∫∑c l·ªánh t·ª± ƒë·ªông).');
            // Calling closeTradesAndCalculatePnL and handling its Promise directly
            closeTradesAndCalculatePnL()
                .then(() => {
                    safeLog('log', '[BOT_SERVER] ‚úÖ ƒê√≥ng l·ªánh v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then trong API stop-test-trade).');
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'ƒê√£ g·ª≠i l·ªánh ƒë√≥ng v·ªã th·∫ø th√†nh c√¥ng.' }));
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_SERVER] ‚ùå L·ªói khi ƒë√≥ng l·ªánh v√† t√≠nh PnL (qua Promise.catch trong API stop-test-trade): ${errorInClose.message}`, errorInClose);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh.' }));
                });

        } catch (error) {
            safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/stop-test-trade:', error.message, error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh.' }));
        }
    }
    // <<-- LO·∫†I B·ªé TO√ÄN B·ªò else if (req.url === '/bot-api/transfer-funds' && req.method === 'POST') ·ªû ƒê√ÇY -->>
    else {
        res.writeHead(404); res.end('Not Found');
    }
});

botServer.listen(BOT_PORT, () => {
    safeLog('log', `‚úÖ M√°y ch·ªß UI c·ªßa Bot ƒëang ch·∫°y t·∫°i http://localhost:${BOT_PORT}`);
    safeLog('log', 'Bot ƒëang ch·ªù l·ªánh "Start" t·ª´ giao di·ªán HTML.');
});
