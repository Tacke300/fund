const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');
const { URLSearchParams } = require('url');

const safeLog = (type, ...args) => {
    try {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const timestamp = `${hours}:${minutes}`;
        if (typeof console === 'object' && typeof console[type] === 'function') {
            console[type](`[${timestamp} ${type.toUpperCase()}]`, ...args);
        } else {
            const message = `[${timestamp} ${type.toUpperCase()}] ${args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg).join(' ')}\n`;
            if (type === 'error' || type === 'warn') {
                process.stderr.write(message);
            } else {
                process.stdout.write(message);
            }
        }
    } catch (e) {
        process.stderr.write(`FATAL LOG ERROR (safeLog itself failed): ${e.message} - Original log: [${type.toUpperCase()}] ${args.join(' ')}\n`);
    }
};

const {
    binanceApiKey, binanceApiSecret,
    bingxApiKey, bingxApiSecret,
    okxApiKey, okxApiSecret, okxPassword,
    bitgetApiKey, bitgetApiSecret, bitgetApiPassword
} = require('../config.js');

const BOT_PORT = 5008;
const SERVER_DATA_URL = 'http://localhost:5005/api/data';

const MIN_PNL_PERCENTAGE = 1;
const MAX_MINUTES_UNTIL_FUNDING = 30;

const DATA_FETCH_INTERVAL_SECONDS = 5;
const HOURLY_FETCH_TIME_MINUTE = 45; // H·∫±ng s·ªë n√†y kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng tr·ª±c ti·∫øp trong logic v√≤ng l·∫∑p ch√≠nh.

const SL_PERCENT_OF_COLLATERAL = 700;
const TP_PERCENT_OF_COLLATERAL = 700;

const DISABLED_EXCHANGES = ['bitget'];

const ALL_POSSIBLE_EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];

const activeExchangeIds = ALL_POSSIBLE_EXCHANGE_IDS.filter(id => !DISABLED_EXCHANGES.includes(id));

let botState = 'STOPPED';
let botLoopIntervalId = null;

const exchanges = {};
activeExchangeIds.forEach(id => {
    const exchangeClass = ccxt[id];
    const config = {
        'options': { 'defaultType': 'swap' },
        'enableRateLimit': true,
        'headers': {
            'User-Agent': 'Mozilla/5.0 (compatible; ccxt/1.0;)',
        }
    };

    if (id === 'binanceusdm') { config.apiKey = binanceApiKey; config.secret = binanceApiSecret; }
    else if (id === 'bingx') { config.apiKey = bingxApiKey; config.secret = bingxApiSecret; }
    else if (id === 'okx') { config.apiKey = okxApiKey; config.secret = okxApiSecret; if(okxPassword) config.password = okxPassword; }
    else if (id === 'bitget') { config.apiKey = bitgetApiKey; config.secret = bitgetApiSecret; if(bitgetApiPassword) config.password = bitgetApiPassword; }

    if ((config.apiKey && config.secret) || (id === 'okx' && config.password) || (id === 'bitget' && config.password && config.apiKey && config.secret)) {
        exchanges[id] = new exchangeClass(config);
    } else {
        safeLog('warn', `[INIT] B·ªè qua kh·ªüi t·∫°o ${id.toUpperCase()} v√¨ thi·∫øu API Key/Secret/Password ho·∫∑c kh√¥ng h·ª£p l·ªá.`);
    }
});

let balances = {};
activeExchangeIds.forEach(id => {
    balances[id] = { total: 0, available: 0, originalSymbol: {} };
});
balances.totalOverall = 0;

let initialTotalBalance = 0;
let cumulativePnl = 0;
let tradeHistory = [];

let currentSelectedOpportunityForExecution = null; // C∆° h·ªôi ƒë∆∞·ª£c bot t·ª± ƒë·ªông ch·ªçn ƒë·ªÉ th·ª±c thi
let bestPotentialOpportunityForDisplay = null; // ƒê√¢y l√† c∆° h·ªôi t·ªët nh·∫•t ƒë∆∞·ª£c server t√≠nh to√°n v√† hi·ªÉn th·ªã (cho UI)
let allCurrentOpportunities = []; // T·∫•t c·∫£ c∆° h·ªôi t·ª´ server

const LAST_ACTION_TIMESTAMP = {
    dataFetch: 0,
    selectionTime: 0,
    tradeExecution: 0,
    closeTrade: 0,
};

let currentTradeDetails = null; // Chi ti·∫øt v·ªÅ l·ªánh t·ª± ƒë·ªông ƒëang m·ªü
let testTradeDetails = null; // Chi ti·∫øt v·ªÅ l·ªánh test ƒëang m·ªü

let currentPercentageToUse = 50;

function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

async function fetchDataFromServer() {
    try {
        const response = await fetch(SERVER_DATA_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: ${error.message}`, error);
        return null;
    }
}

async function updateBalances() {
    safeLog('log', '[BOT] üîÑ C·∫≠p nh·∫≠t s·ªë d∆∞ t·ª´ c√°c s√†n...');
    let currentTotalOverall = 0;
    for (const id of activeExchangeIds) {
        if (!exchanges[id]) {
            safeLog('warn', `[BOT] ${id.toUpperCase()} kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o (c√≥ th·ªÉ do thi·∫øu API Key/Secret). B·ªè qua c·∫≠p nh·∫≠t s·ªë d∆∞.`);
            continue;
        }
        try {
            const exchange = exchanges[id];
            await exchange.loadMarkets(true);

            // Fetch futures balance for trading
            const accountBalance = await exchange.fetchBalance({ 'type': 'future' });
            const usdtFreeBalance = accountBalance.free?.USDT || 0;
            const usdtTotalBalance = accountBalance.total?.USDT || 0;

            balances[id].available = usdtFreeBalance;
            balances[id].total = usdtTotalBalance;

            balances[id].originalSymbol = {};

            currentTotalOverall += balances[id].available;

            safeLog('log', `[BOT] ‚úÖ ${id.toUpperCase()} Balance: Total ${usdtTotalBalance.toFixed(2)} USDT, Available ${balances[id].available.toFixed(2)} USDT.`);
        } catch (e) {
            safeLog('error', `[BOT] ‚ùå L·ªói khi l·∫•y s·ªë d∆∞ ${id.toUpperCase()}: ${e.message}`, e);
        }
    }
    balances.totalOverall = currentTotalOverall;
    safeLog('log', `[BOT] T·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng tr√™n t·∫•t c·∫£ c√°c s√†n (c√≥ th·ªÉ bao g·ªìm √¢m): ${currentTotalOverall.toFixed(2)} USDT.`);
    if (initialTotalBalance === 0) {
        initialTotalBalance = currentTotalOverall;
    }
}

async function processServerData(serverData) {
    if (!serverData || !serverData.arbitrageData) {
        safeLog('warn', '[BOT] D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu arbitrageData.');
        bestPotentialOpportunityForDisplay = null;
        allCurrentOpportunities = [];
        return;
    }

    const now = Date.now();
    let bestForDisplay = null;
    const tempAllOpportunities = [];

    serverData.arbitrageData.forEach(op => {
        const minutesUntilFunding = (op.nextFundingTime - now) / (1000 * 60);

        // Normalize exchange IDs to match ccxt and local names ('binance' -> 'binanceusdm')
        const shortExIdNormalized = op.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.shortExchange.toLowerCase();
        const longExIdNormalized = op.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : op.details.longExchange.toLowerCase(); // S·ª¨A L·ªñI ·ªû ƒê√ÇY

        if (DISABLED_EXCHANGES.includes(shortExIdNormalized) || DISABLED_EXCHANGES.includes(longExIdNormalized) ||
            !exchanges[shortExIdNormalized] || !exchanges[longExIdNormalized]) {
            return; // Skip if exchange is disabled or not initialized
        }

        if (op.estimatedPnl > 0 && minutesUntilFunding > 0) {
            op.details.minutesUntilFunding = minutesUntilFunding;

            // Ensure these properties exist, or set to N/A
            op.details.shortFundingRate = op.details.shortRate !== undefined ? op.details.shortRate : 'N/A';
            op.details.longFundingRate = op.details.longRate !== undefined ? op.details.longRate : 'N/A';
            op.fundingDiff = op.fundingDiff !== undefined ? op.fundingDiff : 'N/A';
            op.commonLeverage = op.commonLeverage !== undefined ? op.commonLeverage : 'N/A';

            // Re-assign short/long exchange IDs based on rates if they were swapped by server
            let shortExId = op.details.shortExchange;
            let longExId = op.details.longExchange;

            if (typeof op.details.shortFundingRate === 'number' && typeof op.details.longFundingRate === 'number') {
                if (op.details.shortFundingRate < op.details.longFundingRate) {
                    // This means original short was actually long and vice versa
                    shortExId = op.details.longExchange;
                    longExId = op.details.shortExchange;
                }
            }
            op.details.shortExchange = shortExId;
            op.details.longExchange = longExId;

            tempAllOpportunities.push(op);

            // C·∫≠p nh·∫≠t: Ch·ªçn c∆° h·ªôi t·ªët nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã (∆∞u ti√™n th·ªùi gian funding g·∫ßn nh·∫•t, sau ƒë√≥ PnL cao nh·∫•t)
            if (!bestForDisplay ||
                op.details.minutesUntilFunding < bestForDisplay.details.minutesUntilFunding || // ∆Øu ti√™n funding g·∫ßn h∆°n
                (op.details.minutesUntilFunding === bestForDisplay.details.minutesUntilFunding && op.estimatedPnl > bestForDisplay.estimatedPnl) // N·∫øu funding nh∆∞ nhau, ∆∞u ti√™n PnL cao h∆°n
            ) {
                bestForDisplay = op;
            }
        }
    });

    allCurrentOpportunities = tempAllOpportunities;

    if (bestForDisplay) {
        bestPotentialOpportunityForDisplay = bestForDisplay;
        // Update estimated trade collateral for display
        const shortExId = bestForDisplay.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.details.shortExchange.toLowerCase();
        const longExId = bestForDisplay.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : bestForDisplay.details.longExchange.toLowerCase(); // S·ª¨A L·ªñI ·ªû ƒê√ÇY
        const minAvailableBalance = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
        bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalance * (currentPercentageToUse / 100)).toFixed(2);
    } else {
        bestPotentialOpportunityForDisplay = null;
    }
}


// Modified executeTrades to handle both auto and test trades
async function executeTrades(opportunity, percentageToUse, isTest = false) {
    const tradeType = isTest ? 'TEST_TRADE' : 'AUTO_TRADE';

    if (!opportunity || percentageToUse <= 0) {
        safeLog('warn', `[BOT_${tradeType}] Kh√¥ng c√≥ c∆° h·ªôi ho·∫∑c ph·∫ßn trƒÉm s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá.`);
        return false;
    }

    if (!opportunity.details || !opportunity.details.shortExchange || !opportunity.details.longExchange ||
        !opportunity.details.shortOriginalSymbol || !opportunity.details.longOriginalSymbol) {
        safeLog('error', `[BOT_${tradeType}] Th√¥ng tin chi ti·∫øt c∆° h·ªôi thi·∫øu tr∆∞·ªùng c·∫ßn thi·∫øt (exchange ID ho·∫∑c original symbol). H·ªßy b·ªè l·ªánh.`);
        return false;
    }

    // Check if an existing trade of the same type is already open
    if (isTest && testTradeDetails && testTradeDetails.status === 'OPEN') {
        safeLog('warn', `[BOT_${tradeType}] ƒê√£ c√≥ l·ªánh TEST ƒëang m·ªü. Kh√¥ng th·ªÉ m·ªü th√™m l·ªánh TEST m·ªõi.`);
        return false;
    }
    if (!isTest && currentTradeDetails && currentTradeDetails.status === 'OPEN') {
        safeLog('warn', `[BOT_${tradeType}] ƒê√£ c√≥ l·ªánh AUTO ƒëang m·ªü. Kh√¥ng th·ªÉ m·ªü th√™m l·ªánh AUTO m·ªõi.`);
        return false;
    }

    const shortExchangeId = opportunity.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.shortExchange.toLowerCase();
    const longExchangeId = opportunity.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : opportunity.details.longExchange.toLowerCase();

    if (DISABLED_EXCHANGES.includes(shortExchangeId) || DISABLED_EXCHANGES.includes(longExchangeId) ||
        !exchanges[shortExchangeId] || !exchanges[longExchangeId]) {
        safeLog('error', `[BOT_${tradeType}] B·ªè qua th·ª±c hi·ªán l·ªánh v√¨ s√†n ${shortExchangeId} ho·∫∑c ${longExchangeId} b·ªã t·∫Øt ho·∫∑c ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.`);
        return false;
    }

    const cleanedCoin = opportunity.coin;
    const shortOriginalSymbol = opportunity.details.shortOriginalSymbol;
    const longOriginalSymbol = opportunity.details.longOriginalSymbol;

    const shortExchange = exchanges[shortExchangeId];
    const longExchange = exchanges[longExchangeId];

    const minAvailableBalance = Math.min(balances[shortExchangeId]?.available || 0, balances[longExchangeId]?.available || 0);
    const baseCollateralPerSide = minAvailableBalance * (percentageToUse / 100);

    const shortCollateral = baseCollateralPerSide;
    const longCollateral = baseCollateralPerSide; // Assume same collateral for both sides

    if (shortCollateral <= 0 || longCollateral <= 0) {
        safeLog('error', `[BOT_${tradeType}] S·ªë ti·ªÅn m·ªü l·ªánh (collateral) kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.`);
        return false;
    }
    if (balances[shortExchangeId]?.available < shortCollateral || balances[longExchangeId]?.available < longCollateral) {
        safeLog('error', `[BOT_${tradeType}] S·ªë d∆∞ kh·∫£ d·ª•ng kh√¥ng ƒë·ªß ƒë·ªÉ m·ªü l·ªánh v·ªõi v·ªën ${baseCollateralPerSide.toFixed(2)} USDT m·ªói b√™n. ${shortExchangeId}: ${balances[shortExchangeId]?.available.toFixed(2)}, ${longExchangeId}: ${balances[longExchangeId]?.available.toFixed(2)}. H·ªßy b·ªè l·ªánh.`);
        return false;
    }

    safeLog('log', `[BOT_${tradeType}] Chu·∫©n b·ªã m·ªü l·ªánh cho ${cleanedCoin}:`);
    safeLog('log', `  SHORT ${shortExchangeId} (${shortOriginalSymbol}): ${shortCollateral.toFixed(2)} USDT collateral`);
    safeLog('log', `  LONG ${longExchangeId} (${longOriginalSymbol}): ${longCollateral.toFixed(2)} USDT collateral`);

    let tradeSuccess = true;
    let shortOrder = null, longOrder = null;

    let shortMarket = null;
    let longMarket = null;

    try {
        await shortExchange.loadMarkets(true);
        await longExchange.loadMarkets(true);

        shortMarket = shortExchange.market(shortOriginalSymbol);
        longMarket = longExchange.market(longOriginalSymbol);

        const tickerShort = await shortExchange.fetchTicker(shortOriginalSymbol);
        const tickerLong = await longExchange.fetchTicker(longOriginalSymbol);

        const shortEntryPrice = tickerShort.last;
        const longEntryPrice = tickerLong.last;

        if (!shortEntryPrice || !longEntryPrice) {
            safeLog('error', `[BOT_${tradeType}] Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i cho ${cleanedCoin}.`);
            return false;
        }

        const commonLeverage = opportunity.commonLeverage || 1;

        try {
            if (!shortMarket) {
                safeLog('warn', `‚ö†Ô∏è Market cho symbol ${shortOriginalSymbol} kh√¥ng t√¨m th·∫•y tr√™n ${shortExchangeId}. B·ªè qua ƒë·∫∑t ƒë√≤n b·∫©y cho b√™n SHORT.`);
            } else if (shortExchange.has['setLeverage']) {
                const leverageParams = (shortExchangeId === 'bingx') ? { 'side': 'SHORT' } : {};
                await shortExchange.setLeverage(commonLeverage, shortMarket.symbol, leverageParams);
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t ƒë√≤n b·∫©y x${commonLeverage} cho SHORT ${shortOriginalSymbol} tr√™n ${shortExchangeId}.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è S√†n ${shortExchangeId} kh√¥ng h·ªó tr·ª£ ch·ª©c nƒÉng setLeverage.`);
            }
        } catch (levErr) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t ƒë√≤n b·∫©y cho SHORT ${shortOriginalSymbol} tr√™n ${shortExchangeId}: ${levErr.message}. Ti·∫øp t·ª•c m√† kh√¥ng ƒë·∫£m b·∫£o ƒë√≤n b·∫©y.`, levErr);
        }

        try {
            if (!longMarket) {
                safeLog('warn', `‚ö†Ô∏è Market cho symbol ${longOriginalSymbol} kh√¥ng t√¨m th·∫•y tr√™n ${longExchangeId}. B·ªè qua ƒë·∫∑t ƒë√≤n b·∫©y cho b√™n LONG.`);
            } else if (longExchange.has['setLeverage']) {
                const leverageParams = (longExchangeId === 'bingx') ? { 'side': 'LONG' } : {};
                await longExchange.setLeverage(commonLeverage, longMarket.symbol, leverageParams);
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t ƒë√≤n b·∫©y x${commonLeverage} cho LONG ${longOriginalSymbol} tr√™n ${longExchangeId}.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è S√†n ${longExchangeId} kh√¥ng h·ªó tr·ª£ ch·ª©c nƒÉng setLeverage.`);
            }
        } catch (levErr) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t ƒë√≤n b·∫©y cho LONG ${longOriginalSymbol} tr√™n ${longExchangeId}: ${levErr.message}. Ti·∫øp t·ª•c m√† kh√¥ng ƒë·∫£m b·∫£o ƒë√≤n b·∫©y.`, levErr);
        }

        const shortAmount = (shortCollateral * commonLeverage) / shortEntryPrice;
        const longAmount = (longCollateral * commonLeverage) / longEntryPrice;

        if (shortAmount <= 0 || longAmount <= 0) {
            safeLog('error', `[BOT_${tradeType}] L∆∞·ª£ng h·ª£p ƒë·ªìng t√≠nh to√°n kh√¥ng h·ª£p l·ªá (c·∫ßn d∆∞∆°ng). H·ªßy b·ªè l·ªánh.`);
            return false;
        }

        if (!shortMarket || !longMarket) {
            safeLog('error', `[BOT_${tradeType}] Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªã tr∆∞·ªùng cho ${shortOriginalSymbol} ho·∫∑c ${longOriginalSymbol} sau khi loadMarkets.`);
            return false;
        }

        const shortAmountToOrder = shortExchange.amountToPrecision(shortOriginalSymbol, shortAmount);
        const longAmountToOrder = longExchange.amountToPrecision(longOriginalSymbol, longAmount);

        const shortParams = {};
        if (shortExchangeId === 'bingx') {
            shortParams.positionSide = 'SHORT';
        } else if (shortExchangeId === 'binanceusdm') {
            shortParams.positionSide = 'SHORT';
        }

        const longParams = {};
        if (longExchangeId === 'bingx') {
            longParams.positionSide = 'LONG';
        } else if (longExchangeId === 'binanceusdm') {
            longParams.positionSide = 'LONG';
        }

        safeLog('log', `[BOT_${tradeType}] M·ªü SHORT ${shortAmountToOrder} ${shortOriginalSymbol} tr√™n ${shortExchangeId} v·ªõi gi√° ${shortEntryPrice.toFixed(4)}...`);
        shortOrder = await shortExchange.createMarketSellOrder(shortOriginalSymbol, parseFloat(shortAmountToOrder), shortParams);
        safeLog('log', `[BOT_${tradeType}] ‚úÖ L·ªánh SHORT ${shortExchangeId} kh·ªõp: ID ${shortOrder.id}, Amount ${shortOrder.amount}, Price ${shortOrder.price}`);

        safeLog('log', `[BOT_${tradeType}] M·ªü LONG ${longAmountToOrder} ${longOriginalSymbol} tr√™n ${longExchangeId} v·ªõi gi√° ${longEntryPrice.toFixed(4)}...`);
        longOrder = await longExchange.createMarketBuyOrder(longOriginalSymbol, parseFloat(longAmountToOrder), longParams);
        safeLog('log', `[BOT_${tradeType}] ‚úÖ L·ªánh LONG ${longExchangeId} kh·ªõp: ID ${longOrder.id}, Amount ${longOrder.amount}, Price ${longOrder.price}`);

        const tradeInfo = {
            coin: cleanedCoin,
            shortExchange: shortExchangeId,
            longExchange: longExchangeId,
            shortOriginalSymbol: shortOriginalSymbol,
            longOriginalSymbol: longOriginalSymbol,
            shortOrderId: shortOrder.id,
            longOrderId: longOrder.id,
            shortOrderAmount: shortOrder.amount,
            longOrderAmount: longOrder.amount,
            shortEntryPrice: shortEntryPrice,
            longEntryPrice: longEntryPrice,
            shortCollateral: shortCollateral,
            longCollateral: longCollateral,
            commonLeverage: commonLeverage,
            status: 'OPEN',
            openTime: Date.now(),
            type: isTest ? 'test' : 'auto' // Added type field
        };

        if (isTest) {
            safeLog('log', `[BOT_${tradeType}] Setting testTradeDetails for ${cleanedCoin} on ${shortExchangeId}/${longExchangeId}`);
            testTradeDetails = tradeInfo;
        } else {
            safeLog('log', `[BOT_${tradeType}] Setting currentTradeDetails for ${cleanedCoin} on ${shortExchangeId}/${longExchangeId}`);
            currentTradeDetails = tradeInfo;
        }
        safeLog('log', `[BOT_${tradeType}] Trade details set successfully.`);

        safeLog('log', `[BOT_${tradeType}] ƒê·ª£i 2 gi√¢y ƒë·ªÉ g·ª≠i l·ªánh TP/SL...`);
        await sleep(2000);

        const shortTpPrice = shortEntryPrice * (1 - (TP_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));
        const shortSlPrice = shortEntryPrice * (1 + (SL_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));

        const longTpPrice = longEntryPrice * (1 + (TP_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));
        const longSlPrice = longEntryPrice * (1 - (SL_PERCENT_OF_COLLATERAL / (commonLeverage * 100)));

        const shortTpPriceToOrder = shortExchange.priceToPrecision(shortOriginalSymbol, shortTpPrice);
        const shortSlPriceToOrder = shortExchange.priceToPrecision(shortOriginalSymbol, shortSlPrice);
        const longTpPriceToOrder = longExchange.priceToPrecision(longOriginalSymbol, longTpPrice);
        const longSlPriceToOrder = longExchange.priceToPrecision(longOriginalSymbol, longSlPrice);

        if (isTest) {
            testTradeDetails.shortSlPrice = parseFloat(shortSlPriceToOrder);
            testTradeDetails.shortTpPrice = parseFloat(shortTpPriceToOrder);
            testTradeDetails.longSlPrice = parseFloat(longSlPriceToOrder);
            testTradeDetails.longTpPrice = parseFloat(longTpPriceToOrder);
        } else {
            currentTradeDetails.shortSlPrice = parseFloat(shortSlPriceToOrder);
            currentTradeDetails.shortTpPrice = parseFloat(shortTpPriceToOrder);
            currentTradeDetails.longSlPrice = parseFloat(longSlPriceToOrder);
            currentTradeDetails.longTpPrice = parseFloat(longTpPriceToOrder);
        }


        safeLog('log', `[BOT_${tradeType}] T√≠nh to√°n TP/SL cho ${cleanedCoin}:`);
        safeLog('log', `  Short Entry: ${shortEntryPrice.toFixed(4)}, SL: ${shortSlPriceToOrder}, TP: ${shortTpPriceToOrder}`);
        safeLog('log', `  Long Entry: ${longEntryPrice.toFixed(4)}, SL: ${longSlPriceToOrder}, TP: ${longTpPriceToOrder}`);

        // ƒê·∫∑t TP/SL cho v·ªã th·∫ø SHORT
        try {
            const shortTpSlParams = {};
            if (shortExchangeId === 'bingx') {
                shortTpSlParams.positionSide = 'SHORT';
            } else if (shortExchangeId === 'binanceusdm') {
                shortTpSlParams.positionSide = 'SHORT';
            }

            if (parseFloat(shortSlPriceToOrder) > 0) {
                await shortExchange.createOrder(
                    shortOriginalSymbol,
                    'STOP_MARKET',
                    'buy',
                    shortOrder.amount,
                    undefined,
                    { 'stopPrice': parseFloat(shortSlPriceToOrder), ...shortTpSlParams }
                );
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t SL cho SHORT ${shortExchangeId} th√†nh c√¥ng.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è Kh√¥ng ƒë·∫∑t SL cho SHORT ${shortExchangeId} v√¨ stopPrice <= 0 (${shortSlPriceToOrder}).`);
            }
        } catch (slShortError) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t SL cho SHORT ${shortExchangeId}: ${slShortError.message}. Ti·∫øp t·ª•c.`, slShortError);
        }

        try {
            const shortTpSlParams = {};
            if (shortExchangeId === 'bingx') {
                shortTpSlParams.positionSide = 'SHORT';
            } else if (shortExchangeId === 'binanceusdm') {
                shortTpSlParams.positionSide = 'SHORT';
            }

            if (parseFloat(shortTpPriceToOrder) > 0) {
                await shortExchange.createOrder(
                    shortOriginalSymbol,
                    'TAKE_PROFIT_MARKET',
                    'buy',
                    shortOrder.amount,
                    undefined,
                    { 'stopPrice': parseFloat(shortTpPriceToOrder), ...shortTpSlParams }
                );
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t TP cho SHORT ${shortExchangeId} th√†nh c√¥ng.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è Kh√¥ng ƒë·∫∑t TP cho SHORT ${shortExchangeId} v√¨ stopPrice <= 0 (${shortTpPriceToOrder}).`);
            }
        } catch (tpShortError) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t TP cho SHORT ${shortExchangeId}: ${tpShortError.message}. Ti·∫øp t·ª•c.`, tpShortError);
        }

        // ƒê·∫∑t TP/SL cho v·ªã th·∫ø LONG
        try {
            const longTpSlParams = {};
            if (longExchangeId === 'bingx') {
                longTpSlParams.positionSide = 'LONG';
            } else if (longExchangeId === 'binanceusdm') {
                longTpSlParams.positionSide = 'LONG';
            }

            if (parseFloat(longSlPriceToOrder) > 0) {
                await longExchange.createOrder(
                    longOriginalSymbol,
                    'STOP_MARKET',
                    'sell',
                    longOrder.amount,
                    undefined,
                    { 'stopPrice': parseFloat(longSlPriceToOrder), ...longTpSlParams }
                );
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t SL cho LONG ${longExchangeId} th√†nh c√¥ng.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è Kh√¥ng ƒë·∫∑t SL cho LONG ${longExchangeId} v√¨ stopPrice <= 0 (${longSlPriceToOrder}).`);
            }
        } catch (slLongError) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t SL cho LONG ${longExchangeId}: ${slLongError.message}. Ti·∫øp t·ª•c.`, slLongError);
        }

        try {
            const longTpSlParams = {};
            if (longExchangeId === 'bingx') {
                longTpSlParams.positionSide = 'LONG';
            } else if (longExchangeId === 'binanceusdm') {
                longTpSlParams.positionSide = 'LONG';
            }

            if (parseFloat(longTpPriceToOrder) > 0) {
                await longExchange.createOrder(
                    longOriginalSymbol,
                    'TAKE_PROFIT_MARKET',
                    'sell',
                    longOrder.amount,
                    undefined,
                    { 'stopPrice': parseFloat(longTpPriceToOrder), ...longTpSlParams }
                );
                safeLog('log', `[BOT_${tradeType}] ‚úÖ ƒê·∫∑t TP cho LONG ${longExchangeId} th√†nh c√¥ng.`);
            } else {
                safeLog('warn', `[BOT_${tradeType}] ‚ö†Ô∏è Kh√¥ng ƒë·∫∑t TP cho LONG ${longExchangeId} v√¨ stopPrice <= 0 (${longTpPriceToOrder}).`);
            }
        } catch (tpLongError) {
            safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói ƒë·∫∑t TP cho LONG ${longExchangeId}: ${tpLongError.message}. Ti·∫øp t·ª•c.`, tpLongError);
        }

    } catch (e) {
        safeLog('error', `[BOT_${tradeType}] ‚ùå L·ªói khi th·ª±c hi·ªán giao d·ªãch (ho·∫∑c ƒë·∫∑t TP/SL): ${e.message}`, e);
        tradeSuccess = false;
        // Attempt to cancel orders if one side failed
        if (shortOrder?.id) {
            try { await exchanges[shortExchangeId].cancelOrder(shortOrder.id, shortOriginalSymbol); safeLog('log', `[BOT_${tradeType}] ƒê√£ h·ªßy l·ªánh SHORT ${shortExchangeId}: ${shortOrder.id}`); } catch (ce) { safeLog('error', `[BOT_${tradeType}] L·ªói h·ªßy l·ªánh SHORT: ${ce.message}`, ce); }
        }
        if (longOrder?.id) {
            try { await exchanges[longExchangeId].cancelOrder(longOrder.id, longOriginalSymbol); safeLog('log', `[BOT_${tradeType}] ƒê√£ h·ªßy l·ªánh LONG ${longExchangeId}: ${longOrder.id}`); } catch (ce) { safeLog('error', `[BOT_${tradeType}] L·ªói h·ªßy l·ªánh LONG: ${ce.message}`, ce); }
        }
        if (isTest) {
            safeLog('log', `[BOT_${tradeType}] testTradeDetails being reset to null due to trade failure.`);
            testTradeDetails = null; // Clear details if trade setup failed
        } else {
            safeLog('log', `[BOT_${tradeType}] currentTradeDetails being reset to null due to trade failure.`);
            currentTradeDetails = null; // Clear details if trade setup failed
        }
    }
    return tradeSuccess;
}

// Modified closeTradesAndCalculatePnL to handle both auto and test trades
async function closeTradesAndCalculatePnL(isTestTrade = false) {
    const tradeType = isTestTrade ? 'TEST_TRADE' : 'AUTO_TRADE';
    let tradeDetailsToClose = isTestTrade ? testTradeDetails : currentTradeDetails;

    if (!tradeDetailsToClose || tradeDetailsToClose.status !== 'OPEN') {
        safeLog('log', `[BOT_PNL_${tradeType}] Kh√¥ng c√≥ giao d·ªãch ${tradeType} n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.`);
        return;
    }

    safeLog('log', `[BOT_PNL_${tradeType}] üîÑ ƒêang ƒë√≥ng c√°c v·ªã th·∫ø ${tradeType} v√† t√≠nh to√°n PnL...`);
    const { coin, shortExchange, longExchange, shortOriginalSymbol, longOriginalSymbol, shortOrderAmount, longOrderAmount, shortCollateral, longCollateral } = tradeDetailsToClose;

    try {
        safeLog('log', `[BOT_PNL_${tradeType}] H·ªßy c√°c l·ªánh TP/SL c√≤n ch·ªù (n·∫øu c√≥)...`);
        // Fetch and cancel specific symbol orders for SHORT side
        try {
            const shortOpenOrders = await exchanges[shortExchange].fetchOpenOrders(shortOriginalSymbol);
            for (const order of shortOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[shortExchange].cancelOrder(order.id, shortOriginalSymbol);
                    safeLog('log', `[BOT_PNL_${tradeType}] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${shortOriginalSymbol} tr√™n ${shortExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL_${tradeType}] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${shortOriginalSymbol} tr√™n ${shortExchange}: ${e.message}`, e); }

        // Fetch and cancel specific symbol orders for LONG side
        try {
            const longOpenOrders = await exchanges[longExchange].fetchOpenOrders(longOriginalSymbol);
            for (const order of longOpenOrders) {
                if ((order.type === 'stop' || order.type === 'take_profit' || order.type === 'stop_market' || order.type === 'take_profit_market') && order.status === 'open') {
                    await exchanges[longExchange].cancelOrder(order.id, longOriginalSymbol);
                    safeLog('log', `[BOT_PNL_${tradeType}] ƒê√£ h·ªßy l·ªánh ch·ªù ${order.type} ${order.id} cho ${longOriginalSymbol} tr√™n ${longExchange}.`);
                }
            }
        } catch (e) { safeLog('warn', `[BOT_PNL_${tradeType}] L·ªói khi h·ªßy l·ªánh ch·ªù cho ${longOriginalSymbol} tr√™n ${longExchange}: ${e.message}`, e); }

        const closeShortParams = {};
        if (shortExchange === 'bingx') {
            closeShortParams.positionSide = 'SHORT';
        } else if (shortExchange === 'binanceusdm') {
            closeShortParams.positionSide = 'SHORT';
        }

        const closeLongParams = {};
        if (longExchange === 'bingx') {
            closeLongParams.positionSide = 'LONG';
        } else if (longExchange === 'binanceusdm') {
            closeLongParams.positionSide = 'LONG';
        }

        safeLog('log', `[BOT_PNL_${tradeType}] ƒê√≥ng v·ªã th·∫ø SHORT ${coin} tr√™n ${shortExchange} (amount: ${shortOrderAmount})...`);
        const closeShortOrder = await exchanges[shortExchange].createMarketBuyOrder(shortOriginalSymbol, shortOrderAmount, closeShortParams);
        safeLog('log', `[BOT_PNL_${tradeType}] ‚úÖ V·ªã th·∫ø SHORT tr√™n ${shortExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeShortOrder.id}`);

        safeLog('log', `[BOT_PNL_${tradeType}] ƒê√≥ng v·ªã th·∫ø LONG ${coin} tr√™n ${longExchange} (amount: ${longOrderAmount})...`);
        const closeLongOrder = await exchanges[longExchange].createMarketSellOrder(longOriginalSymbol, longOrderAmount, closeLongParams);
        safeLog('log', `[BOT_PNL_${tradeType}] ‚úÖ V·ªã th·∫ø LONG tr√™n ${longExchange} ƒë√£ ƒë√≥ng. Order ID: ${closeLongOrder.id}`);

        safeLog('log', `[BOT_PNL_${tradeType}] ƒê·ª£i 30 gi√¢y ƒë·ªÉ s√†n x·ª≠ l√Ω d·ªØ li·ªáu PnL...`);
        await sleep(30000);

        let shortSidePnl = 0;
        let longSidePnl = 0;

        try {
            let pnlFound = false;
            const shortTrades = await exchanges[shortExchange].fetchMyTrades(shortOriginalSymbol, undefined, undefined, { orderId: closeShortOrder.id, limit: 10 });
            for (const trade of shortTrades) {
                if (trade.order === closeShortOrder.id && trade.info?.realizedPnl !== undefined) {
                    shortSidePnl = parseFloat(trade.info.realizedPnl);
                    safeLog('log', `[BOT_PNL_${tradeType}] PnL SHORT t·ª´ trade ${trade.id} (order ${closeShortOrder.id}): ${shortSidePnl.toFixed(2)} USDT.`);
                    pnlFound = true;
                    break;
                }
            }
            if (!pnlFound) {
                safeLog('warn', `[BOT_PNL_${tradeType}] Kh√¥ng t√¨m th·∫•y PnL th·ª±c t·∫ø cho l·ªánh SHORT ${closeShortOrder.id} tr√™n ${shortExchange} t·ª´ trade history. C·∫≠p nh·∫≠t s·ªë d∆∞ v√† t√≠nh t·ª´ ƒë√≥.`);
                await updateBalances();
                shortSidePnl = (balances[shortExchange]?.available || 0) - tradeDetailsToClose.shortCollateral;
                safeLog('log', `[BOT_PNL_${tradeType}] PnL SHORT t√≠nh t·ª´ s·ªë d∆∞ ${shortExchange}: ${shortSidePnl.toFixed(2)} USDT.`);
            }
        } catch (e) {
            safeLog('error', `[BOT_PNL_${tradeType}] ‚ùå L·ªói khi l·∫•y PnL th·ª±c t·∫ø cho SHORT ${shortExchange}: ${e.message}`, e);
            await updateBalances();
            shortSidePnl = (balances[shortExchange]?.available || 0) - tradeDetailsToClose.shortCollateral;
            safeLog('log', `[BOT_PNL_${tradeType}] PnL SHORT t√≠nh t·ª´ s·ªë d∆∞ (do l·ªói): ${shortSidePnl.toFixed(2)} USDT.`);
        }

        try {
            let pnlFound = false;
            if (longExchange === 'bingx') {
                safeLog('log', `[BOT_PNL_${tradeType}] ƒê·ª£i th√™m 5s v√¨ BingX c√≥ th·ªÉ delay tr·∫£ v·ªÅ realizedPnl...`);
                await sleep(5000);
            }

            const longTrades = await exchanges[longExchange].fetchMyTrades(longOriginalSymbol, undefined, undefined, { orderId: closeLongOrder.id, limit: 10 });
            for (const trade of longTrades) {
                safeLog('debug', `[BOT_PNL_${tradeType}] DEBUG trade.info for ${longExchange} (order ${trade.order}): ${JSON.stringify(trade.info)}`);

                if (trade.order === closeLongOrder.id && trade.info?.realizedPnl !== undefined) {
                    longSidePnl = parseFloat(trade.info.realizedPnl);
                    safeLog('log', `[BOT_PNL_${tradeType}] PnL LONG t·ª´ trade ${trade.id} (order ${closeLongOrder.id}): ${longSidePnl.toFixed(2)} USDT.`);
                    pnlFound = true;
                    break;
                }
                else if (trade.order === closeLongOrder.id && trade.info?.pnl !== undefined) {
                    longSidePnl = parseFloat(trade.info.pnl);
                    safeLog('log', `[BOT_PNL_${tradeType}] PnL LONG t·ª´ trade ${trade.id} (order ${closeLongOrder.id}, using trade.info.pnl): ${longSidePnl.toFixed(2)} USDT.`);
                    pnlFound = true;
                    break;
                }
            }
            if (!pnlFound) {
                safeLog('warn', `[BOT_PNL_${tradeType}] Kh√¥ng t√¨m th·∫•y PnL th·ª±c t·∫ø cho l·ªánh LONG ${closeLongOrder.id} tr√™n ${longExchange} t·ª´ trade history. C·∫≠p nh·∫≠t s·ªë d∆∞ v√† t√≠nh t·ª´ ƒë√≥. (Ph∆∞∆°ng ph√°p fallback n√†y ƒë√°ng tin c·∫≠y)`);
                await updateBalances();
                longSidePnl = (balances[longExchange]?.available || 0) - tradeDetailsToClose.longCollateral;
                safeLog('log', `[BOT_PNL_${tradeType}] PnL LONG t√≠nh t·ª´ s·ªë d∆∞ ${longExchange}: ${longSidePnl.toFixed(2)} USDT.`);
            }
        } catch (e) {
            safeLog('error', `[BOT_PNL_${tradeType}] ‚ùå L·ªói khi l·∫•y PnL th·ª±c t·∫ø cho LONG ${longExchange}: ${e.message}`, e);
            await updateBalances();
            longSidePnl = (balances[longExchange]?.available || 0) - tradeDetailsToClose.longCollateral;
            safeLog('log', `[BOT_PNL_${tradeType}] PnL LONG t√≠nh t·ª´ s·ªë d∆∞ (do l·ªói): ${longSidePnl.toFixed(2)} USDT.`);
        }

        const cyclePnl = shortSidePnl + longSidePnl;
        
        // Only update cumulative PnL for auto trades
        if (!isTestTrade) {
            cumulativePnl += cyclePnl;
        }

        tradeHistory.unshift({
            id: Date.now(),
            coin: coin,
            exchanges: `${shortExchange}/${longExchange}`,
            fundingDiff: isTestTrade ? 'TEST' : (currentSelectedOpportunityForExecution?.fundingDiff || 'N/A'), // Use specific source for test
            estimatedPnl: isTestTrade ? 'TEST' : (currentSelectedOpportunityForExecution?.estimatedPnl || 'N/A'), // Use specific source for test
            actualPnl: parseFloat(cyclePnl.toFixed(2)),
            timestamp: new Date().toISOString(),
            type: tradeDetailsToClose.type // Include type in history
        });

        if (tradeHistory.length > 50) {
            tradeHistory.pop();
        }

        safeLog('log', `[BOT_PNL_${tradeType}] ‚úÖ Chu k·ª≥ giao d·ªãch ${tradeType} cho ${coin} ho√†n t·∫•t. PnL chu k·ª≥: ${cyclePnl.toFixed(2)} USDT. T·ªïng PnL (ch·ªâ AUTO): ${cumulativePnl.toFixed(2)} USDT.`);

    } catch (e) {
        safeLog('error', `[BOT_PNL_${tradeType}] ‚ùå L·ªói khi ƒë√≥ng v·ªã th·∫ø ho·∫∑c t√≠nh to√°n PnL: ${e.message}`, e);
    } finally {
        if (isTestTrade) {
            safeLog('log', `[BOT_PNL_${tradeType}] testTradeDetails being reset to null.`);
            testTradeDetails = null; // Clear test trade details
        } else {
            safeLog('log', `[BOT_PNL_${tradeType}] currentSelectedOpportunityForExecution being reset to null.`);
            currentSelectedOpportunityForExecution = null; // Clear selected opportunity for next cycle
            safeLog('log', `[BOT_PNL_${tradeType}] currentTradeDetails being reset to null.`);
            currentTradeDetails = null; // Clear auto trade details
        }
        safeLog('log', `[BOT_PNL_${tradeType}] D·ªçn d·∫πp l·ªánh ch·ªù v√† v·ªã th·∫ø ƒë√£ ƒë√≥ng (n·∫øu c√≥).`);
    }
}

let serverDataGlobal = null;

async function mainBotLoop() {
    if (botLoopIntervalId) clearTimeout(botLoopIntervalId);

    if (botState !== 'RUNNING') {
        safeLog('log', '[BOT_LOOP_AUTO] Bot kh√¥ng ·ªü tr·∫°ng th√°i RUNNING. D·ª´ng v√≤ng l·∫∑p.');
        return;
    }

    const now = new Date();
    const currentMinute = now.getUTCMinutes();
    const currentSecond = now.getUTCSeconds();

    const minuteAligned = Math.floor(now.getTime() / (60 * 1000));

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ server m·ªói DATA_FETCH_INTERVAL_SECONDS
    if (currentSecond % DATA_FETCH_INTERVAL_SECONDS === 0 && LAST_ACTION_TIMESTAMP.dataFetch !== currentSecond) {
        LAST_ACTION_TIMESTAMP.dataFetch = currentSecond;

        const fetchedData = await fetchDataFromServer();
        if (fetchedData) {
            serverDataGlobal = fetchedData;
            await processServerData(serverDataGlobal);
        }
    }

    // Bot s·∫Ω CH·ªåN c∆° h·ªôi t·ªët nh·∫•t (g·∫ßn funding nh·∫•t, PnL cao nh·∫•t) ƒë·ªÉ "ƒë·∫∑t ch·ªó"
    if (currentMinute === 58 && currentSecond >= 0 && currentSecond < 5 && botState === 'RUNNING') {
        // ƒê·∫£m b·∫£o bot kh√¥ng ƒëang qu·∫£n l√Ω m·ªôt l·ªánh t·ª± ƒë·ªông n√†o kh√°c
        if (currentTradeDetails && currentTradeDetails.status === 'OPEN') {
             safeLog('log', '[BOT_LOOP_AUTO] ‚ö†Ô∏è ƒêang c√≥ l·ªánh t·ª± ƒë·ªông m·ªü. B·ªè qua vi·ªác ch·ªçn c∆° h·ªôi m·ªõi.');
             currentSelectedOpportunityForExecution = null; // Clear any pre-selected opportunity
             return; // Skip selection if an auto trade is active
        }

        if (LAST_ACTION_TIMESTAMP.selectionTime !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.selectionTime = minuteAligned;

            safeLog('log', `[BOT_LOOP_AUTO] üåü K√≠ch ho·∫°t l·ª±a ch·ªçn c∆° h·ªôi ƒë·ªÉ TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}:${currentSecond} gi√¢y.`);

            let bestOpportunityFoundForExecution = null;
            let debugOpportunityCandidates = [];

            for (const op of allCurrentOpportunities) {
                const minutesUntilFunding = (op.nextFundingTime - now.getTime()) / (1000 * 60);
                op.details.minutesUntilFunding = minutesUntilFunding;

                if (op.estimatedPnl >= MIN_PNL_PERCENTAGE && minutesUntilFunding > 0) {
                    debugOpportunityCandidates.push({
                        coin: op.coin,
                        exchanges: op.exchanges,
                        estimatedPnl: op.estimatedPnl.toFixed(2),
                        minutesUntilFunding: minutesUntilFunding.toFixed(1)
                    });

                    if (!bestOpportunityFoundForExecution ||
                        minutesUntilFunding < bestOpportunityFoundForExecution.details.minutesUntilFunding ||
                        (minutesUntilFunding === bestOpportunityFoundForExecution.details.minutesUntilFunding && op.estimatedPnl > bestOpportunityFoundForExecution.estimatedPnl)
                    ) {
                        bestOpportunityFoundForExecution = op;
                    }
                }
            }

            if (debugOpportunityCandidates.length > 0) {
                safeLog('debug', `[BOT_LOOP_AUTO] C√°c c∆° h·ªôi ƒë·ªß ƒëi·ªÅu ki·ªán (PnL >= ${MIN_PNL_PERCENTAGE}%, Funding > 0):`, JSON.stringify(debugOpportunityCandidates, null, 2));
            }

            if (bestOpportunityFoundForExecution) {
                currentSelectedOpportunityForExecution = bestOpportunityFoundForExecution;
                if (bestPotentialOpportunityForDisplay) {
                    bestPotentialOpportunityForDisplay.details.minutesUntilFunding = currentSelectedOpportunityForExecution.details.minutesUntilFunding;
                }

                safeLog('log', `[BOT_LOOP_AUTO] ‚úÖ Bot ƒë√£ CH·ªåN c∆° h·ªôi: ${currentSelectedOpportunityForExecution.coin} tr√™n ${currentSelectedOpportunityForExecution.exchanges} ƒë·ªÉ TH·ª∞C HI·ªÜN.`);
                safeLog('log', `  Th√¥ng tin chi ti·∫øt: PnL ∆∞·ªõc t√≠nh: ${currentSelectedOpportunityForExecution.estimatedPnl.toFixed(2)}%, Funding trong: ${currentSelectedOpportunityForExecution.details.minutesUntilFunding.toFixed(1)} ph√∫t.`);
                safeLog('log', `  S√†n Short: ${currentSelectedOpportunityForExecution.details.shortExchange} (${currentSelectedOpportunityForExecution.details.shortOriginalSymbol}), S√†n Long: ${currentSelectedOpportunityForExecution.details.longExchange} (${currentSelectedOpportunityForExecution.details.longOriginalSymbol})`);

                const shortExId = currentSelectedOpportunityForExecution.details.shortExchange.toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.details.shortExchange.toLowerCase();
                const longExId = currentSelectedOpportunityForExecution.details.longExchange.toLowerCase() === 'binance' ? 'binanceusdm' : currentSelectedOpportunityForExecution.details.longExchange.toLowerCase(); // S·ª¨A L·ªñI ·ªû ƒê√ÇY
                const minAvailableBalance = Math.min(balances[shortExId]?.available || 0, balances[longExId]?.available || 0);
                // Ensure bestPotentialOpportunityForDisplay is not null before updating
                if (bestPotentialOpportunityForDisplay) {
                    bestPotentialOpportunityForDisplay.estimatedTradeCollateral = (minAvailableBalance * (currentPercentageToUse / 100)).toFixed(2);
                }
                safeLog('log', `  V·ªën d·ª± ki·∫øn: ${bestPotentialOpportunityForDisplay?.estimatedTradeCollateral || 'N/A'} USDT`);

                safeLog('log', '[BOT_LOOP_AUTO] B·ªè qua b∆∞·ªõc chuy·ªÉn ti·ªÅn. Ti·ªÅn ph·∫£i c√≥ s·∫µn tr√™n c√°c s√†n.');

            } else {
                safeLog('log', `[BOT_LOOP_AUTO] üîç Kh√¥ng t√¨m th·∫•y c∆° h·ªôi n√†o ƒë·ªß ƒëi·ªÅu ki·ªán (PnL >= ${MIN_PNL_PERCENTAGE}%) ƒë·ªÉ CH·ªåN TH·ª∞C HI·ªÜN t·∫°i ph√∫t ${currentMinute}.`);
                currentSelectedOpportunityForExecution = null;
            }
        }
    }

    // M·ªü l·ªánh t·ª± ƒë·ªông v√†o ph√∫t 59:55 - 59:58
    if (currentMinute === 59 && currentSecond >= 55 && currentSecond < 59 && botState === 'RUNNING' && currentSelectedOpportunityForExecution && !currentTradeDetails) {
        if (LAST_ACTION_TIMESTAMP.tradeExecution !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.tradeExecution = minuteAligned;

            const minutesUntilFundingAtExecution = (currentSelectedOpportunityForExecution.nextFundingTime - now.getTime()) / (1000 * 60);

            if (minutesUntilFundingAtExecution > 0 && minutesUntilFundingAtExecution <= MAX_MINUTES_UNTIL_FUNDING) {
                safeLog('log', `[BOT_LOOP_AUTO] ‚ö° K√≠ch ho·∫°t M·ªû L·ªÜNH AUTO cho c∆° h·ªôi ${currentSelectedOpportunityForExecution.coin} v√†o ph√∫t 59:55. (Funding trong ${minutesUntilFundingAtExecution.toFixed(1)} ph√∫t)`);
                botState = 'EXECUTING_TRADES';
                const tradeSuccess = await executeTrades(currentSelectedOpportunityForExecution, currentPercentageToUse, false); // isTest = false
                if (tradeSuccess) {
                    safeLog('log', '[BOT_LOOP_AUTO] ‚úÖ M·ªü l·ªánh AUTO ho√†n t·∫•t.');
                } else {
                    safeLog('error', '[BOT_LOOP_AUTO] ‚ùå L·ªói m·ªü l·ªánh AUTO. H·ªßy chu k·ª≥ n√†y.');
                    currentSelectedOpportunityForExecution = null;
                    currentTradeDetails = null;
                }
                botState = 'RUNNING';
            } else {
                safeLog('log', `[BOT_LOOP_AUTO] üü° C∆° h·ªôi AUTO ƒë√£ ch·ªçn (${currentSelectedOpportunityForExecution.coin}) kh√¥ng c√≤n trong c·ª≠a s·ªï th·ª±c hi·ªán l·ªánh (c√≤n ${minutesUntilFundingAtExecution.toFixed(1)} ph√∫t). B·ªè qua.`);
                currentSelectedOpportunityForExecution = null;
            }
        }
    }

    // ƒê√≥ng l·ªánh t·ª± ƒë·ªông v√† t√≠nh PnL v√†o ph√∫t 00:05
    if (currentMinute === 0 && currentSecond >= 5 && currentSecond < 10 && botState === 'RUNNING' && currentTradeDetails?.status === 'OPEN') {
        if (LAST_ACTION_TIMESTAMP.closeTrade !== minuteAligned) {
            LAST_ACTION_TIMESTAMP.closeTrade = minuteAligned;

            safeLog('log', '[BOT_LOOP_AUTO] üõë K√≠ch ho·∫°t ƒë√≥ng l·ªánh AUTO v√† t√≠nh PnL v√†o ph√∫t 00:05.');
            botState = 'CLOSING_TRADES';

            closeTradesAndCalculatePnL(false) // isTest = false
                .then(() => {
                    safeLog('log', '[BOT_LOOP_AUTO] ‚úÖ ƒê√≥ng l·ªánh AUTO v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then).');
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_LOOP_AUTO] ‚ùå L·ªói khi ƒë√≥ng l·ªánh AUTO v√† t√≠nh PnL (qua Promise.catch): ${errorInClose.message}`, errorInClose);
                })
                .finally(() => {
                    botState = 'RUNNING';
                });
        }
    }

    botLoopIntervalId = setTimeout(() => { mainBotLoop(); }, 1000);
}

function startBot() {
    if (botState === 'STOPPED') {
        safeLog('log', '[BOT] ‚ñ∂Ô∏è Kh·ªüi ƒë·ªông Bot...');
        botState = 'RUNNING';

        updateBalances().then(() => {
            safeLog('log', '[BOT] ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ ban ƒë·∫ßu. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot.');
            mainBotLoop();
        }).catch(err => {
            safeLog('error', `[BOT] L·ªói khi kh·ªüi t·∫°o s·ªë d∆∞ ban ƒë·∫ßu: ${err.message}`, err);
            botState = 'STOPPED';
        });
        return true;
    }
    safeLog('warn', '[BOT] Bot ƒë√£ ch·∫°y ho·∫∑c ƒëang trong qu√° tr√¨nh chuy·ªÉn tr·∫°ng th√°i.');
    return false;
}

function stopBot() {
    if (botState === 'RUNNING' || botState === 'FETCHING_DATA' || botState === 'PROCESSING_DATA' || botState === 'EXECUTING_TRADES' || botState === 'CLOSING_TRADES') {
        safeLog('log', '[BOT] ‚è∏Ô∏è D·ª´ng Bot...');
        if (botLoopIntervalId) {
            clearTimeout(botLoopIntervalId);
            botLoopIntervalId = null;
        }
        botState = 'STOPPED';
        safeLog('log', '[BOT] Bot ƒë√£ d·ª´ng th√†nh c√¥ng.');
        return true;
    }
    safeLog('warn', '[BOT] Bot kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng th·ªÉ d·ª´ng.');
    return false;
}

const botServer = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        fs.readFile(path.join(__dirname, 'index.html'), (err, content) => {
            if (err) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói khi ƒë·ªçc index.html:', err.message, err);
                res.writeHead(500);
                res.end('L·ªói khi ƒë·ªçc index.html');
                return;
            }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/bot-api/status' && req.method === 'GET') {
        // Display both auto and test trade details
        const statusData = {
            botState: botState,
            balances: Object.fromEntries(Object.entries(balances).filter(([id]) => activeExchangeIds.includes(id) || id === 'totalOverall')),
            initialTotalBalance: initialTotalBalance,
            cumulativePnl: cumulativePnl,
            tradeHistory: tradeHistory,
            currentSelectedOpportunity: bestPotentialOpportunityForDisplay,
            currentTradeDetails: currentTradeDetails, // Auto trade
            testTradeDetails: testTradeDetails // Test trade
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(statusData));
    } else if (req.url === '/bot-api/start' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', () => {
            try {
                const data = body ? JSON.parse(body) : {};
                currentPercentageToUse = parseFloat(data.percentageToUse);
                if (isNaN(currentPercentageToUse) || currentPercentageToUse < 1 || currentPercentageToUse > 100) {
                    currentPercentageToUse = 50;
                    safeLog('warn', `Gi√° tr·ªã ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá t·ª´ UI, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: ${currentPercentageToUse}%`);
                }

                const started = startBot();
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: started, message: started ? 'Bot ƒë√£ kh·ªüi ƒë·ªông.' : 'Bot ƒë√£ ch·∫°y.' }));
            } catch (error) {
                safeLog('error', '[BOT_SERVER] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/start:', error.message, error);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server.' }));
            }
        });
    } else if (req.url === '/bot-api/stop' && req.method === 'POST') {
        const stopped = stopBot();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: stopped, message: stopped ? 'Bot ƒë√£ d·ª´ng.' : 'Bot kh√¥ng ho·∫°t ƒë·ªông.' }));
    } else if (req.url === '/bot-api/test-trade' && req.method === 'POST') { // TEST TRADE ENDPOINT
        let body = '';
        req.on('data', chunk => { body += chunk.toString(); });
        req.on('end', async () => {
            try {
                const data = body ? JSON.parse(body) : {};
                const testPercentageToUse = parseFloat(data.percentageToUse);

                if (isNaN(testPercentageToUse) || testPercentageToUse < 1 || testPercentageToUse > 100) {
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Ph·∫ßn trƒÉm v·ªën kh√¥ng h·ª£p l·ªá (1-100).' }));
                    return;
                }

                if (!bestPotentialOpportunityForDisplay) {
                    safeLog('warn', '[BOT_SERVER_TEST] Kh√¥ng t√¨m th·∫•y c∆° h·ªôi n√†o ƒëang ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI. Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh test.');
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'Kh√¥ng t√¨m th·∫•y c∆° h·ªôi arbitrage n√†o ƒë·ªÉ test. Vui l√≤ng ƒë·∫£m b·∫£o c√≥ c∆° h·ªôi ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n UI.' }));
                    return;
                }

                if (testTradeDetails && testTradeDetails.status === 'OPEN') {
                    safeLog('warn', '[BOT_SERVER_TEST] ƒê√£ c√≥ l·ªánh TEST ƒëang m·ªü. Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh test khi c√≥ l·ªánh TEST ƒëang ƒë∆∞·ª£c theo d√µi.');
                    res.writeHead(409, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'ƒê√£ c√≥ l·ªánh TEST ƒëang m·ªü. Vui l√≤ng ƒë√≥ng l·ªánh TEST hi·ªán t·∫°i tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh test m·ªõi.' }));
                    return;
                }

                const testOpportunity = bestPotentialOpportunityForDisplay;

                safeLog('log', `[BOT_SERVER_TEST] ‚ö° Y√™u c·∫ßu TEST M·ªû L·ªÜNH: ${testOpportunity.coin} tr√™n ${testOpportunity.exchanges} v·ªõi ${testPercentageToUse}% v·ªën.`);
                safeLog('log', '[BOT_SERVER_TEST] Th√¥ng tin c∆° h·ªôi Test:', testOpportunity);

                const tradeSuccess = await executeTrades(testOpportunity, testPercentageToUse, true); // isTest = true

                if (tradeSuccess) {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'L·ªánh TEST ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!' }));
                } else {
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªánh TEST. Vui l√≤ng ki·ªÉm tra log bot.' }));
                }

            } catch (error) {
                safeLog('error', '[BOT_SERVER_TEST] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/test-trade:', error.message, error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'L·ªói server khi th·ª±c hi·ªán l·ªánh test.' }));
            }
        });
    } else if (req.url === '/bot-api/stop-test-trade' && req.method === 'POST') { // NEW: STOP TEST TRADE ENDPOINT
        try {
            if (!testTradeDetails || testTradeDetails.status !== 'OPEN') {
                safeLog('log', '[BOT_SERVER_TEST] Y√™u c·∫ßu d·ª´ng l·ªánh TEST nh∆∞ng kh√¥ng c√≥ l·ªánh TEST n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.');
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, message: 'Kh√¥ng c√≥ l·ªánh TEST n√†o ƒëang m·ªü ƒë·ªÉ d·ª´ng.' }));
                return;
            }

            safeLog('log', '[BOT_SERVER_TEST] üõë Y√™u c·∫ßu D·ª™NG L·ªÜNH TEST ƒêANG M·ªû.');
            closeTradesAndCalculatePnL(true) // isTest = true
                .then(() => {
                    safeLog('log', '[BOT_SERVER_TEST] ‚úÖ ƒê√≥ng l·ªánh TEST v√† t√≠nh PnL ho√†n t·∫•t (qua Promise.then trong API stop-test-trade).');
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: true, message: 'ƒê√£ g·ª≠i l·ªánh ƒë√≥ng v·ªã th·∫ø TEST th√†nh c√¥ng.' }));
                })
                .catch(errorInClose => {
                    safeLog('error', `[BOT_SERVER_TEST] ‚ùå L·ªói khi ƒë√≥ng l·ªánh TEST v√† t√≠nh PnL (qua Promise.catch trong API stop-test-trade): ${errorInClose.message}`, errorInClose);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh TEST.' }));
                });

        } catch (error) {
            safeLog('error', '[BOT_SERVER_TEST] ‚ùå L·ªói x·ª≠ l√Ω POST /bot-api/stop-test-trade:', error.message, error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, message: 'L·ªói server khi d·ª´ng l·ªánh TEST.' }));
        }
    }
    else {
        res.writeHead(404); res.end('Not Found');
    }
});

botServer.listen(BOT_PORT, () => {
    safeLog('log', `‚úÖ M√°y ch·ªß UI c·ªßa Bot ƒëang ch·∫°y t·∫°i http://localhost:${BOT_PORT}`);
    safeLog('log', 'Bot ƒëang ch·ªù l·ªánh "Start" t·ª´ giao di·ªán HTML.');
});
