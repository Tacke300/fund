// severfunding.js (B·∫¢N 10 - GI·∫¢I PH√ÅP D·ª®T ƒêI·ªÇM B·∫∞NG CCXT)

const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt'); // B·∫ÆT BU·ªòC D√ôNG TH∆Ø VI·ªÜN CHUY√äN D·ª§NG

const PORT = 5000;
const REFRESH_INTERVAL_MINUTES = 5;

let cachedData = {
    lastUpdated: null,
    rates: { binance: [], bingx: [], okx: [], bitget: [] } 
};

// Kh·ªüi t·∫°o c√°c s√†n giao d·ªãch qua CCXT
const exchanges = {
    binance: new ccxt.binanceusdm(),
    bingx: new ccxt.bingx(), 
    okx: new ccxt.okx(),
    bitget: new ccxt.bitget()
};

/**
 * H√†m l·∫•y funding rates t·ª´ m·ªôt s√†n c·ª• th·ªÉ b·∫±ng CCXT.
 * @param {string} exchangeName - T√™n c·ªßa s√†n
 * @returns {Promise<Array>} - M·∫£ng d·ªØ li·ªáu funding rate
 */
async function fetchRatesForExchange(exchangeName) {
    try {
        const exchange = exchanges[exchangeName];
        const fundingRates = await exchange.fetchFundingRates();
        
        return Object.values(fundingRates)
            .filter(rate => rate && typeof rate.fundingRate === 'number' && rate.fundingRate < 0)
            .map(rate => ({
                symbol: rate.symbol.replace('/', ''), 
                fundingRate: rate.fundingRate
            }));
    } catch (e) {
        if (e instanceof ccxt.NetworkError) {
            console.error(`- L·ªói M·∫†NG CCXT khi l·∫•y d·ªØ li·ªáu t·ª´ ${exchangeName.toUpperCase()}: ${e.message}`);
        } else if (e instanceof ccxt.ExchangeError) {
            console.error(`- L·ªói t·ª´ S√ÄN CCXT ${exchangeName.toUpperCase()}: ${e.message}`);
        } else {
            console.error(`- L·ªói KH√îNG X√ÅC ƒê·ªäNH CCXT t·ª´ ${exchangeName.toUpperCase()}: ${e.message}`);
        }
        return [];
    }
}

async function updateFundingRates() {
    console.log(`[${new Date().toISOString()}] ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu b·∫±ng gi·∫£i ph√°p CCXT...`);

    const exchangeKeys = Object.keys(exchanges);

    const results = await Promise.all(
        exchangeKeys.map(key => fetchRatesForExchange(key))
    );

    const newRates = {};
    exchangeKeys.forEach((key, index) => {
        newRates[key] = results[index].sort((a,b) => a.fundingRate - b.fundingRate);
    });
    
    cachedData = {
        lastUpdated: new Date().toISOString(),
        rates: newRates
    };
    
    console.log("‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!");
    console.log(`   - Binance: ${cachedData.rates.binance.length} c·∫∑p, BingX: ${cachedData.rates.bingx.length} c·∫∑p, OKX: ${cachedData.rates.okx.length} c·∫∑p, Bitget: ${cachedData.rates.bitget.length} c·∫∑p.`);
}

// Ph·∫ßn server gi·ªØ nguy√™n
const server = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        const filePath = path.join(__dirname, 'index.html');
        fs.readFile(filePath, (err, content) => {
            if (err) { res.writeHead(500, {'Content-Type': 'text/plain; charset=utf-8'}); res.end('L·ªói: Kh√¥ng t√¨m th·∫•y file index.html'); return; }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/api/rates' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(cachedData));
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
    }
});

server.listen(PORT, async () => {
    console.log(`‚úÖ M√°y ch·ªß d·ªØ li·ªáu ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üë®‚Äçüíª Giao di·ªán ng∆∞·ªùi d√πng: http://localhost:${PORT}/`);
    console.log(`ü§ñ Endpoint cho bot: http://localhost:${PORT}/api/rates`);
    
    await updateFundingRates();
    setInterval(updateFundingRates, REFRESH_INTERVAL_MINUTES * 60 * 1000);
});
