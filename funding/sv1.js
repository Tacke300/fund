// sv1.js (B·∫¢N 6 - S·ª¨A L·ªñI N/A TRI·ªÜT ƒê·ªÇ & TH√äM LOG DEBUG)

const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');

const PORT = 5001;

// ----- C·∫§U H√åNH -----
const EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];
const FUNDING_DIFFERENCE_THRESHOLD = 0.003;
const MINIMUM_PNL_THRESHOLD = 15;

// ----- BI·∫æN TO√ÄN C·ª§C -----
let exchangeData = {};
let arbitrageOpportunities = [];
let lastFullUpdateTimestamp = null;

const exchanges = {};
EXCHANGE_IDS.forEach(id => {
    const exchangeClass = ccxt[id];
    exchanges[id] = new exchangeClass();
});

const cleanSymbol = (symbol) => {
    return symbol.replace('/USDT', '').replace(':USDT', '');
};

async function fetchExchangeData(exchangeId) {
    const exchange = exchanges[exchangeId];
    try {
        await exchange.loadMarkets();
        const fundingRatesRaw = await exchange.fetchFundingRates();

        const processedRates = {};
        for (const rate of Object.values(fundingRatesRaw)) {
            const symbol = cleanSymbol(rate.symbol);
            const marketInfo = exchange.markets[rate.symbol];

            if (rate && typeof rate.fundingRate === 'number' && rate.fundingRate < 0 && marketInfo) {
                // ===== THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T N·∫∞M ·ªû ƒê√ÇY =====
                // Th·ª≠ l·∫•y timestamp t·ª´ c√°c tr∆∞·ªùng c√≥ kh·∫£ nƒÉng nh·∫•t
                const timestamp = rate.fundingTimestamp || rate.nextFundingTime || rate.info?.nextFundingTime || null;

                // TH√äM LOG DEBUG: N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y timestamp cho BingX ho·∫∑c Bitget,
                // n√≥ s·∫Ω in ra to√†n b·ªô d·ªØ li·ªáu c·ªßa coin ƒë√≥ ƒë·ªÉ ch√∫ng ta ki·ªÉm tra.
                if ((exchangeId === 'bingx' || exchangeId === 'bitget') && !timestamp) {
                    console.log(`[DEBUG - ${exchangeId.toUpperCase()}] Kh√¥ng t√¨m th·∫•y timestamp cho ${symbol}. D·ªØ li·ªáu g·ªëc:`, JSON.stringify(rate));
                }
                // ===============================================

                processedRates[symbol] = {
                    symbol: symbol,
                    fundingRate: rate.fundingRate,
                    fundingTimestamp: timestamp, // G√°n gi√° tr·ªã ƒë√£ t√¨m ƒë∆∞·ª£c
                    maxLeverage: marketInfo.limits?.leverage?.max || marketInfo.info?.maxLeverage || 75
                };
            }
        }
        return { id: exchangeId, status: 'success', rates: processedRates };
    } catch (e) {
        // Gi·∫£m b·ªõt log l·ªói kh√¥ng c·∫ßn thi·∫øt
        if (e instanceof ccxt.NetworkError) {
             console.warn(`- C·∫£nh b√°o M·∫†NG t·ª´ ${exchangeId.toUpperCase()}: ${e.message}`);
        } else {
             console.warn(`- C·∫£nh b√°o S√ÄN t·ª´ ${exchangeId.toUpperCase()}: ${e.message}`);
        }
        return { id: exchangeId, status: 'error', rates: {} };
    }
}

// ----- C√ÅC H√ÄM C√íN L·∫†I GI·ªÆ NGUY√äN NH∆Ø B·∫¢N TR∆Ø·ªöC -----

async function updateAllData() {
    console.log(`[${new Date().toISOString()}] B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu funding rates...`);
    const results = await Promise.all(EXCHANGE_IDS.map(id => fetchExchangeData(id)));
    results.forEach(result => {
        if (result.status === 'success') {
            exchangeData[result.id] = { rates: result.rates };
        }
    });
    lastFullUpdateTimestamp = new Date().toISOString();
    console.log("‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu funding th√†nh c√¥ng!");
}

function calculateArbitrageOpportunities() {
    const opportunities = [];
    const allSymbols = new Set();
    EXCHANGE_IDS.forEach(id => {
        if (exchangeData[id]) Object.keys(exchangeData[id].rates).forEach(symbol => allSymbols.add(symbol));
    });

    allSymbols.forEach(symbol => {
        let bestOpportunityForSymbol = null;
        for (let i = 0; i < EXCHANGE_IDS.length; i++) {
            for (let j = i + 1; j < EXCHANGE_IDS.length; j++) {
                const exchange1Id = EXCHANGE_IDS[i], exchange2Id = EXCHANGE_IDS[j];
                const rate1 = exchangeData[exchange1Id]?.rates[symbol], rate2 = exchangeData[exchange2Id]?.rates[symbol];
                if (!rate1 || !rate2) continue;
                const fundingDiff = Math.abs(rate1.fundingRate - rate2.fundingRate);
                if (fundingDiff < FUNDING_DIFFERENCE_THRESHOLD) continue;
                const commonLeverage = Math.min(rate1.maxLeverage, rate2.maxLeverage);
                let fee = 0;
                if (commonLeverage <= 25) fee = 5;
                else if (commonLeverage <= 50) fee = 10;
                else if (commonLeverage <= 75) fee = 15;
                else if (commonLeverage <= 100) fee = 20;
                else if (commonLeverage <= 125) fee = 25;
                else fee = 30;
                const estimatedPnl = 100 * commonLeverage * fundingDiff - fee;
                if (estimatedPnl <= MINIMUM_PNL_THRESHOLD) continue;
                const currentOpportunity = {
                    coin: symbol,
                    exchanges: `${exchange1Id.replace('usdm', '')} / ${exchange2Id.replace('usdm', '')}`,
                    nextFundingTime: rate1.fundingTimestamp || rate2.fundingTimestamp || null,
                    estimatedPnl: parseFloat(estimatedPnl.toFixed(2)),
                };
                if (!bestOpportunityForSymbol || currentOpportunity.estimatedPnl > bestOpportunityForSymbol.estimatedPnl) {
                    bestOpportunityForSymbol = currentOpportunity;
                }
            }
        }
        if (bestOpportunityForSymbol) opportunities.push(bestOpportunityForSymbol);
    });
    arbitrageOpportunities = opportunities.sort((a, b) => b.estimatedPnl - a.estimatedPnl);
}

function masterLoop() {
    setInterval(async () => {
        const now = new Date();
        const currentMinute = now.getMinutes();
        if (currentMinute >= 10 && currentMinute <= 59) {
            console.log(`[${now.toISOString()}] Ph√∫t ${currentMinute}, trong khung gi·ªù ho·∫°t ƒë·ªông. ƒêang c·∫≠p nh·∫≠t v√† t√≠nh to√°n...`);
            await updateAllData();
            calculateArbitrageOpportunities();
            console.log(`   => ƒê√£ t√¨m th·∫•y ${arbitrageOpportunities.length} c∆° h·ªôi arbitrage.`);
        } else {
            console.log(`[${now.toISOString()}] Ph√∫t ${currentMinute}, ngo√†i khung gi·ªù ho·∫°t ƒë·ªông. Gi·ªØ nguy√™n k·∫øt qu·∫£ c≈©.`);
        }
    }, 60 * 1000);
}

const server = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        const filePath = path.join(__dirname, 'index.html');
        fs.readFile(filePath, (err, content) => {
            if (err) { res.writeHead(500, {'Content-Type': 'text/plain; charset=utf-8'}); res.end('L·ªói: Kh√¥ng t√¨m th·∫•y file index.html'); return; }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/api/data' && req.method === 'GET') {
        const responseData = {
            lastUpdated: lastFullUpdateTimestamp,
            arbitrageData: arbitrageOpportunities,
            rawRates: {
                binance: Object.values(exchangeData.binanceusdm?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                bingx: Object.values(exchangeData.bingx?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                okx: Object.values(exchangeData.okx?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                bitget: Object.values(exchangeData.bitget?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
            }
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(responseData));
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
    }
});

server.listen(PORT, async () => {
    console.log(`‚úÖ M√°y ch·ªß d·ªØ li·ªáu B·∫¢N 6 ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üë®‚Äçüíª Giao di·ªán ng∆∞·ªùi d√πng: http://localhost:${PORT}/`);
    console.log(`ü§ñ Endpoint d·ªØ li·ªáu: http://localhost:${PORT}/api/data`);
    console.log("ƒêang l·∫•y d·ªØ li·ªáu l·∫ßn ƒë·∫ßu...");
    await updateAllData();
    calculateArbitrageOpportunities();
    console.log("Kh·ªüi t·∫°o ho√†n t·∫•t, b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh.");
    masterLoop();
});
