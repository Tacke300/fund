// severfunding.js (B·∫¢N 11 - T√çCH H·ª¢P LOGIC ARBITRAGE)

const http = require('http');
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt');

const PORT = 5001;

// ----- C·∫§U H√åNH -----
// C√°c s√†n s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng
const EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];

// Ng∆∞·ª°ng ch√™nh l·ªách funding ƒë·ªÉ k√≠ch ho·∫°t t√≠nh to√°n (%pnl)
const FUNDING_DIFFERENCE_THRESHOLD = 0.003; // 0.3%

// Ng∆∞·ª°ng %pnl ∆∞·ªõc t√≠nh t·ªëi thi·ªÉu ƒë·ªÉ hi·ªÉn th·ªã
const MINIMUM_PNL_THRESHOLD = 15;

// ----- BI·∫æN TO√ÄN C·ª§C -----
let exchangeData = {}; // L∆∞u tr·ªØ d·ªØ li·ªáu t·ª´ c√°c s√†n (markets, funding rates)
let arbitrageOpportunities = []; // L∆∞u k·∫øt qu·∫£ t√≠nh to√°n arbitrage
let lastFullUpdateTimestamp = null;

// Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng s√†n CCXT
const exchanges = {};
EXCHANGE_IDS.forEach(id => {
    // CCXT v4 y√™u c·∫ßu 'new (ccxt[id])()'
    const exchangeClass = ccxt[id];
    exchanges[id] = new exchangeClass();
});

// H√†m d·ªçn d·∫πp t√™n bi·ªÉu t∆∞·ª£ng (symbol)
const cleanSymbol = (symbol) => {
    return symbol.replace('/USDT', '').replace(':USDT', '');
};

/**
 * H√†m l·∫•y d·ªØ li·ªáu funding rates v√† th√¥ng tin th·ªã tr∆∞·ªùng t·ª´ m·ªôt s√†n.
 * @param {string} exchangeId - ID c·ªßa s√†n (v√≠ d·ª•: 'binanceusdm')
 * @returns {Promise<Object>} - D·ªØ li·ªáu c·ªßa s√†n
 */
async function fetchExchangeData(exchangeId) {
    const exchange = exchanges[exchangeId];
    try {
        // T·∫£i th√¥ng tin th·ªã tr∆∞·ªùng (bao g·ªìm maxLeverage)
        await exchange.loadMarkets();
        const markets = exchange.markets;

        // L·∫•y funding rates
        const fundingRatesRaw = await exchange.fetchFundingRates();

        const processedRates = {};
        for (const rate of Object.values(fundingRatesRaw)) {
            const symbol = cleanSymbol(rate.symbol);
            const marketInfo = markets[rate.symbol];

            if (rate && typeof rate.fundingRate === 'number' && rate.fundingRate < 0 && marketInfo) {
                processedRates[symbol] = {
                    symbol: symbol,
                    fundingRate: rate.fundingRate,
                    fundingTimestamp: rate.fundingTimestamp,
                    // L·∫•y max leverage, m·ªôt s·ªë s√†n c√≥ c·∫•u tr√∫c kh√°c nhau
                    maxLeverage: marketInfo.limits?.leverage?.max || marketInfo.info?.maxLeverage || 75 // M·∫∑c ƒë·ªãnh 75 n·∫øu kh√¥ng t√¨m th·∫•y
                };
            }
        }
        return { id: exchangeId, status: 'success', rates: processedRates, markets: markets };
    } catch (e) {
        console.error(`- L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ ${exchangeId.toUpperCase()}: ${e.message}`);
        return { id: exchangeId, status: 'error', rates: {}, markets: {} };
    }
}

/**
 * C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c s√†n.
 */
async function updateAllData() {
    console.log(`[${new Date().toISOString()}] B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu funding rates...`);
    const results = await Promise.all(EXCHANGE_IDS.map(id => fetchExchangeData(id)));

    results.forEach(result => {
        if (result.status === 'success') {
            exchangeData[result.id] = { rates: result.rates };
        }
    });
    lastFullUpdateTimestamp = new Date().toISOString();
    console.log("‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu funding th√†nh c√¥ng!");
}


/**
 * Logic t√≠nh to√°n c∆° h·ªôi Arbitrage theo 6 b∆∞·ªõc.
 */
function calculateArbitrageOpportunities() {
    const opportunities = [];
    const allSymbols = new Set();
    
    // Thu th·∫≠p t·∫•t c·∫£ c√°c symbol duy nh·∫•t tr√™n c√°c s√†n
    EXCHANGE_IDS.forEach(id => {
        if (exchangeData[id]) {
            Object.keys(exchangeData[id].rates).forEach(symbol => allSymbols.add(symbol));
        }
    });

    // B∆∞·ªõc 1 -> 5: L·∫∑p qua t·ª´ng symbol v√† t·ª´ng c·∫∑p s√†n
    allSymbols.forEach(symbol => {
        let bestOpportunityForSymbol = null;

        for (let i = 0; i < EXCHANGE_IDS.length; i++) {
            for (let j = i + 1; j < EXCHANGE_IDS.length; j++) {
                const exchange1Id = EXCHANGE_IDS[i];
                const exchange2Id = EXCHANGE_IDS[j];

                const rate1 = exchangeData[exchange1Id]?.rates[symbol];
                const rate2 = exchangeData[exchange2Id]?.rates[symbol];

                // Y√™u c·∫ßu coin ph·∫£i c√≥ tr√™n c·∫£ 2 s√†n
                if (!rate1 || !rate2) continue;

                // B∆∞·ªõc 1: T√≠nh ch√™nh l·ªách funding
                const fundingDiff = Math.abs(rate1.fundingRate - rate2.fundingRate);
                if (fundingDiff < FUNDING_DIFFERENCE_THRESHOLD) continue;
                
                // B∆∞·ªõc 2: T√≠nh max lev chung (l·∫•y gi√° tr·ªã nh·ªè h∆°n)
                const commonLeverage = Math.min(rate1.maxLeverage, rate2.maxLeverage);

                // B∆∞·ªõc 3: T√≠nh ph√≠ d·ª±a tr√™n ƒë√≤n b·∫©y chung
                let fee = 0;
                if (commonLeverage <= 25) fee = 5;
                else if (commonLeverage <= 50) fee = 10;
                else if (commonLeverage <= 75) fee = 15;
                else if (commonLeverage <= 100) fee = 20;
                else if (commonLeverage <= 125) fee = 25;
                else fee = 30; // Cho c√°c tr∆∞·ªùng h·ª£p > 125

                // B∆∞·ªõc 4: √Åp d·ª•ng c√¥ng th·ª©c t√≠nh %pnl ∆∞·ªõc t√≠nh
                // Ch√∫ √Ω: fundingRate l√† s·ªë √¢m, diff l√† s·ªë d∆∞∆°ng.
                const estimatedPnl = 100 * commonLeverage * fundingDiff - fee;
                
                // Ki·ªÉm tra ƒëi·ªÅu ki·ªán PNL
                if (estimatedPnl <= MINIMUM_PNL_THRESHOLD) continue;
                
                // B∆∞·ªõc 5: Ch·ªçn c·∫∑p s√†n c√≥ PNL cao nh·∫•t cho coin n√†y
                const currentOpportunity = {
                    coin: symbol,
                    exchanges: `${exchange1Id.split('usdm')[0]} / ${exchange2Id.split('usdm')[0]}`,
                    nextFundingTime: rate1.fundingTimestamp, // Gi·∫£ s·ª≠ th·ªùi gian funding l√† nh∆∞ nhau
                    estimatedPnl: parseFloat(estimatedPnl.toFixed(2)),
                };

                if (!bestOpportunityForSymbol || currentOpportunity.estimatedPnl > bestOpportunityForSymbol.estimatedPnl) {
                    bestOpportunityForSymbol = currentOpportunity;
                }
            }
        }
        
        if (bestOpportunityForSymbol) {
            opportunities.push(bestOpportunityForSymbol);
        }
    });
    
    // B∆∞·ªõc 6: S·∫Øp x·∫øp k·∫øt qu·∫£ theo PnL t·ª´ cao ƒë·∫øn th·∫•p
    arbitrageOpportunities = opportunities.sort((a, b) => b.estimatedPnl - a.estimatedPnl);
}


/**
 * V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ ki·ªÉm so√°t th·ªùi gian t√≠nh to√°n
 */
function masterLoop() {
    setInterval(async () => {
        const now = new Date();
        const currentMinute = now.getMinutes();

        // Ch·ªâ t√≠nh to√°n t·ª´ ph√∫t 10 ƒë·∫øn 59
        if (currentMinute >= 10 && currentMinute <= 59) {
            console.log(`[${now.toISOString()}] Ph√∫t ${currentMinute}, trong khung gi·ªù ho·∫°t ƒë·ªông. ƒêang c·∫≠p nh·∫≠t v√† t√≠nh to√°n...`);
            await updateAllData(); // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t
            calculateArbitrageOpportunities(); // T√≠nh to√°n l·∫°i
            console.log(`   => ƒê√£ t√¨m th·∫•y ${arbitrageOpportunities.length} c∆° h·ªôi arbitrage.`);
        } else {
            // Ngo√†i khung gi·ªù, gi·ªØ nguy√™n k·∫øt qu·∫£ c·ªßa ph√∫t 59
            console.log(`[${now.toISOString()}] Ph√∫t ${currentMinute}, ngo√†i khung gi·ªù ho·∫°t ƒë·ªông. ƒêang ch·ªù...`);
        }
    }, 60 * 1000); // Ch·∫°y m·ªói ph√∫t
}

// ----- KH·ªûI T·∫†O SERVER HTTP -----
const server = http.createServer((req, res) => {
    if (req.url === '/' && req.method === 'GET') {
        const filePath = path.join(__dirname, 'index.html');
        fs.readFile(filePath, (err, content) => {
            if (err) { res.writeHead(500, {'Content-Type': 'text/plain; charset=utf-8'}); res.end('L·ªói: Kh√¥ng t√¨m th·∫•y file index.html'); return; }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } else if (req.url === '/api/data' && req.method === 'GET') {
        // Tr·∫£ v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu m·ªõi
        const responseData = {
            lastUpdated: lastFullUpdateTimestamp,
            arbitrageData: arbitrageOpportunities,
            rawRates: {
                binance: Object.values(exchangeData.binanceusdm?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                bingx: Object.values(exchangeData.bingx?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                okx: Object.values(exchangeData.okx?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
                bitget: Object.values(exchangeData.bitget?.rates || {}).sort((a,b) => a.fundingRate - b.fundingRate),
            }
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(responseData));
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
    }
});

server.listen(PORT, async () => {
    console.log(`‚úÖ M√°y ch·ªß d·ªØ li·ªáu ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üë®‚Äçüíª Giao di·ªán ng∆∞·ªùi d√πng: http://localhost:${PORT}/`);
    console.log(`ü§ñ Endpoint d·ªØ li·ªáu: http://localhost:${PORT}/api/data`);
    
    // Ch·∫°y l·∫ßn ƒë·∫ßu ƒë·ªÉ c√≥ d·ªØ li·ªáu ngay l·∫≠p t·ª©c
    console.log("ƒêang l·∫•y d·ªØ li·ªáu l·∫ßn ƒë·∫ßu...");
    await updateAllData();
    calculateArbitrageOpportunities();
    console.log("Kh·ªüi t·∫°o ho√†n t·∫•t, b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh.");

    // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh
    masterLoop();
});
