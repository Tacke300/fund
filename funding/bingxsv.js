const http = require('http');
const https = require('https'); // Gi·ªØ l·∫°i v√¨ c√≥ th·ªÉ c·∫ßn cho fetch n·ªôi b·ªô kh√°c trong t∆∞∆°ng lai, nh∆∞ng kh√¥ng d√πng tr·ª±c ti·∫øp cho API s√†n n·ªØa
const fs = require('fs');
const path = require('path');
const ccxt = require('ccxt'); // Th∆∞ vi·ªán ch√≠nh
// const crypto = require('crypto'); // Kh√¥ng c√≤n c·∫ßn cho signing ri√™ng
// const Binance = require('node-binance-api'); // Kh√¥ng c√≤n c·∫ßn node-binance-api

const PORT = 5001;

// ----- C·∫§U H√åNH -----
// ƒê·∫£m b·∫£o ID c·ªßa c√°c s√†n kh·ªõp v·ªõi t√™n module trong CCXT
const EXCHANGE_IDS = ['binanceusdm', 'bingx', 'okx', 'bitget'];
const FUNDING_DIFFERENCE_THRESHOLD = 0.00001;
const MINIMUM_PNL_THRESHOLD = 15;
const IMMINENT_THRESHOLD_MINUTES = 15;
const LEVERAGE_CACHE_REFRESH_INTERVAL_MINUTES = 30;

// === QUAN TR·ªåNG: ƒêI·ªÄN API KEY V√Ä SECRET V√ÄO ƒê√ÇY ===
// API Key/Secret c·ªßa Binance (Binance Futures)
const binanceApiKey = 'cZ1Y2O0kggVEggEaPvhFcYQHS5b1EsT2OWZb8zdY9C0jGqNROvXRZHTJjnQ7OG4Q';
const binanceApiSecret = 'oU6pZFHgEvbpD9NmFXp5ZVnYFMQ7EIkBiz88TzvmC3SpT9nEf4fcDf0pEnFzoTc';
// API Key/Secret c·ªßa BingX
const bingxApiKey = 'p29V4jTkBelypG9Acd1t4dp6GqHwyTjYcOBq9AC501HVo0f4EN4m6Uv5F2CIr7dNaNTRvaQM0CqcPXfEFuA';
const bingxApiSecret = 'iTkMpmySRwQSawYBU3D5uFRZhH4UBdRYLOcPVrWbdAYa0go6Nohye1n7PS4XOcOmxQXYnUs1YRei5RvLPg';
// API Key/Secret/Passphrase c·ªßa OKX
const okxApiKey = 'c2f77f8b-a71a-41a3-8caf-3459dbdbaa0b';
const okxApiSecret = '6337107745922F1D457C472297513220';
const okxPassword = 'Altf4enter$';
// API Key/Secret c·ªßa Bitget
const bitgetApiKey = 'bg_a1ab0142c295779ac21123d5b59378e9';
const bitgetApiSecret = 'c12fbe21cd82274bde810b3d4aa7be778e5eee30ca5f47cf8ffc9b950787c961';
const bitgetApiPassword = 'Altf4enter';


// ----- BI·∫æN TO√ÄN C·ª§C -----
let leverageCache = {};
let exchangeData = {};
let arbitrageOpportunities = [];
let lastFullUpdateTimestamp = null;
let loopTimeoutId = null;

// Kh√¥ng c√≤n c·∫ßn client Binance ri√™ng, CCXT s·∫Ω x·ª≠ l√Ω t·∫•t c·∫£
// const binanceClient = new Binance().options({ APIKEY: binanceApiKey, APISECRET: binanceApiSecret });

const exchanges = {};
EXCHANGE_IDS.forEach(id => {
    const exchangeClass = ccxt[id];
    const config = { 'options': { 'defaultType': 'swap' } }; // Lu√¥n s·ª≠ d·ª•ng swap/futures

    // C·∫•u h√¨nh API Key/Secret/Passphrase cho CCXT
    if (id === 'binanceusdm') { config.apiKey = binanceApiKey; config.secret = binanceApiSecret; }
    else if (id === 'bingx') { config.apiKey = bingxApiKey; config.secret = bingxApiSecret; }
    else if (id === 'okx') { config.apiKey = okxApiKey; config.secret = okxApiSecret; if(okxPassword) config.password = okxPassword; }
    else if (id === 'bitget') { config.apiKey = bitgetApiKey; config.secret = bitgetApiSecret; if(bitgetApiPassword) config.password = bitgetApiPassword; }
    else { console.warn(`[AUTH] ‚ö†Ô∏è Thi·∫øu API Key/Secret ho·∫∑c c·∫•u h√¨nh cho ${id.toUpperCase()}.`); }

    exchanges[id] = new exchangeClass(config);
    exchanges[id].enableRateLimit = true; // B·∫≠t gi·ªõi h·∫°n t·ª∑ l·ªá m·∫∑c ƒë·ªãnh c·ªßa CCXT
});


const cleanSymbol = (symbol) => symbol.replace('/USDT', '').replace(':USDT', '').replace(/USDT$/, '');

// H√†m n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ BingX s·∫Ω d√πng CCXT
// const formatBingXApiSymbol = (ccxtSymbol) => {
//     let base = ccxtSymbol.replace(/\/USDT/g, '').replace(/:USDT/g, '').replace(/\/USDC/g, '').replace(/:USDC/g, '').replace(/-USDT$/g, '').replace(/-USDC$/g, '');
//     return `${base.toUpperCase()}-USDT`;
// };

// H√†m signBingX kh√¥ng c√≤n c·∫ßn thi·∫øt
// function signBingX(queryString, secret) {
//     return crypto.createHmac('sha256', secret).update(queryString).digest('hex');
// }

// === H√ÄM L·∫§Y ƒê√íN B·∫®Y T·ªêI ƒêA CHUNG (D√πng cho m·ªçi s√†n qua CCXT) ===
function getMaxLeverageFromMarketInfo(market, exchangeId) {
    // ∆Øu ti√™n market.limits.leverage.max (c√°ch chu·∫©n c·ªßa CCXT)
    if (typeof market?.limits?.leverage?.max === 'number' && market.limits.leverage.max > 0) {
        return market.limits.leverage.max;
    }
    // N·∫øu kh√¥ng c√≥, t√¨m trong market.info (t√πy thu·ªôc v√†o s√†n, CCXT s·∫Ω parse v√†o ƒë√¢y)
    if (typeof market?.info === 'object' && market.info !== null) {
        const possibleLeverageKeys = ['maxLeverage', 'leverage', 'initialLeverage', 'max_leverage'];
        for (const key of possibleLeverageKeys) {
            if (market.info.hasOwnProperty(key)) {
                const value = market.info[key];
                const leverage = parseInt(value, 10);
                if (!isNaN(leverage) && leverage > 1) return leverage;
            }
        }
    }
    return null;
}

// === KH·ªûI T·∫†O V√Ä L√ÄM M·ªöI B·ªò NH·ªö ƒê·ªÜM ƒê√íN B·∫®Y (T·∫•t c·∫£ d√πng CCXT) ===
async function initializeLeverageCache() {
    console.log(`[CACHE] B·∫Øt ƒë·∫ßu l√†m m·ªõi b·ªô nh·ªõ ƒë·ªám ƒë√≤n b·∫©y...`);
    const newCache = {};
    const promises = EXCHANGE_IDS.map(async (id) => {
        const exchange = exchanges[id];
        newCache[id] = {};
        try {
            // ∆Øu ti√™n fetchLeverageTiers n·∫øu s√†n h·ªó tr·ª£ (th∆∞·ªùng ƒë√°ng tin c·∫≠y h∆°n)
            if (exchange.has['fetchLeverageTiers']) {
                const leverageTiers = await exchange.fetchLeverageTiers();
                for (const symbol in leverageTiers) {
                    const tiers = leverageTiers[symbol];
                    if (Array.isArray(tiers) && tiers.length > 0) {
                        const parsedMaxLeverage = parseInt(Math.max(...tiers.map(t => t.leverage)), 10);
                        if (!isNaN(parsedMaxLeverage) && parsedMaxLeverage > 0) {
                            newCache[id][cleanSymbol(symbol)] = parsedMaxLeverage;
                        } else console.warn(`[CACHE] ‚ö†Ô∏è ${id.toUpperCase()}: ƒê√≤n b·∫©y kh√¥ng h·ª£p l·ªá cho ${symbol} t·ª´ fetchLeverageTiers.`);
                    }
                }
            } else { // D·ª± ph√≤ng: d√πng loadMarkets v√† getMaxLeverageFromMarketInfo
                await exchange.loadMarkets(true); // Lu√¥n t·∫£i l·∫°i ƒë·ªÉ c√≥ d·ªØ li·ªáu th·ªã tr∆∞·ªùng m·ªõi nh·∫•t
                for (const market of Object.values(exchange.markets)) {
                    // L·ªçc c√°c th·ªã tr∆∞·ªùng swap USDT
                    if (market.swap && market.quote === 'USDT') {
                        const symbolCleaned = cleanSymbol(market.symbol);
                        const maxLeverage = getMaxLeverageFromMarketInfo(market, id);
                        newCache[id][symbolCleaned] = maxLeverage; 
                        if (maxLeverage === null || maxLeverage <= 0) {
                            console.warn(`[CACHE] ‚ö†Ô∏è ${id.toUpperCase()}: ƒê√≤n b·∫©y kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y cho ${market.symbol}.`);
                        }
                    }
                }
            }
            const count = Object.values(newCache[id]).filter(v => typeof v === 'number' && v > 0).length;
            console.log(`[CACHE] ‚úÖ ${id.toUpperCase()}: L·∫•y th√†nh c√¥ng ${count} ƒë√≤n b·∫©y.`);
            return { id, status: 'fulfilled' };
        } catch (e) {
            console.error(`[CACHE] ‚ùå L·ªói nghi√™m tr·ªçng khi l·∫•y ƒë√≤n b·∫©y cho ${id.toUpperCase()}: ${e.message}.`);
            newCache[id] = {}; 
            return { id, status: 'rejected', reason: e.message };
        }
    });
    await Promise.allSettled(promises); // Ch·ªù t·∫•t c·∫£ c√°c promise ho√†n th√†nh
    leverageCache = newCache;
    console.log(`[CACHE] üéâ Ho√†n t·∫•t l√†m m·ªõi b·ªô nh·ªõ ƒë·ªám ƒë√≤n b·∫©y.`);
}

// === H√ÄM L·∫§Y FUNDING RATES CHO T·∫§T C·∫¢ C√ÅC S√ÄN (T·∫•t c·∫£ d√πng CCXT) ===
async function fetchFundingRatesForAllExchanges() {
    const freshData = {};
    const promises = EXCHANGE_IDS.map(async (id) => {
        try {
            const exchange = exchanges[id];
            let processedRates = {};
            
            // fetchFundingRates c·ªßa CCXT s·∫Ω l·∫•y c·∫£ funding rate v√† next funding time
            const fundingRatesRaw = await exchange.fetchFundingRates();
            for (const rate of Object.values(fundingRatesRaw)) {
                const symbolCleaned = cleanSymbol(rate.symbol);
                const maxLeverage = leverageCache[id]?.[symbolCleaned] || null; // L·∫•y t·ª´ cache ƒë√≤n b·∫©y ƒë√£ c√≥
                
                // CCXT cung c·∫•p fundingTimestamp ho·∫∑c nextFundingTime, d√πng fallback n·∫øu c·∫ßn
                const fundingTimestamp = rate.fundingTimestamp || rate.nextFundingTime || calculateNextStandardFundingTime();

                // Ki·ªÉm tra l·∫°i d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u
                if (typeof rate.fundingRate === 'number' && !isNaN(fundingTimestamp) && fundingTimestamp > 0) {
                     processedRates[symbolCleaned] = {
                        symbol: symbolCleaned,
                        fundingRate: rate.fundingRate,
                        fundingTimestamp: fundingTimestamp,
                        maxLeverage: maxLeverage
                    };
                } else {
                    console.warn(`[DATA] ‚ö†Ô∏è ${id.toUpperCase()}: D·ªØ li·ªáu funding rate ho·∫∑c timestamp kh√¥ng h·ª£p l·ªá cho ${rate.symbol}. Rate: ${rate.fundingRate}, Time: ${fundingTimestamp}.`);
                }
            }
            console.log(`[DATA] ‚úÖ ${id.toUpperCase()}: ƒê√£ l·∫•y th√†nh c√¥ng ${Object.keys(processedRates).length} funding rates.`);
            return { id, status: 'fulfilled', rates: processedRates };
        } catch (e) {
            console.error(`[DATA] ‚ùå L·ªói khi l·∫•y funding t·ª´ ${id.toUpperCase()}: ${e.message}.`);
            return { id, status: 'rejected', reason: e.message };
        }
    });
    const results = await Promise.allSettled(promises);

    results.forEach(result => {
        if (result.status === 'fulfilled') {
            freshData[result.value.id] = { rates: result.value.rates };
        } else {
            console.warn(`[DATA] ‚ö†Ô∏è ${result.value?.id?.toUpperCase() || 'UNKNOWN'}: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t funding rates. Nguy√™n nh√¢n: ${result.reason}.`);
            if (!exchangeData[result.value?.id]) { 
                exchangeData[result.value.id] = { rates: {} }; // Kh·ªüi t·∫°o r·ªóng n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu c≈©
            }
        }
    });
    return freshData;
}

// H√†m t√≠nh to√°n th·ªùi gian funding ti√™u chu·∫©n n·∫øu kh√¥ng c√≥ t·ª´ API (fallback)
function calculateNextStandardFundingTime() {
    const now = new Date();
    const fundingHoursUTC = [0, 8, 16];
    let nextHourUTC = fundingHoursUTC.find(h => now.getUTCHours() < h);
    const nextFundingDate = new Date(now);
    if (nextHourUTC === undefined) { // N·∫øu ƒë√£ qua 16:00 UTC, th√¨ l√† 00:00 UTC c·ªßa ng√†y h√¥m sau
        nextHourUTC = fundingHoursUTC[0];
        nextFundingDate.setUTCDate(now.getUTCDate() + 1);
    }
    nextFundingDate.setUTCHours(nextHourUTC, 0, 0, 0); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y v·ªÅ 0
    return nextFundingDate.getTime();
}

// === LOGIC T√çNH TO√ÅN C∆† H·ªòI ARBITRAGE ===
function calculateArbitrageOpportunities() {
    const allFoundOpportunities = [];
    const currentExchangeData = JSON.parse(JSON.stringify(exchangeData)); // Deep copy ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh b·∫•t bi·∫øn

    for (let i = 0; i < EXCHANGE_IDS.length; i++) {
        for (let j = i + 1; j < EXCHANGE_IDS.length; j++) {
            const exchange1Id = EXCHANGE_IDS[i], exchange2Id = EXCHANGE_IDS[j];
            const exchange1Rates = currentExchangeData[exchange1Id]?.rates, exchange2Rates = currentExchangeData[exchange2Id]?.rates;

            // B·ªè qua n·∫øu thi·∫øu d·ªØ li·ªáu rates cho m·ªôt trong hai s√†n
            if (!exchange1Rates || !exchange2Rates || Object.keys(exchange1Rates).length === 0 || Object.keys(exchange2Rates).length === 0) {
                continue;
            }

            const commonSymbols = Object.keys(exchange1Rates).filter(symbol => exchange2Rates[symbol]);

            // B·ªè qua n·∫øu kh√¥ng c√≥ symbol chung
            if (commonSymbols.length === 0) {
                continue;
            }

            for (const symbol of commonSymbols) {
                const rate1Data = exchange1Rates[symbol];
                const rate2Data = exchange2Rates[symbol];

                // Ki·ªÉm tra ƒë√≤n b·∫©y h·ª£p l·ªá: ph·∫£i l√† s·ªë v√† > 0
                if (typeof rate1Data.maxLeverage !== 'number' || rate1Data.maxLeverage <= 0 ||
                    typeof rate2Data.maxLeverage !== 'number' || rate2Data.maxLeverage <= 0) {
                    continue; 
                }

                // Ki·ªÉm tra Funding Rate v√† Timestamp c√≥ t·ªìn t·∫°i v√† h·ª£p l·ªá kh√¥ng
                if (typeof rate1Data.fundingRate !== 'number' || typeof rate2Data.fundingRate !== 'number' ||
                    !rate1Data.fundingTimestamp || rate1Data.fundingTimestamp <= 0 || !rate2Data.fundingTimestamp || rate2Data.fundingTimestamp <= 0) {
                    continue; 
                }

                let longExchange, shortExchange, longRate, shortRate;
                if (rate1Data.fundingRate > rate2Data.fundingRate) {
                    shortExchange = exchange1Id; shortRate = rate1Data;
                    longExchange = exchange2Id; longRate = rate2Data;
                } else {
                    shortExchange = exchange2Id; shortRate = rate2Data;
                    longExchange = exchange1Id; longRate = rate1Data;
                }

                const fundingDiff = shortRate.fundingRate - longRate.fundingRate;

                // Ch·ªâ xem x√©t n·∫øu c√≥ s·ª± kh√°c bi·ªát d∆∞∆°ng ƒë√°ng k·ªÉ
                if (fundingDiff <= FUNDING_DIFFERENCE_THRESHOLD) {
                    continue;
                }

                const commonLeverage = Math.min(longRate.maxLeverage, shortRate.maxLeverage);
                const estimatedPnl = fundingDiff * commonLeverage * 100; // PnL ∆∞·ªõc t√≠nh cho $100 v·ªën

                if (estimatedPnl >= MINIMUM_PNL_THRESHOLD) {
                    const finalFundingTime = Math.max(rate1Data.fundingTimestamp, rate2Data.fundingTimestamp);
                    const minutesUntilFunding = (finalFundingTime - Date.now()) / (1000 * 60);
                    const isImminent = minutesUntilFunding > 0 && minutesUntilFunding <= IMMINENT_THRESHOLD_MINUTES;

                    allFoundOpportunities.push({
                        coin: symbol,
                        exchanges: `${shortExchange.replace('usdm', '')} / ${longExchange.replace('usdm', '')}`,
                        fundingDiff: parseFloat(fundingDiff.toFixed(6)),
                        nextFundingTime: finalFundingTime,
                        nextFundingTimeUTC: new Date(finalFundingTime).toISOString(),
                        commonLeverage: parseFloat(commonLeverage.toFixed(2)),
                        estimatedPnl: parseFloat(estimatedPnl.toFixed(2)),
                        isImminent: isImminent,
                        details: {
                            shortExchange: shortExchange,
                            shortRate: shortRate.fundingRate,
                            shortLeverage: shortRate.maxLeverage,
                            longExchange: longExchange,
                            longRate: longRate.fundingRate,
                            longLeverage: longRate.maxLeverage,
                            minutesUntilFunding: parseFloat(minutesUntilFunding.toFixed(1))
                        }
                    });
                }
            }
        }
    }
    arbitrageOpportunities = allFoundOpportunities.sort((a, b) => {
        if (a.nextFundingTime < b.nextFundingTime) return -1;
        if (a.nextFundingTime > b.nextFundingTime) return 1;
        return b.estimatedPnl - a.estimatedPnl;
    });
}

// === V√íNG L·∫∂P CH√çNH C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU ===
async function masterLoop() {
    console.log(`\n[LOOP] B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p c·∫≠p nh·∫≠t l√∫c ${new Date().toLocaleTimeString()} (UTC: ${new Date().toUTCString()})...`);
    
    // 1. C·∫≠p nh·∫≠t cache ƒë√≤n b·∫©y (t·∫•t c·∫£ d√πng CCXT)
    await initializeLeverageCache(); 

    // 2. L·∫•y d·ªØ li·ªáu funding rate t·ª´ t·∫•t c·∫£ c√°c s√†n (t·∫•t c·∫£ d√πng CCXT)
    const freshFundingData = await fetchFundingRatesForAllExchanges();
    exchangeData = freshFundingData; // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o bi·∫øn to√†n c·ª•c

    // 3. T√≠nh to√°n c∆° h·ªôi arbitrage
    calculateArbitrageOpportunities();
    lastFullUpdateTimestamp = new Date().toISOString();
    console.log(`[LOOP]   => T√¨m th·∫•y ${arbitrageOpportunities.length} c∆° h·ªôi. V√≤ng l·∫∑p ho√†n t·∫•t.`);
    scheduleNextLoop();
}

// === H√ÄM L√äN L·ªäCH CHO V√íNG L·∫∂P TI·∫æP THEO ===
function scheduleNextLoop() {
    clearTimeout(loopTimeoutId);
    const now = new Date();
    // L√™n l·ªãch ƒë·ªÉ ch·∫°y 5 gi√¢y sau ƒë·∫ßu ph√∫t ti·∫øp theo (v√≠ d·ª•: 00:00:05, 00:01:05)
    const delaySeconds = (60 - now.getSeconds() + 5) % 60; 
    const delayMs = (delaySeconds === 0 ? 60 : delaySeconds) * 1000;
    console.log(`[SCHEDULER] V√≤ng l·∫∑p k·∫ø ti·∫øp sau ${delaySeconds.toFixed(1)} gi√¢y.`);
    loopTimeoutId = setTimeout(masterLoop, delayMs);
}

// === KH·ªûI T·∫†O SERVER HTTP ===
const server = http.createServer((req, res) => {
    // Ph·ª•c v·ª• file index.html
    if (req.url === '/' && req.method === 'GET') {
        fs.readFile(path.join(__dirname, 'index.html'), (err, content) => {
            if (err) { res.writeHead(500); res.end('L·ªói khi ƒë·ªçc index.html'); return; }
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
            res.end(content);
        });
    } 
    // Endpoint API ƒë·ªÉ client fetch d·ªØ li·ªáu
    else if (req.url === '/api/data' && req.method === 'GET') {
        const responseData = {
            lastUpdated: lastFullUpdateTimestamp,
            arbitrageData: arbitrageOpportunities,
            rawRates: {
                // D·ªØ li·ªáu raw rates t·ª´ t·∫•t c·∫£ c√°c s√†n
                binance: Object.values(exchangeData.binanceusdm?.rates || {}),
                bingx: Object.values(exchangeData.bingx?.rates || {}), 
                okx: Object.values(exchangeData.okx?.rates || {}),
                bitget: Object.values(exchangeData.bitget?.rates || {}),
            }
        };
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(responseData));
    } 
    // X·ª≠ l√Ω c√°c request kh√¥ng kh·ªõp
    else {
        res.writeHead(404); res.end('Not Found');
    }
});

// === KH·ªûI ƒê·ªòNG SERVER ===
server.listen(PORT, async () => {
    console.log(`‚úÖ M√°y ch·ªß d·ªØ li·ªáu (S·ª¨ D·ª§NG HO√ÄN TO√ÄN CCXT) ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh ngay khi server kh·ªüi ƒë·ªông
    await masterLoop(); 
    // ƒê·∫∑t l·ªãch l√†m m·ªõi cache ƒë√≤n b·∫©y ƒë·ªãnh k·ª≥ (n·∫øu initializeLeverageCache kh√¥ng ƒë∆∞·ª£c g·ªçi trong masterLoop ƒë·ªß th∆∞·ªùng xuy√™n)
    // Hi·ªán t·∫°i masterLoop ƒë√£ g·ªçi initializeLeverageCache() ·ªü m·ªói v√≤ng l·∫∑p, n√™n d√≤ng n√†y c√≥ th·ªÉ th·ª´a.
    // Gi·ªØ l·∫°i n·∫øu b·∫°n mu·ªën c√≥ m·ªôt l·ªãch tr√¨nh refresh leverage ri√™ng bi·ªát, √≠t th∆∞·ªùng xuy√™n h∆°n.
    setInterval(initializeLeverageCache, LEVERAGE_CACHE_REFRESH_INTERVAL_MINUTES * 60 * 1000);
});
