const http = require('http');
const https = require('https');
const crypto = require('crypto');
const { URLSearchParams } = require('url');

// Import c√°c API Key v√† Secret t·ª´ file config.js
// ƒê·∫£m b·∫£o file config.js t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v√† c√≥ n·ªôi dung t∆∞∆°ng t·ª±:
// module.exports = {
//     bingxApiKey: 'YOUR_BINGX_API_KEY',
//     bingxApiSecret: 'YOUR_BINGX_API_SECRET',
// };
const {
    bingxApiKey, bingxApiSecret,
} = require('./config.js');

const BINGX_BASE_HOST = 'open-api.bingx.com';
const PORT = 1997; // C·ªïng cho server HTTP

// C√°c coin c·ª• th·ªÉ m√† B√¨nh mu·ªën l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
// ƒê√É ƒêI·ªÄU CH·ªàNH FORMAT SYMBOL TH√ÄNH 'XXX-USDT' ƒê·ªÇ KH·ªöP V·ªöI Y√äU C·∫¶U C·ª¶A BINGX API
// C·∫≠p nh·∫≠t BIOX th√†nh BIO, WAVES th√†nh WAVE theo y√™u c·∫ßu
const TARGET_COINS = ['LPT-USDT', 'CAT-USDT', 'BIO-USDT', 'WAVE-USDT'];

// Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu funding rate m·ªõi nh·∫•t (bao g·ªìm t·∫•t c·∫£ c√°c tr∆∞·ªùng)
let latestFundingData = {
    timestamp: null,
    data: []
};

/**
 * Chu·∫©n h√≥a symbol.
 * Chuy·ªÉn XXX-USDT th√†nh XXXUSDT cho m·ª•c ƒë√≠ch hi·ªÉn th·ªã/l∆∞u tr·ªØ n·∫øu c·∫ßn.
 */
const cleanSymbol = (symbol) => {
    let cleaned = symbol.toUpperCase();
    // Lo·∫°i b·ªè c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt v√† chu·∫©n h√≥a
    cleaned = cleaned.replace('_UMCBL', '');
    cleaned = cleaned.replace(/[\/:_]/g, '');
    cleaned = cleaned.replace(/-USDT$/, 'USDT'); // Chuy·ªÉn XXX-USDT th√†nh XXXUSDT
    cleaned = cleaned.replace(/-USDC$/, 'USDC'); // Chuy·ªÉn XXX-USDC th√†nh XXXUSDC
    cleaned = cleaned.replace(/^\d+/, ''); // Lo·∫°i b·ªè s·ªë ·ªü ƒë·∫ßu n·∫øu c√≥
    const usdtIndex = cleaned.indexOf('USDT');
    const usdcIndex = cleaned.indexOf('USDC');

    if (usdtIndex !== -1) {
        cleaned = cleaned.substring(0, usdtIndex) + 'USDT';
    } else if (usdcIndex !== -1) {
        cleaned = cleaned.substring(0, usdcIndex) + 'USDC';
    } else if (symbol.toUpperCase().includes('USDT') && !cleaned.endsWith('USDT')) {
        cleaned = cleaned + 'USDT';
    } else if (symbol.toUpperCase().includes('USDC') && !cleaned.endsWith('USDC')) {
        cleaned = cleaned + 'USDC';
    }
    return cleaned;
};

/**
 * T·∫°o ch·ªØ k√Ω HMAC SHA256 cho c√°c y√™u c·∫ßu ƒë√£ x√°c th·ª±c.
 * @param {string} queryString Chu·ªói tham s·ªë ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.
 * @param {string} apiSecret API Secret c·ªßa s√†n giao d·ªãch.
 * @returns {string} Ch·ªØ k√Ω hex.
 */
function createSignature(queryString, apiSecret) {
    return crypto.createHmac('sha256', apiSecret)
        .update(queryString)
        .digest('hex');
}

/**
 * Th·ª±c hi·ªán m·ªôt HTTP/HTTPS request.
 * @param {string} method Ph∆∞∆°ng th·ª©c HTTP (GET, POST, PUT, DELETE).
 * @param {string} hostname T√™n m√°y ch·ªß (v√≠ d·ª•: open-api.bingx.com).
 * @param {string} path ƒê∆∞·ªùng d·∫´n API (v√≠ d·ª•: /openApi/swap/v2/quote/fundingRate).
 * @param {object} headers C√°c header HTTP t√πy ch·ªçn.
 * @param {string} postData D·ªØ li·ªáu ƒë·ªÉ g·ª≠i trong body request (cho POST/PUT/DELETE).
 * @returns {Promise<string>} D·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ server d∆∞·ªõi d·∫°ng chu·ªói.
 */
async function makeHttpRequest(method, hostname, path, headers = {}, postData = '') {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: hostname,
            port: 443, // M·∫∑c ƒë·ªãnh d√πng HTTPS
            path: path,
            method: method,
            headers: { ...headers, 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' }, // Th√™m User-Agent ƒë·ªÉ tr√°nh b·ªã t·ª´ ch·ªëi
            timeout: 20000 // Timeout 20 gi√¢y
        };

        const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    resolve(data);
                } else {
                    reject({
                        code: res.statusCode,
                        msg: `HTTP L·ªói: ${res.statusCode} ${res.statusMessage}`,
                        url: `${hostname}${path}`,
                        rawResponse: data // Bao g·ªìm rawResponse trong l·ªói ƒë·ªÉ debug
                    });
                }
            });
        });

        req.on('error', (e) => reject({ code: 'NETWORK_ERROR', msg: `${e.message} (khi g·ªçi ${hostname}${path})` }));
        req.on('timeout', () => {
            req.destroy();
            reject({ code: 'TIMEOUT_ERROR', msg: `Request timed out sau ${options.timeout / 1000}s (khi g·ªçi ${hostname}${path})` });
        });

        if (postData && (method === 'POST' || method === 'PUT' || method === 'DELETE')) req.write(postData);
        req.end();
    });
}

/**
 * L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu funding tr·ª±c ti·∫øp t·ª´ BingX API cho m·ªôt symbol c·ª• th·ªÉ.
 * Bao g·ªìm logging chi ti·∫øt v·ªÅ API call v√† raw response.
 * @param {string} symbol Symbol c·ªßa c·∫∑p giao d·ªãch (v√≠ d·ª•: "LPT-USDT").
 * @returns {Promise<object|null>} ƒê·ªëi t∆∞·ª£ng ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ API, ho·∫∑c null n·∫øu c√≥ l·ªói.
 */
async function getBingxFundingDataDirect(symbol) {
    if (!bingxApiKey || !bingxApiSecret) {
        console.error(`[BINGX_FUNDING] ‚ùå Thi·∫øu API Key ho·∫∑c Secret Key cho BingX. Vui l√≤ng ki·ªÉm tra file config.js`);
        return null;
    }

    // T·∫°o c√°c tham s·ªë c·∫ßn thi·∫øt cho y√™u c·∫ßu ƒë√£ k√Ω
    const params = new URLSearchParams({
        symbol: symbol,
        timestamp: Date.now(),
        recvWindow: 5000 // Th·ªùi gian ch·∫•p nh·∫≠n ch√™nh l·ªách timestamp (5 gi√¢y)
    }).toString();

    const signature = createSignature(params, bingxApiSecret);
    const urlPath = `/openApi/swap/v2/quote/fundingRate?${params}&signature=${signature}`;
    const headers = { 'X-BX-APIKEY': bingxApiKey };

    // Log chi ti·∫øt v·ªÅ y√™u c·∫ßu API
    console.log(`[BINGX_API_CALL] G·ªçi BingX API cho ${symbol}: ${BINGX_BASE_HOST}${urlPath}`);

    try {
        const rawResponse = await makeHttpRequest('GET', BINGX_BASE_HOST, urlPath, headers);
        // Log to√†n b·ªô ph·∫£n h·ªìi raw t·ª´ API
        console.log(`[BINGX_RAW_RESPONSE] Nh·∫≠n raw data cho ${symbol}: ${rawResponse.substring(0, Math.min(rawResponse.length, 500))}`); // Gi·ªõi h·∫°n log raw response ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n
        const json = JSON.parse(rawResponse);

        if (json.code === 0 && Array.isArray(json.data) && json.data.length > 0) {
            const firstData = json.data[0];

            // Ki·ªÉm tra c√°c tr∆∞·ªùng quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu c√≥ √Ω nghƒ©a
            // N·∫øu kh√¥ng c√≥ fundingRate ho·∫∑c fundingTime, c√≥ th·ªÉ ƒë√¢y kh√¥ng ph·∫£i l√† d·ªØ li·ªáu funding h·ª£p l·ªá
            if (typeof firstData.fundingRate === 'undefined' || typeof firstData.fundingTime === 'undefined') {
                console.warn(`[BINGX_FUNDING_WARN] ${symbol}: D·ªØ li·ªáu fundingRate ho·∫∑c fundingTime b·ªã thi·∫øu. Raw: ${JSON.stringify(firstData)}`);
                return null;
            }

            // C√≥ th·ªÉ th√™m ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† parse n·∫øu c·∫ßn x·ª≠ l√Ω s·ªë
            const fundingRate = parseFloat(firstData.fundingRate);
            if (isNaN(fundingRate)) {
                console.warn(`[BINGX_FUNDING_WARN] ${symbol}: fundingRate kh√¥ng parse ƒë∆∞·ª£c s·ªë. Value: ${firstData.fundingRate}`);
                // return null; // T√πy ch·ªçn: tr·∫£ v·ªÅ null n·∫øu fundingRate kh√¥ng h·ª£p l·ªá
            }

            const fundingTime = parseInt(firstData.fundingTime, 10);
            if (isNaN(fundingTime) || fundingTime <= 0) {
                console.warn(`[BINGX_FUNDING_WARN] ${symbol}: fundingTime kh√¥ng parse ƒë∆∞·ª£c s·ªë ho·∫∑c kh√¥ng h·ª£p l·ªá. Value: ${firstData.fundingTime}`);
                // return null; // T√πy ch·ªçn: tr·∫£ v·ªÅ null n·∫øu fundingTime kh√¥ng h·ª£p l·ªá
            }

            // Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c tr∆∞·ªùng t·ª´ API, k√®m theo symbol ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
            return {
                cleanedSymbol: cleanSymbol(firstData.symbol), // Th√™m symbol ƒë√£ chu·∫©n h√≥a
                ...firstData // Spread operator ƒë·ªÉ ƒë∆∞a t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa firstData v√†o ƒë√¢y
            };
        } else {
            // Log l·ªói API ho·∫∑c tr∆∞·ªùng h·ª£p kh√¥ng c√≥ d·ªØ li·ªáu
            console.error(`[BINGX_FUNDING_ERROR] ‚ùå L·ªói API ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu funding cho ${symbol}. Code: ${json.code}, Msg: ${json.msg || 'N/A'}. Raw: ${rawResponse.substring(0, Math.min(rawResponse.length, 500))}`);
            return null;
        }
    } catch (e) {
        // Log c√°c l·ªói request (m·∫°ng, timeout, JSON parse)
        console.error(`[BINGX_FUNDING_REQUEST_ERROR] ‚ùå L·ªói request khi l·∫•y funding data cho ${symbol}: ${e.msg || e.message}.`);
        if (e.rawResponse) {
             console.error(`[BINGX_FUNDING_RAW_ERROR_DETAIL] ${symbol} Raw response: ${e.rawResponse.substring(0, Math.min(e.rawResponse.length, 500))}`);
        }
        return null;
    }
}

/**
 * Fetch t·∫•t c·∫£ d·ªØ li·ªáu funding cho c√°c coin m·ª•c ti√™u c·ªßa B√¨nh v√† c·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c.
 */
async function fetchFundingRatesForBinh() {
    console.log(`\n[BINH_SCRIPT] üöÄ B·∫Øt ƒë·∫ßu l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu funding BingX cho c√°c coin: ${TARGET_COINS.join(', ')}`);
    const currentResults = [];

    for (const coin of TARGET_COINS) {
        const bingxSymbol = coin;
        try {
            // G·ªçi h√†m m·ªõi ƒë·ªÉ l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
            const data = await getBingxFundingDataDirect(bingxSymbol);
            if (data) {
                currentResults.push(data); // `data` b√¢y gi·ªù ch·ª©a t·∫•t c·∫£ c√°c tr∆∞·ªùng t·ª´ API
                // Log ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã fundingRate v√† nextFundingTime nh∆∞ v√≠ d·ª•,
                // nh∆∞ng `data` ch·ª©a nhi·ªÅu h∆°n trong `currentResults`.
                const fundingRate = parseFloat(data.fundingRate || 0); // ƒê·∫£m b·∫£o l√† s·ªë ƒë·ªÉ format
                const fundingTime = parseInt(data.fundingTime, 10);
                const nextFundingTime = !isNaN(fundingTime) && fundingTime > 0 ? new Date(fundingTime).toISOString() : 'N/A';

                console.log(`[BINH_SCRIPT] ‚úÖ ${data.symbol}: Funding Rate = ${fundingRate.toFixed(6)}, Next Funding Time = ${nextFundingTime}`);
            } else {
                console.warn(`[BINH_SCRIPT] ‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu funding h·ª£p l·ªá cho ${coin}.`);
            }
        } catch (error) {
            console.error(`[BINH_SCRIPT] ‚ùå L·ªói b·∫•t ng·ªù khi l·∫•y funding cho ${coin}: ${error.message}`);
        }
    }
    console.log('\n[BINH_SCRIPT] Ho√†n t·∫•t l·∫•y d·ªØ li·ªáu funding BingX.');

    // C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t (ƒë√£ bao g·ªìm t·∫•t c·∫£ c√°c tr∆∞·ªùng)
    latestFundingData = {
        timestamp: new Date().toISOString(),
        data: currentResults // currentResults b√¢y gi·ªù ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng ƒë·∫ßy ƒë·ªß t·ª´ API
    };

    // Log t·ªïng h·ª£p k·∫øt qu·∫£ - in ra to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ th·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
    console.log('--- K·∫øt qu·∫£ t·ªïng h·ª£p ---');
    if (currentResults.length > 0) {
        currentResults.forEach(res => {
            console.log(`Coin: ${res.symbol}, To√†n b·ªô d·ªØ li·ªáu: ${JSON.stringify(res, null, 2)}`);
        });
    } else {
        console.log('Kh√¥ng c√≥ d·ªØ li·ªáu funding n√†o ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng.');
    }
    return currentResults;
}

// ----- KH·ªûI T·∫†O SERVER HTTP -----
const server = http.createServer((req, res) => {
    // Endpoint ƒë·ªÉ l·∫•y d·ªØ li·ªáu funding rate
    if (req.url === '/api/funding' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
        // G·ª≠i to√†n b·ªô ƒë·ªëi t∆∞·ª£ng latestFundingData bao g·ªìm t·∫•t c·∫£ c√°c tr∆∞·ªùng
        res.end(JSON.stringify(latestFundingData, null, 2));
        console.log(`[SERVER] G·ª≠i d·ªØ li·ªáu funding (bao g·ªìm t·∫•t c·∫£ c√°c tr∆∞·ªùng) ƒë·∫øn client. C·∫≠p nh·∫≠t cu·ªëi: ${latestFundingData.timestamp}`);
    }
    // Endpoint g·ªëc ho·∫∑c c√°c endpoint kh√°c
    else {
        res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('Endpoint kh√¥ng t√¨m th·∫•y. Vui l√≤ng truy c·∫≠p /api/funding ƒë·ªÉ xem d·ªØ li·ªáu funding.');
    }
});

// L·∫Øng nghe c·ªïng v√† kh·ªüi ch·∫°y c√°c t√°c v·ª• ban ƒë·∫ßu
server.listen(PORT, async () => {
    console.log(`‚úÖ M√°y ch·ªß d·ªØ li·ªáu BingX Funding cho B√¨nh ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`B·∫°n c√≥ th·ªÉ xem t·∫•t c·∫£ d·ªØ li·ªáu funding rate t·∫°i http://localhost:${PORT}/api/funding`);

    // Ch·∫°y fetch funding data l·∫ßn ƒë·∫ßu ti√™n khi server kh·ªüi ƒë·ªông
    await fetchFundingRatesForBinh();

    // L·∫≠p l·ªãch ƒë·ªÉ fetch funding data ƒë·ªãnh k·ª≥ m·ªói 5 ph√∫t (300 gi√¢y)
    setInterval(async () => {
        console.log(`\n--- B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ƒë·ªãnh k·ª≥ (5 ph√∫t) l√∫c ${new Date().toLocaleTimeString()} ---`);
        await fetchFundingRatesForBinh();
        console.log(`--- K·∫øt th√∫c v√≤ng l·∫∑p ƒë·ªãnh k·ª≥ ---`);
    }, 5 * 60 * 1000);

    console.log(`[BINH_SCRIPT] ‚úÖ L·∫≠p l·ªãch l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu funding BingX cho c√°c coin m·ª•c ti√™u m·ªói 5 ph√∫t.`);
});
