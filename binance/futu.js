import https from 'https';
import crypto from 'crypto';
import express from 'express';
import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url'; // ƒê√£ s·ª≠a l·ªói c√∫ ph√°p t·∫°i ƒë√¢y

// L·∫•y __filename v√† __dirname trong ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- C·∫§U H√åNH API KEY V√Ä SECRET KEY (NH·∫¨P TR·ª∞C TI·∫æP) ---
const API_KEY = "cZ1Y2O0kggVEggEaPvhFcYQHS5b1EsT2OWZb8zdY9C0jGqNROvXRZHTJjnQ7OG4Q";
const SECRET_KEY = "oU6pZFHgEvbpD9NmFXp5ZVnYFMQ7EIkBiz88aTzvmC3SpT9nEf4fcDf0pEnFzoTc"; 

// --- BASE URL C·ª¶A BINANCE FUTURES API ---
const BASE_HOST = 'fapi.binance.com';

let serverTimeOffset = 0; // Offset th·ªùi gian ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi server Binance

// Bi·∫øn cache cho exchangeInfo ƒë·ªÉ tr√°nh g·ªçi API l·∫∑p l·∫°i
let exchangeInfoCache = null;

// Bi·∫øn c·ªù ƒë·ªÉ tr√°nh g·ª≠i nhi·ªÅu l·ªánh ƒë√≥ng c√πng l√∫c
let isClosingPosition = false;

// Bi·∫øn c·ªù ƒëi·ªÅu khi·ªÉn tr·∫°ng th√°i bot (ch·∫°y/d·ª´ng)
let botRunning = false;
let botStartTime = null; // Th·ªùi ƒëi·ªÉm bot ƒë∆∞·ª£c kh·ªüi ƒë·ªông

// Bi·∫øn ƒë·ªÉ theo d√µi v·ªã th·∫ø ƒëang m·ªü
let currentOpenPosition = null;
// Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ setInterval cho vi·ªác ki·ªÉm tra v·ªã th·∫ø ƒëang m·ªü
let positionCheckInterval = null;
// Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ setTimeout cho l·∫ßn ch·∫°y ti·∫øp theo c·ªßa chu k·ª≥ ch√≠nh (runTradingLogic)
let nextScheduledTimeout = null;
// Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ setTimeout cho vi·ªác t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i bot sau l·ªói nghi√™m tr·ªçng
let retryBotTimeout = null;

// Bi·∫øn v√† interval cho vi·ªác hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c tr√™n giao di·ªán web
let currentCountdownMessage = "Kh√¥ng c√≥ l·ªánh ƒëang ch·ªù ƒë√≥ng.";
let countdownIntervalFrontend = null;

// === START - BI·∫æN QU·∫¢N L√ù L·ªñI V√Ä T·∫¶N SU·∫§T LOG ===
let consecutiveApiErrors = 0; // ƒê·∫øm s·ªë l·ªói API li√™n ti·∫øp
const MAX_CONSECUTIVE_API_ERRORS = 5; // S·ªë l·ªói API li√™n ti·∫øp t·ªëi ƒëa cho ph√©p tr∆∞·ªõc khi t·∫°m d·ª´ng bot
const ERROR_RETRY_DELAY_MS = 60000; // ƒê·ªô tr·ªÖ (ms) khi bot t·∫°m d·ª´ng sau nhi·ªÅu l·ªói (v√≠ d·ª•: 60 gi√¢y)

// Cache c√°c th√¥ng ƒëi·ªáp log ƒë·ªÉ tr√°nh spam qu√° nhi·ªÅu d√≤ng gi·ªëng nhau li√™n ti·∫øp
const logCounts = {}; // { messageHash: { count: number, lastLoggedTime: Date } }
const LOG_COOLDOWN_MS = 5000; // 5 gi√¢y cooldown cho c√°c log kh√¥ng quan tr·ªçng l·∫∑p l·∫°i

// Custom Error class cho l·ªói API nghi√™m tr·ªçng
class CriticalApiError extends Error {
    constructor(message) {
        super(message);
        this.name = 'CriticalApiError';
    }
}
// === END - BI·∫æN QU·∫¢N L√ù L·ªñI V√Ä T·∫¶N SU·∫§T LOG ===


// --- C·∫§U H√åNH BOT C√ÅC THAM S·ªê GIAO D·ªäCH M·ªöI ---
const TARGET_SYMBOL = 'NEIROUSDT'; // ƒê·ªìng coin m·ª•c ti√™u
const TARGET_LEVERAGE = 75; // ƒê√≤n b·∫©y t·ªëi ƒëa
const MIN_USDT_BALANCE_TO_OPEN = 0.01; // S·ªë d∆∞ USDT t·ªëi thi·ªÉu ƒë·ªÉ bot ƒë∆∞·ª£c ph√©p m·ªü l·ªánh

// V·ªën ban ƒë·∫ßu cho m·ªói l·ªánh (USD)
const AMOUNT_USDT_PER_TRADE_INITIAL = 0.08; // 0.08 USD

// C·∫•u h√¨nh Take Profit & Stop Loss
const TAKE_PROFIT_PERCENTAGE_INITIAL = 0.30; // 30% l·ª£i nhu·∫≠n tr√™n v·ªën ban ƒë·∫ßu
const STOP_LOSS_PERCENTAGE_INITIAL = 0.18; // 18% thua l·ªó tr√™n v·ªën ban ƒë·∫ßu

// C·∫•u h√¨nh Martingale
const MARTINGALE_MAX_LEVEL = 5; // S·ªë l·∫ßn g·∫•p l·ªánh t·ªëi ƒëa
const MARTINGALE_MULTIPLIER = 2; // H·ªá s·ªë g·∫•p l·ªánh (v√≠ d·ª•: x2 v·ªën)
const TAKE_PROFIT_PERCENTAGE_MARTINGALE = 0.005; // 0.5% l·ª£i nhu·∫≠n tr√™n t·ªïng gi√° tr·ªã v·ªã th·∫ø cho m·ªói l·ªánh g·∫•p
const MIN_TICKS_DISTANCE_FOR_SL_TP = 5; // S·ªë l∆∞·ª£ng tick t·ªëi thi·ªÉu m√† SL/TP ph·∫£i c√°ch gi√° v√†o l·ªánh.

// Bi·∫øn tr·∫°ng th√°i Martingale
let martingaleLevel = 0; // Level Martingale hi·ªán t·∫°i (0 = l·ªánh ban ƒë·∫ßu)
let currentTradeCapital = AMOUNT_USDT_PER_TRADE_INITIAL; // V·ªën cho l·ªánh hi·ªán t·∫°i
let currentTradeSide = 'LONG'; // H∆∞·ªõng l·ªánh hi·ªán t·∫°i ('LONG' ho·∫∑c 'SHORT')

// L·ªãch s·ª≠ PNL c·ªßa bot
let totalPnlUsdt = 0;
let totalInitialCapitalUsed = 0; // T·ªïng v·ªën ƒë√£ d√πng t·ª´ l√∫c bot ch·∫°y, ƒë·ªÉ t√≠nh % PNL

// H·∫±ng s·ªë cho th·ªùi gian ch·ªù h·ªßy l·ªánh sau khi ƒë√≥ng v·ªã th·∫ø
const DELAY_BEFORE_CANCEL_ORDERS_MS = 6000; // 6 gi√¢y

// S·ªë l·∫ßn th·ª≠ l·∫°i ki·ªÉm tra v·ªã th·∫ø sau khi ƒë√≥ng v√† th·ªùi gian delay
const RETRY_CHECK_POSITION_ATTEMPTS = 5; // TƒÉng s·ªë l·∫ßn th·ª≠ l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn h∆°n
const RETRY_CHECK_POSITION_DELAY_MS = 1000; // 1 gi√¢y

// --- C·∫§U H√åNH WEB SERVER V√Ä LOG PM2 ---
const WEB_SERVER_PORT = 3333; // C·ªïng cho giao di·ªán web
// ƒê∆∞·ªùng d·∫´n t·ªõi file log c·ªßa PM2 cho bot n√†y (ƒë·ªÉ web server ƒë·ªçc).
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c v·ªõi c·∫•u h√¨nh PM2 c·ªßa b·∫°n.
const BOT_LOG_FILE = '/home/tacke300/.pm2/logs/futu-out.log';
// T√™n c·ªßa bot trong PM2, ph·∫£i kh·ªõp v·ªõi t√™n b·∫°n ƒë√£ d√πng khi start bot b·∫±ng PM2.
const THIS_BOT_PM2_NAME = 'futu';

// --- FUNCTIONS ---

// H√†m utility ƒë·ªÉ g·ª≠i HTTP request
async function sendRequest(method, path, params = {}, signed = false) {
    let query_string = new URLSearchParams(params).toString();
    const timestamp = Date.now() + serverTimeOffset;

    if (signed) {
        query_string += (query_string ? '&' : '') + `timestamp=${timestamp}`;
        const signature = createSignature(query_string, SECRET_KEY);
        query_string += `&signature=${signature}`;
    } else if (method === 'GET') {
        query_string += (query_string ? '&' : '') + `timestamp=${timestamp}`;
    }

    const options = {
        hostname: BASE_HOST,
        path: `${path}?${query_string}`,
        method: method,
        headers: {
            'X-MBX-APIKEY': API_KEY,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    };

    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                let jsonResponse;
                try {
                    jsonResponse = JSON.parse(data);
                } catch (e) {
                    return reject(new Error(`Invalid JSON response: ${data}`));
                }

                if (res.statusCode >= 200 && res.statusCode < 300) {
                    consecutiveApiErrors = 0; // Reset l·ªói n·∫øu request th√†nh c√¥ng
                    resolve(jsonResponse);
                } else {
                    consecutiveApiErrors++; // TƒÉng s·ªë l·ªói li√™n ti·∫øp
                    customLog(`‚ùå HTTP Request l·ªói: ${jsonResponse.msg || data}`, true);
                    if (jsonResponse.code) {
                        customLog(`‚ùå L·ªói k√Ω API Binance: ${jsonResponse.code} - ${jsonResponse.msg}`, true);
                    }
                    if (consecutiveApiErrors >= MAX_CONSECUTIVE_API_ERRORS) {
                        customLog(`üî• ƒê√£ c√≥ ${MAX_CONSECUTIVE_API_ERRORS} l·ªói API li√™n ti·∫øp. T·∫°m d·ª´ng bot v√† l√™n l·ªãch kh·ªüi ƒë·ªông l·∫°i sau ${ERROR_RETRY_DELAY_MS / 1000} gi√¢y.`, true);
                        stopBot(true); // T·∫°m d·ª´ng bot v√† l√™n l·ªãch kh·ªüi ƒë·ªông l·∫°i
                        return reject(new CriticalApiError(jsonResponse.msg || 'Critical API errors, bot stopped.'));
                    }
                    reject(new Error(jsonResponse.msg || `Request failed with status: ${res.statusCode}`));
                }
            });
        });

        req.on('error', (e) => {
            consecutiveApiErrors++; // TƒÉng s·ªë l·ªói li√™n ti·∫øp
            customLog(`‚ùå L·ªói k·∫øt n·ªëi HTTP: ${e.message}`, true);
            if (consecutiveApiErrors >= MAX_CONSECUTIVE_API_ERRORS) {
                customLog(`üî• ƒê√£ c√≥ ${MAX_CONSECUTIVE_API_ERRORS} l·ªói API li√™n ti·∫øp. T·∫°m d·ª´ng bot v√† l√™n l·ªãch kh·ªüi ƒë·ªông l·∫°i sau ${ERROR_RETRY_DELAY_MS / 1000} gi√¢y.`, true);
                stopBot(true); // T·∫°m d·ª´ng bot v√† l√™n l·ªãch kh·ªüi ƒë·ªông l·∫°i
                return reject(new CriticalApiError('Critical API errors, bot stopped.'));
            }
            reject(e);
        });

        req.end();
    });
}

// H√†m utility ƒë·ªÉ l√†m tr√≤n s·ªë ƒë·∫øn s·ªë ch·ªØ s·ªë th·∫≠p ph√¢n nh·∫•t ƒë·ªãnh
function toFixed(num, fixed) {
    if (typeof num === 'string') {
        num = parseFloat(num);
    }
    const re = new RegExp('^-?\\d+(?:\\.\\d{0,' + (fixed || -1) + '})?');
    return num.toString().match(re)[0];
}

// H√†m utility ƒë·ªÉ l√†m tr√≤n theo tickSize/stepSize (h√†m n√†y th∆∞·ªùng l√†m tr√≤n xu·ªëng)
const roundToStep = (num, step) => {
    // ƒê·ªÉ tr√°nh floating point issues, nh√¢n l√™n r·ªìi chia xu·ªëng
    const precision = Math.max(
        (step.toString().split('.')[1] || '').length,
        (num.toString().split('.')[1] || '').length
    );
    const multiplier = Math.pow(10, precision);

    return Math.floor(num * multiplier / (step * multiplier)) * (step * multiplier) / multiplier;
};

// H√†m utility ƒë·ªÉ l√†m tr√≤n l√™n theo tickSize/stepSize
const ceilToStep = (num, step) => {
    const precision = Math.max(
        (step.toString().split('.')[1] || '').length,
        (num.toString().split('.')[1] || '').length
    );
    const multiplier = Math.pow(10, precision);

    return Math.ceil(num * multiplier / (step * multiplier)) * (step * multiplier) / multiplier;
};

// H√†m l·∫•y th√¥ng tin exchange (precision, tickSize, stepSize)
async function getExchangeInfo(symbol) {
    if (exchangeInfoCache && exchangeInfoCache[symbol]) {
        return exchangeInfoCache[symbol];
    }

    try {
        const response = await sendRequest('GET', '/fapi/v1/exchangeInfo');
        const symbolInfo = response.symbols.find(s => s.symbol === symbol);

        if (!symbolInfo) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y th√¥ng tin cho symbol: ${symbol}`);
        }

        const priceFilter = symbolInfo.filters.find(f => f.filterType === 'PRICE_FILTER');
        const lotSizeFilter = symbolInfo.filters.find(f => f.filterType === 'LOT_SIZE');
        const marketLotSizeFilter = symbolInfo.filters.find(f => f.filterType === 'MARKET_LOT_SIZE'); // Th√™m filter n√†y
        const minNotionalFilter = symbolInfo.filters.find(f => f.filterType === 'MIN_NOTIONAL');

        const exchangeInfo = {
            pricePrecision: priceFilter ? parseInt(priceFilter.tickSize.split('.')[1].length) : 8,
            tickSize: priceFilter ? parseFloat(priceFilter.tickSize) : 0.00000001,
            stepSize: lotSizeFilter ? parseFloat(lotSizeFilter.stepSize) : 0.001,
            minQty: lotSizeFilter ? parseFloat(lotSizeFilter.minQty) : 0.001,
            marketStepSize: marketLotSizeFilter ? parseFloat(marketLotSizeFilter.stepSize) : (lotSizeFilter ? parseFloat(lotSizeFilter.stepSize) : 0.001),
            marketMinQty: marketLotSizeFilter ? parseFloat(marketLotSizeFilter.minQty) : (lotSizeFilter ? parseFloat(lotSizeFilter.minQty) : 0.001),
            minNotional: minNotionalFilter ? parseFloat(minNotionalFilter.notional) : 1 // V√≠ d·ª• minNotional = 1 USDT
        };

        exchangeInfoCache = { ...exchangeInfoCache, [symbol]: exchangeInfo };
        return exchangeInfo;
    } catch (error) {
        customLog(`‚ùå L·ªói khi l·∫•y th√¥ng tin exchange cho ${symbol}: ${error.message}`, true);
        throw error;
    }
}

// H√†m l·∫•y s·ªë d∆∞ t√†i kho·∫£n
async function getAccountBalance() {
    try {
        const balances = await sendRequest('GET', '/fapi/v2/balance', {}, true);
        const usdtBalance = balances.find(b => b.asset === 'USDT');
        if (usdtBalance) {
            return parseFloat(usdtBalance.availableBalance);
        }
        return 0;
    } catch (error) {
        customLog(`‚ùå L·ªói khi l·∫•y s·ªë d∆∞ t√†i kho·∫£n: ${error.message}`, true);
        throw error;
    }
}

// H√†m l·∫•y v·ªã th·∫ø ƒëang m·ªü
async function getOpenPositions() {
    try {
        const positions = await sendRequest('GET', '/fapi/v2/positionRisk', {}, true);
        return positions.filter(p => parseFloat(p.positionAmt) !== 0 && p.symbol === TARGET_SYMBOL);
    } catch (error) {
        customLog(`‚ùå L·ªói khi l·∫•y v·ªã th·∫ø ƒëang m·ªü: ${error.message}`, true);
        throw error;
    }
}

// H√†m ƒëi·ªÅu ch·ªânh ƒë√≤n b·∫©y
async function setLeverage(symbol, leverage) {
    try {
        const params = { symbol: symbol, leverage: leverage };
        await sendRequest('POST', '/fapi/v1/leverage', params, true);
        customLog(`‚úÖ ƒê√£ ƒë·∫∑t ƒë√≤n b·∫©y ${leverage}x cho ${symbol}.`, true);
    } catch (error) {
        customLog(`‚ùå L·ªói khi ƒë·∫∑t ƒë√≤n b·∫©y cho ${symbol}: ${error.message}`, true);
        throw error;
    }
}

// H√†m t·∫°o timestamp v√† signature (API)
function createSignature(query_string, secretKey) {
    return crypto.createHmac('sha256', secretKey).update(query_string).digest('hex');
}

// H√†m log t√πy ch·ªânh ƒë·ªÉ tr√°nh spam
function customLog(message, isImportant = false) {
    const timestamp = new Date().toLocaleString('vi-VN', {
        year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false
    });
    const logLine = `[${timestamp}] ${isImportant ? '‚úÖ' : '[DEBUG]'} ${message}`;

    if (isImportant) {
        console.log(logLine);
        // Reset logCounts cho c√°c tin nh·∫Øn quan tr·ªçng ƒë·ªÉ ch√∫ng lu√¥n ƒë∆∞·ª£c hi·ªÉn th·ªã
        Object.keys(logCounts).forEach(key => {
            if (logCounts[key].message === message) { // Reset ch·ªâ cho tin nh·∫Øn n√†y
                delete logCounts[key];
            }
        });
    } else {
        const messageHash = crypto.createHash('md5').update(message).digest('hex');
        if (!logCounts[messageHash]) {
            logCounts[messageHash] = { message: message, count: 1, lastLoggedTime: Date.now() };
            console.log(logLine);
        } else {
            logCounts[messageHash].count++;
            if (Date.now() - logCounts[messageHash].lastLoggedTime > LOG_COOLDOWN_MS) {
                console.log(logLine + ` (L·∫∑p l·∫°i ${logCounts[messageHash].count} l·∫ßn)`);
                logCounts[messageHash].count = 0; // Reset count sau khi in
                logCounts[messageHash].lastLoggedTime = Date.now();
            }
        }
    }
}

// H√†m l·∫•y gi√° hi·ªán t·∫°i
async function getCurrentPrice(symbol) {
    try {
        const response = await sendRequest('GET', '/fapi/v1/ticker/price', { symbol: symbol });
        const price = parseFloat(response.price);
        customLog(`Gi√° ${symbol}: ${price}`);
        return price;
    } catch (error) {
        customLog(`‚ùå L·ªói khi l·∫•y gi√° ${symbol}: ${error.message}`, true);
        throw error;
    }
}

// H√†m m·ªü v·ªã th·∫ø
async function openPosition(symbol, side, capitalUsdt, leverage, entryPrice) {
    isClosingPosition = false; // ƒê·∫£m b·∫£o c·ªù ƒë√≥ng v·ªã th·∫ø ƒë∆∞·ª£c reset

    try {
        const exchangeInfo = await getExchangeInfo(symbol);
        const { pricePrecision, stepSize, minQty, minNotional, tickSize } = exchangeInfo;

        // ƒê·∫£m b·∫£o ƒë√≤n b·∫©y
        await setLeverage(symbol, leverage);

        // T√≠nh to√°n s·ªë l∆∞·ª£ng d·ª±a tr√™n v·ªën v√† ƒë√≤n b·∫©y
        let quantity = (capitalUsdt * leverage) / entryPrice;

        // L√†m tr√≤n s·ªë l∆∞·ª£ng theo stepSize v√† minQty
        quantity = roundToStep(quantity, stepSize);
        if (quantity < minQty) {
            customLog(`‚ö†Ô∏è S·ªë l∆∞·ª£ng t√≠nh to√°n (${quantity}) nh·ªè h∆°n minQty (${minQty}). ƒêi·ªÅu ch·ªânh th√†nh minQty.`, true);
            quantity = minQty;
        }

        // Ki·ªÉm tra minNotional
        const notional = quantity * entryPrice;
        if (notional < minNotional) {
            customLog(`‚ö†Ô∏è Gi√° tr·ªã l·ªánh (${notional.toFixed(2)} USDT) nh·ªè h∆°n minNotional (${minNotional}). TƒÉng s·ªë l∆∞·ª£ng ƒë·ªÉ ƒë·∫°t minNotional.`, true);
            quantity = ceilToStep(minNotional / entryPrice, stepSize);
            customLog(`ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng th√†nh: ${quantity}. Gi√° tr·ªã l·ªánh m·ªõi: ${(quantity * entryPrice).toFixed(2)} USDT.`, true);
        }

        // L√†m tr√≤n s·ªë l∆∞·ª£ng m·ªôt l·∫ßn n·ªØa theo pricePrecision n·∫øu c·∫ßn (ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c khi g·ª≠i l·ªánh)
        quantity = parseFloat(toFixed(quantity, pricePrecision));

        customLog(`‚úÖ ƒê√£ m·ªü ${side} ${symbol} l√∫c ${new Date().toLocaleString('vi-VN')}.`, true);
        customLog(`  + Level: ${martingaleLevel} | V·ªën: ${capitalUsdt} USDT | Qty: ${quantity} ${symbol} | Gi√° v√†o: ${entryPrice}`, true);
        totalInitialCapitalUsed += capitalUsdt;

        // G·ª≠i l·ªánh Mua/B√°n (MARKET order)
        const orderParams = {
            symbol: symbol,
            side: side,
            type: 'MARKET',
            quantity: quantity,
            newOrderRespType: 'FULL' // ƒê·ªÉ nh·∫≠n th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh
        };
        const orderResult = await sendRequest('POST', '/fapi/v1/order', orderParams, true);

        // C·∫≠p nh·∫≠t currentOpenPosition
        currentOpenPosition = {
            symbol: symbol,
            side: side,
            entryPrice: entryPrice,
            quantity: quantity,
            leverage: leverage,
            martingaleLevel: martingaleLevel,
            openTime: Date.now()
        };

        customLog(`‚úÖ ƒê√£ g·ª≠i l·ªánh m·ªü ${side} ${symbol}.`, true);

        // ƒê·∫∑t TP/SL
        await placeStopLossTakeProfit(symbol, side, quantity, entryPrice, leverage);

        // ƒê·∫∑t timeout ƒë·ªÉ ch·ªù v·ªã th·∫ø m·ªü ho√†n t·∫•t v√† c·∫≠p nh·∫≠t currentOpenPosition
        // Th∆∞·ªùng th√¨ l·ªánh MARKET s·∫Ω kh·ªõp ngay, nh∆∞ng v·∫´n n√™n ch·ªù x√°c nh·∫≠n.
        setTimeout(async () => {
            try {
                const openPositions = await getOpenPositions();
                const position = openPositions.find(p => p.symbol === symbol && parseFloat(p.positionAmt) !== 0);
                if (position) {
                    currentOpenPosition = {
                        symbol: position.symbol,
                        side: parseFloat(position.positionAmt) > 0 ? 'LONG' : 'SHORT',
                        entryPrice: parseFloat(position.entryPrice),
                        quantity: Math.abs(parseFloat(position.positionAmt)),
                        leverage: parseFloat(position.leverage),
                        martingaleLevel: martingaleLevel,
                        openTime: Date.now()
                    };
                    customLog(`‚úÖ V·ªã th·∫ø ${symbol} ƒë√£ x√°c nh·∫≠n m·ªü ho√†n to√†n tr√™n s√†n.`, true);
                } else {
                    customLog(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y v·ªã th·∫ø ${symbol} sau khi m·ªü l·ªánh.`, true);
                    // C√≥ th·ªÉ th·ª≠ l·∫°i ho·∫∑c x·ª≠ l√Ω l·ªói
                }
            } catch (error) {
                customLog(`‚ùå L·ªói khi x√°c nh·∫≠n v·ªã th·∫ø sau khi m·ªü: ${error.message}`, true);
            }
        }, 3000); // Ch·ªù 3 gi√¢y ƒë·ªÉ l·ªánh kh·ªõp ho√†n to√†n
        
    } catch (error) {
        customLog(`‚ùå L·ªói khi m·ªü v·ªã th·∫ø ${symbol}: ${error.message}`, true);
        throw error;
    }
}

// H√†m g·ª≠i l·ªánh TP/SL (ƒë√£ c·∫£i ti·∫øn logic t√≠nh to√°n TP/SL)
async function placeStopLossTakeProfit(symbol, side, quantity, entryPrice, leverage) {
    try {
        const exchangeInfo = await getExchangeInfo(symbol);
        const { pricePrecision, tickSize } = exchangeInfo;

        let slPrice, tpPrice;

        // T√≠nh to√°n kho·∫£ng c√°ch gi√° t·ªëi thi·ªÉu tuy·ªát ƒë·ªëi d·ª±a tr√™n tickSize
        const minPriceDistanceAbsolute = tickSize * MIN_TICKS_DISTANCE_FOR_SL_TP;

        if (martingaleLevel === 0) { // L·ªánh ban ƒë·∫ßu
            // T√≠nh to√°n gi√° TP/SL d·ª±a tr√™n ph·∫ßn trƒÉm v·ªën
            const pnlForSl = currentTradeCapital * STOP_LOSS_PERCENTAGE_INITIAL;
            const pnlForTp = currentTradeCapital * TAKE_PROFIT_PERCENTAGE_INITIAL;

            // T√≠nh to√°n kho·∫£ng c√°ch gi√° t∆∞∆°ng ·ª©ng (d·ª±a tr√™n PNL v√† ƒë√≤n b·∫©y)
            const priceChangeForSL_calc = pnlForSl / (quantity * leverage);
            const priceChangeForTP_calc = pnlForTp / (quantity * leverage);
            
            // L·∫•y kho·∫£ng c√°ch gi√° cu·ªëi c√πng, ƒë·∫£m b·∫£o kh√¥ng nh·ªè h∆°n minPriceDistanceAbsolute
            const finalPriceChangeForSL = Math.max(priceChangeForSL_calc, minPriceDistanceAbsolute);
            const finalPriceChangeForTP = Math.max(priceChangeForTP_calc, minPriceDistanceAbsolute);

            if (side === 'LONG') {
                // slPrice ph·∫£i nh·ªè h∆°n entryPrice, tpPrice ph·∫£i l·ªõn h∆°n entryPrice
                slPrice = entryPrice - finalPriceChangeForSL;
                tpPrice = entryPrice + finalPriceChangeForTP;

                // L√†m tr√≤n theo tickSize (l√†m tr√≤n xu·ªëng cho SL LONG, l√†m tr√≤n l√™n cho TP LONG)
                slPrice = roundToStep(slPrice, tickSize);
                tpPrice = ceilToStep(tpPrice, tickSize);

                // ƒêi·ªÅu ch·ªânh l·∫°i n·∫øu l√†m tr√≤n khi·∫øn n√≥ tr·ªü l·∫°i gi√° v√†o l·ªánh ho·∫∑c sai h∆∞·ªõng
                // (ƒê·∫£m b·∫£o slPrice <= entryPrice v√† tpPrice >= entryPrice sau khi l√†m tr√≤n)
                if (slPrice >= entryPrice) {
                    slPrice = roundToStep(entryPrice - minPriceDistanceAbsolute, tickSize);
                }
                if (tpPrice <= entryPrice) {
                    tpPrice = ceilToStep(entryPrice + minPriceDistanceAbsolute, tickSize);
                }

            } else { // SHORT
                // slPrice ph·∫£i l·ªõn h∆°n entryPrice, tpPrice ph·∫£i nh·ªè h∆°n entryPrice
                slPrice = entryPrice + finalPriceChangeForSL;
                tpPrice = entryPrice - finalPriceChangeForTP;

                // L√†m tr√≤n theo tickSize (l√†m tr√≤n l√™n cho SL SHORT, l√†m tr√≤n xu·ªëng cho TP SHORT)
                slPrice = ceilToStep(slPrice, tickSize);
                tpPrice = roundToStep(tpPrice, tickSize);

                // ƒêi·ªÅu ch·ªânh l·∫°i n·∫øu l√†m tr√≤n khi·∫øn n√≥ tr·ªü l·∫°i gi√° v√†o l·ªánh ho·∫∑c sai h∆∞·ªõng
                // (ƒê·∫£m b·∫£o slPrice >= entryPrice v√† tpPrice <= entryPrice sau khi l√†m tr√≤n)
                if (slPrice <= entryPrice) {
                    slPrice = ceilToStep(entryPrice + minPriceDistanceAbsolute, tickSize);
                }
                if (tpPrice >= entryPrice) {
                    tpPrice = roundToStep(entryPrice - minPriceDistanceAbsolute, tickSize);
                }
            }

        } else { // L·ªánh Martingale
            // T√≠nh to√°n TP d·ª±a tr√™n ph·∫ßn trƒÉm l·ª£i nhu·∫≠n tr√™n t·ªïng gi√° tr·ªã v·ªã th·∫ø
            const pnlForTpMartingale = (entryPrice * quantity) * TAKE_PROFIT_PERCENTAGE_MARTINGALE;
            const priceChangeForTPMartingale_calc = pnlForTpMartingale / quantity;

            // L·∫•y kho·∫£ng c√°ch gi√° cu·ªëi c√πng cho TP, ƒë·∫£m b·∫£o kh√¥ng nh·ªè h∆°n minPriceDistanceAbsolute
            const finalPriceChangeForTPMartingale = Math.max(priceChangeForTPMartingale_calc, minPriceDistanceAbsolute);

            if (side === 'LONG') {
                tpPrice = entryPrice + finalPriceChangeForTPMartingale;
                slPrice = roundToStep(entryPrice - minPriceDistanceAbsolute, tickSize); // SL m·∫∑c ƒë·ªãnh cho Martingale
                
                tpPrice = ceilToStep(tpPrice, tickSize);
                slPrice = roundToStep(slPrice, tickSize); // ƒê·∫£m b·∫£o l√†m tr√≤n
                
                if (tpPrice <= entryPrice) {
                    tpPrice = ceilToStep(entryPrice + minPriceDistanceAbsolute, tickSize);
                }
                if (slPrice >= entryPrice) {
                    slPrice = roundToStep(entryPrice - minPriceDistanceAbsolute, tickSize);
                }

            } else { // SHORT
                tpPrice = entryPrice - finalPriceChangeForTPMartingale;
                slPrice = ceilToStep(entryPrice + minPriceDistanceAbsolute, tickSize); // SL m·∫∑c ƒë·ªãnh cho Martingale
                
                tpPrice = roundToStep(tpPrice, tickSize);
                slPrice = ceilToStep(slPrice, tickSize); // ƒê·∫£m b·∫£o l√†m tr√≤n
                
                if (tpPrice >= entryPrice) {
                    tpPrice = roundToStep(entryPrice - minPriceDistanceAbsolute, tickSize);
                }
                if (slPrice <= entryPrice) {
                    slPrice = ceilToStep(entryPrice + minPriceDistanceAbsolute, tickSize);
                }
            }
        }
        
        // L√†m tr√≤n cu·ªëi c√πng theo pricePrecision ƒë·ªÉ g·ª≠i l·ªánh
        slPrice = parseFloat(toFixed(slPrice, pricePrecision));
        tpPrice = parseFloat(toFixed(tpPrice, pricePrecision));

        customLog(`>>> TP: ${tpPrice}, SL: ${slPrice}`, true);

        // G·ª≠i l·ªánh SL (STOP_MARKET)
        const slOrderParams = {
            symbol: symbol,
            side: side === 'LONG' ? 'SELL' : 'BUY',
            type: 'STOP_MARKET',
            quantity: quantity,
            stopPrice: slPrice,
            closePosition: 'true' // ƒê·∫£m b·∫£o ƒë√≥ng to√†n b·ªô v·ªã th·∫ø
        };
        const slResult = await sendRequest('POST', '/fapi/v1/order', slOrderParams, true);
        customLog(`‚úÖ ƒê√£ g·ª≠i l·ªánh SL cho ${symbol}.`, true);

        // G·ª≠i l·ªánh TP (TAKE_PROFIT_MARKET)
        const tpOrderParams = {
            symbol: symbol,
            side: side === 'LONG' ? 'SELL' : 'BUY',
            type: 'TAKE_PROFIT_MARKET',
            quantity: quantity,
            stopPrice: tpPrice, // V·ªõi TAKE_PROFIT_MARKET, stopPrice l√† gi√° k√≠ch ho·∫°t
            closePosition: 'true'
        };
        const tpResult = await sendRequest('POST', '/fapi/v1/order', tpOrderParams, true);
        customLog(`‚úÖ ƒê√£ g·ª≠i l·ªánh TP cho ${symbol}.`, true);

    } catch (error) {
        customLog(`‚ùå L·ªói ƒë·∫∑t TP/SL cho ${symbol}: ${error.message || error}`, true);
        if (error.code === -2021) { // "Order would immediately trigger."
            customLog(`‚ö†Ô∏è SL/TP k√≠ch ho·∫°t ngay l·∫≠p t·ª©c cho ${symbol}. ƒê√≥ng v·ªã th·∫ø.`, true);
            await closePosition(symbol, "SL/TP k√≠ch ho·∫°t."); // ƒê√≥ng ngay l·∫≠p t·ª©c
        }
        throw new Error(`L·ªói ƒë·∫∑t TP/SL: ${error.message}`);
    }
}

// H√†m h·ªßy t·∫•t c·∫£ c√°c l·ªánh ch·ªù
async function cancelAllOpenOrders(symbol) {
    try {
        await sendRequest('DELETE', '/fapi/v1/allOpenOrders', { symbol: symbol }, true);
        customLog(`‚úÖ ƒê√£ h·ªßy t·∫•t c·∫£ l·ªánh ch·ªù cho ${symbol}.`, true);
    } catch (error) {
        customLog(`‚ùå L·ªói khi h·ªßy l·ªánh ch·ªù cho ${symbol}: ${error.message}`, true);
        // Kh√¥ng throw l·ªói ·ªü ƒë√¢y ƒë·ªÉ qu√° tr√¨nh ƒë√≥ng v·ªã th·∫ø kh√¥ng b·ªã gi√°n ƒëo·∫°n ho√†n to√†n
    }
}

// H√†m ƒë√≥ng v·ªã th·∫ø
async function closePosition(symbol, reason) {
    if (isClosingPosition) {
        customLog(`‚ö†Ô∏è ƒêang trong qu√° tr√¨nh ƒë√≥ng l·ªánh. B·ªè qua y√™u c·∫ßu ƒë√≥ng l·ªánh m·ªõi cho ${symbol}.`, true);
        return;
    }
    isClosingPosition = true;

    try {
        customLog(`>>> ƒê√≥ng l·ªánh ${currentOpenPosition.side} ${symbol} (${reason}). Qty d·ª± ki·∫øn: ${currentOpenPosition.quantity}.`, true);

        // G·ª≠i l·ªánh ƒë√≥ng v·ªã th·∫ø MARKET
        const closeSide = currentOpenPosition.side === 'LONG' ? 'SELL' : 'BUY';
        const closeOrderParams = {
            symbol: symbol,
            side: closeSide,
            type: 'MARKET',
            quantity: currentOpenPosition.quantity,
            newOrderRespType: 'FULL',
            reduceOnly: 'true' // ƒê·∫£m b·∫£o ƒë√¢y l√† l·ªánh ƒë√≥ng v·ªã th·∫ø
        };
        await sendRequest('POST', '/fapi/v1/order', closeOrderParams, true);
        customLog(`‚úÖ ƒê√£ g·ª≠i l·ªánh ƒë√≥ng ${closeSide} ${symbol}. L√Ω do: ${reason}.`, true);

        // Ch·ªù x√°c nh·∫≠n v·ªã th·∫ø ƒë√≥ng ho√†n to√†n tr√™n s√†n
        let positionClosed = false;
        for (let i = 0; i < RETRY_CHECK_POSITION_ATTEMPTS; i++) {
            customLog(`>>> ƒêang ch·ªù x√°c nh·∫≠n v·ªã th·∫ø ${symbol} (${currentOpenPosition.side}) ƒë√£ ƒë√≥ng ho√†n to√†n tr√™n s√†n... (Th·ª≠ ${i + 1}/${RETRY_CHECK_POSITION_ATTEMPTS})`, true);
            await new Promise(resolve => setTimeout(resolve, RETRY_CHECK_POSITION_DELAY_MS));
            const openPositions = await getOpenPositions();
            const position = openPositions.find(p => p.symbol === symbol && parseFloat(p.positionAmt) !== 0);

            if (!position) {
                positionClosed = true;
                customLog(`‚úÖ V·ªã th·∫ø ${symbol} ƒë√£ x√°c nh·∫≠n ƒë√≥ng ho√†n to√†n tr√™n s√†n sau ${i + 1} l·∫ßn th·ª≠.`, true);
                break;
            }
        }

        if (!positionClosed) {
            customLog(`‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n v·ªã th·∫ø ${symbol} ƒë√£ ƒë√≥ng ho√†n to√†n tr√™n s√†n sau ${RETRY_CHECK_POSITION_ATTEMPTS} l·∫ßn th·ª≠.`, true);
            throw new Error(`V·ªã th·∫ø ${symbol} kh√¥ng ƒë√≥ng ƒë∆∞·ª£c.`);
        }

        // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi h·ªßy l·ªánh ƒë·ªÉ tr√°nh xung ƒë·ªôt
        await new Promise(resolve => setTimeout(resolve, DELAY_BEFORE_CANCEL_ORDERS_MS));

        // H·ªßy t·∫•t c·∫£ c√°c l·ªánh ch·ªù sau khi ƒë√≥ng v·ªã th·∫ø
        await cancelAllOpenOrders(symbol);

        // L·∫•y PNL th·ª±c t·∫ø
        const recentTrades = await sendRequest('GET', '/fapi/v1/userTrades', { symbol: symbol, limit: 5 }, true);
        // T√¨m giao d·ªãch ƒë√≥ng v·ªã th·∫ø g·∫ßn nh·∫•t
        const closingTrade = recentTrades.find(t => parseFloat(t.positionAmt) === 0 && t.buyer === (closeSide === 'BUY')); // buyer=true for BUY order
        let realizedPnl = 0;
        if (closingTrade && closingTrade.realizedPnl !== '0') {
            realizedPnl = parseFloat(closingTrade.realizedPnl);
            customLog(`üí∞ PNL th·ª±c t·∫ø c·ªßa l·ªánh v·ª´a ƒë√≥ng: ${realizedPnl.toFixed(4)} USDT.`, true);
        } else {
            customLog(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PNL th·ª±c t·∫ø cho l·ªánh v·ª´a ƒë√≥ng.`, true);
        }

        // C·∫≠p nh·∫≠t t·ªïng PNL v√† reset tr·∫°ng th√°i
        totalPnlUsdt += realizedPnl;
        customLog(`üìä T·ªïng PNL hi·ªán t·∫°i: ${totalPnlUsdt.toFixed(4)} USDT. T·ªïng v·ªën ƒë√£ d√πng: ${totalInitialCapitalUsed.toFixed(4)} USDT.`, true);
        
        // Reset tr·∫°ng th√°i Martingale
        martingaleLevel = 0;
        currentTradeCapital = AMOUNT_USDT_PER_TRADE_INITIAL;
        currentOpenPosition = null; // Reset v·ªã th·∫ø ƒëang m·ªü
        
        // Reset c√°c interval/timeout li√™n quan ƒë·∫øn v·ªã th·∫ø
        if (positionCheckInterval) {
            clearInterval(positionCheckInterval);
            positionCheckInterval = null;
        }

    } catch (error) {
        customLog(`‚ùå L·ªói nghi√™m tr·ªçng khi ƒë√≥ng v·ªã th·∫ø ${symbol}: ${error.message}`, true);
        // C√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω th·ªß c√¥ng n·∫øu bot kh√¥ng th·ªÉ ƒë√≥ng v·ªã th·∫ø
    } finally {
        isClosingPosition = false; // Lu√¥n ƒë·∫£m b·∫£o reset c·ªù
    }
}

// H√†m logic giao d·ªãch ch√≠nh
async function runTradingLogic() {
    if (!botRunning || isClosingPosition) {
        customLog(`Bot ƒëang t·∫°m d·ª´ng ho·∫∑c ƒëang trong qu√° tr√¨nh ƒë√≥ng l·ªánh. B·ªè qua chu k·ª≥ giao d·ªãch.`, false);
        return;
    }

    try {
        const balance = await getAccountBalance();
        customLog(`S·ªë d∆∞ USDT kh·∫£ d·ª•ng: ${balance.toFixed(2)} USDT.`);

        if (balance < MIN_USDT_BALANCE_TO_OPEN) {
            customLog(`‚ö†Ô∏è S·ªë d∆∞ kh·∫£ d·ª•ng (${balance.toFixed(2)} USDT) th·∫•p h∆°n m·ª©c t·ªëi thi·ªÉu (${MIN_USDT_BALANCE_TO_OPEN} USDT). Kh√¥ng m·ªü l·ªánh m·ªõi.`, true);
            currentOpenPosition = null; // ƒê·∫£m b·∫£o reset n·∫øu kh√¥ng ƒë·ªß ti·ªÅn
            martingaleLevel = 0; // Reset Martingale n·∫øu h·∫øt ti·ªÅn ƒë·ªÉ tr√°nh v√≤ng l·∫∑p l·ªói
            currentTradeCapital = AMOUNT_USDT_PER_TRADE_INITIAL;
            return;
        }

        const openPositions = await getOpenPositions();

        if (openPositions.length === 0) {
            // Kh√¥ng c√≥ v·ªã th·∫ø m·ªü, ti·∫øn h√†nh m·ªü l·ªánh m·ªõi ho·∫∑c l·ªánh Martingale c·∫•p 0
            currentOpenPosition = null;
            customLog(`Kh√¥ng c√≥ v·ªã th·∫ø m·ªü. ƒêang t√¨m ki·∫øm c∆° h·ªôi m·ªü l·ªánh m·ªõi (Level 0).`, false);

            const currentPrice = await getCurrentPrice(TARGET_SYMBOL);

            // X√°c ƒë·ªãnh h∆∞·ªõng ƒëi (c√≥ th·ªÉ d·ª±a tr√™n t√≠n hi·ªáu ho·∫∑c random cho m·ª•c ƒë√≠ch test)
            const side = Math.random() < 0.5 ? 'LONG' : 'SHORT'; // Random cho test

            // Reset Martingale level v·ªÅ 0 khi kh√¥ng c√≥ v·ªã th·∫ø
            martingaleLevel = 0;
            currentTradeCapital = AMOUNT_USDT_PER_TRADE_INITIAL;
            currentTradeSide = side;

            await openPosition(TARGET_SYMBOL, side, currentTradeCapital, TARGET_LEVERAGE, currentPrice);

        } else {
            // C√≥ v·ªã th·∫ø m·ªü, ki·ªÉm tra tr·∫°ng th√°i v√† x·ª≠ l√Ω Martingale
            const position = openPositions.find(p => p.symbol === TARGET_SYMBOL);
            if (!position) {
                customLog(`‚ö†Ô∏è C√≥ v·ªã th·∫ø m·ªü nh∆∞ng kh√¥ng kh·ªõp v·ªõi TARGET_SYMBOL.`, true);
                currentOpenPosition = null; // Coi nh∆∞ kh√¥ng c√≥ v·ªã th·∫ø cho TARGET_SYMBOL
                return;
            }

            currentOpenPosition = {
                symbol: position.symbol,
                side: parseFloat(position.positionAmt) > 0 ? 'LONG' : 'SHORT',
                entryPrice: parseFloat(position.entryPrice),
                quantity: Math.abs(parseFloat(position.positionAmt)),
                leverage: parseFloat(position.leverage),
                martingaleLevel: martingaleLevel, // Gi·ªØ nguy√™n level hi·ªán t·∫°i
                openTime: currentOpenPosition ? currentOpenPosition.openTime : Date.now()
            };

            const currentPrice = await getCurrentPrice(TARGET_SYMBOL);
            const pnlUsdt = parseFloat(position.unRealizedProfit);
            const pnlPercentage = (pnlUsdt / (currentOpenPosition.entryPrice * currentOpenPosition.quantity / currentOpenPosition.leverage)) * 100;
            
            customLog(`V·ªã th·∫ø ${currentOpenPosition.side} ${TARGET_SYMBOL} ƒëang m·ªü. Gi√° v√†o: ${currentOpenPosition.entryPrice}, Gi√° hi·ªán t·∫°i: ${currentPrice}. PNL: ${pnlUsdt.toFixed(4)} USDT (${pnlPercentage.toFixed(2)}%). Level Martingale: ${martingaleLevel}.`, false);

            // Ki·ªÉm tra v√† th·ª±c hi·ªán Martingale
            // ƒêi·ªÅu ki·ªán Martingale: V√≠ d·ª•: khi PNL √¢m ƒë·∫°t m·ªôt ng∆∞·ª°ng nh·∫•t ƒë·ªãnh
            const MARTINGALE_TRIGGER_PERCENTAGE = -5.0; // K√≠ch ho·∫°t Martingale khi l·ªó 5% (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)

            if (martingaleLevel < MARTINGALE_MAX_LEVEL && pnlPercentage < MARTINGALE_TRIGGER_PERCENTAGE) {
                customLog(`>>> PNL ${pnlPercentage.toFixed(2)}% < ${MARTINGALE_TRIGGER_PERCENTAGE}%. K√≠ch ho·∫°t Martingale level ${martingaleLevel + 1}.`, true);
                martingaleLevel++;
                currentTradeCapital *= MARTINGALE_MULTIPLIER; // G·∫•p ƒë√¥i v·ªën

                if (balance < currentTradeCapital) {
                    customLog(`‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ Martingale level ${martingaleLevel}. C·∫ßn ${currentTradeCapital.toFixed(2)} USDT, ch·ªâ c√≥ ${balance.toFixed(2)} USDT.`, true);
                    // ·ªû ƒë√¢y, b·∫°n c√≥ th·ªÉ ch·ªçn ƒë√≥ng v·ªã th·∫ø ho·∫∑c ch·ªù ƒë·ª£i
                    await closePosition(TARGET_SYMBOL, `Kh√¥ng ƒë·ªß v·ªën ƒë·ªÉ Martingale level ${martingaleLevel}.`);
                } else {
                    await openPosition(TARGET_SYMBOL, currentTradeSide, currentTradeCapital, TARGET_LEVERAGE, currentPrice);
                }
            } else if (martingaleLevel >= MARTINGALE_MAX_LEVEL && pnlPercentage < 0) {
                customLog(`‚ö†Ô∏è ƒê√£ ƒë·∫°t Martingale level t·ªëi ƒëa (${MARTINGALE_MAX_LEVEL}) v√† ƒëang l·ªó. Xem x√©t ƒë√≥ng v·ªã th·∫ø.`, true);
                // C√≥ th·ªÉ th√™m logic ƒë√≥ng l·ªánh n·∫øu l·ªó qu√° s√¢u ·ªü level max
                // V√≠ d·ª•: ƒê√≥ng n·∫øu l·ªó qu√° X% ·ªü level cu·ªëi c√πng
                const MAX_LOSS_AT_LAST_LEVEL = -50.0; // L·ªó 50% t·ªïng v·ªën v·ªã th·∫ø
                if (pnlPercentage < MAX_LOSS_AT_LAST_LEVEL) {
                    customLog(`üî•üî• L·ªó qu√° s√¢u (${pnlPercentage.toFixed(2)}%) ·ªü Martingale level cu·ªëi. ƒê√≥ng v·ªã th·∫ø ƒë·ªÉ b·∫£o to√†n v·ªën.`, true);
                    await closePosition(TARGET_SYMBOL, `L·ªó qu√° s√¢u ·ªü Martingale level ${MARTINGALE_MAX_LEVEL}.`);
                }
            }
        }

    } catch (error) {
        customLog(`‚ùå L·ªói trong chu k·ª≥ giao d·ªãch ch√≠nh: ${error.message}`, true);
        if (error instanceof CriticalApiError) {
            customLog(`Bot ƒë√£ d·ª´ng do l·ªói API nghi√™m tr·ªçng.`, true);
            // Bot s·∫Ω t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i theo logic trong sendRequest
        }
    } finally {
        if (botRunning) {
            const nextRunDelay = Math.random() * 5000 + 5000; // Random t·ª´ 5 ƒë·∫øn 10 gi√¢y
            customLog(`Ch·ªù ${toFixed(nextRunDelay / 1000, 2)} gi√¢y cho chu k·ª≥ ti·∫øp theo.`, false);
            nextScheduledTimeout = setTimeout(runTradingLogic, nextRunDelay);
        }
    }
}

// H√†m kh·ªüi ƒë·ªông bot
function startBot() {
    if (botRunning) {
        customLog("Bot ƒë√£ ƒëang ch·∫°y.", true);
        return;
    }
    botRunning = true;
    botStartTime = new Date();
    customLog("üöÄ Kh·ªüi ƒë·ªông bot th√†nh c√¥ng!", true);
    // ƒê·ªìng b·ªô th·ªùi gian server tr∆∞·ªõc
    syncServerTime().then(() => {
        // Sau ƒë√≥ b·∫Øt ƒë·∫ßu chu k·ª≥ giao d·ªãch
        runTradingLogic();
        // B·∫Øt ƒë·∫ßu interval ki·ªÉm tra v·ªã th·∫ø n·∫øu ch∆∞a c√≥
        if (!positionCheckInterval) {
            positionCheckInterval = setInterval(async () => {
                if (currentOpenPosition && !isClosingPosition) {
                    customLog(`ƒêang ki·ªÉm tra v·ªã th·∫ø ${TARGET_SYMBOL}...`, false);
                    try {
                        const openPositions = await getOpenPositions();
                        const position = openPositions.find(p => p.symbol === TARGET_SYMBOL && parseFloat(p.positionAmt) !== 0);
                        if (!position && currentOpenPosition) {
                            customLog(`V·ªã th·∫ø ${TARGET_SYMBOL} ƒë√£ ƒë√≥ng tr√™n s√†n. C·∫≠p nh·∫≠t tr·∫°ng th√°i bot.`, true);
                            await closePosition(TARGET_SYMBOL, "ƒê√£ ƒë√≥ng tr√™n s√†n.");
                        } else if (position) {
                            // C·∫≠p nh·∫≠t l·∫°i entryPrice v√† quantity n·∫øu c√≥ s·ª± kh√°c bi·ªát (do l·ªánh kh·ªõp m·ªôt ph·∫ßn, v.v.)
                            if (Math.abs(parseFloat(position.positionAmt)) !== currentOpenPosition.quantity ||
                                parseFloat(position.entryPrice) !== currentOpenPosition.entryPrice) {
                                customLog(`C·∫≠p nh·∫≠t th√¥ng tin v·ªã th·∫ø ${TARGET_SYMBOL} t·ª´ s√†n.`, false);
                                currentOpenPosition.quantity = Math.abs(parseFloat(position.positionAmt));
                                currentOpenPosition.entryPrice = parseFloat(position.entryPrice);
                            }
                        }
                    } catch (error) {
                        customLog(`‚ùå L·ªói khi ki·ªÉm tra v·ªã th·∫ø ƒë·ªãnh k·ª≥: ${error.message}`, true);
                    }
                }
            }, 10000); // Ki·ªÉm tra m·ªói 10 gi√¢y
        }
    }).catch(error => {
        customLog(`‚ùå L·ªói ƒë·ªìng b·ªô th·ªùi gian server khi kh·ªüi ƒë·ªông: ${error.message}`, true);
        stopBot(); // D·ª´ng bot n·∫øu kh√¥ng ƒë·ªìng b·ªô ƒë∆∞·ª£c th·ªùi gian
    });
}

// H√†m d·ª´ng bot
function stopBot(scheduleRestart = false) {
    if (!botRunning) {
        customLog("Bot ƒë√£ d·ª´ng.", true);
        return;
    }
    botRunning = false;
    clearTimeout(nextScheduledTimeout);
    clearInterval(positionCheckInterval);
    nextScheduledTimeout = null;
    positionCheckInterval = null;
    currentCountdownMessage = "Bot ƒë√£ d·ª´ng.";

    if (retryBotTimeout) {
        clearTimeout(retryBotTimeout);
        retryBotTimeout = null;
    }

    if (scheduleRestart) {
        customLog(`Bot s·∫Ω t·ª± kh·ªüi ƒë·ªông l·∫°i sau ${ERROR_RETRY_DELAY_MS / 1000} gi√¢y...`, true);
        let countdown = ERROR_RETRY_DELAY_MS / 1000;
        currentCountdownMessage = `Bot s·∫Ω t·ª± kh·ªüi ƒë·ªông l·∫°i sau ${countdown} gi√¢y...`;

        if (countdownIntervalFrontend) {
            clearInterval(countdownIntervalFrontend);
        }
        countdownIntervalFrontend = setInterval(() => {
            countdown--;
            currentCountdownMessage = `Bot s·∫Ω t·ª± kh·ªüi ƒë·ªông l·∫°i sau ${countdown} gi√¢y...`;
            if (countdown <= 0) {
                clearInterval(countdownIntervalFrontend);
                countdownIntervalFrontend = null;
                customLog(`ƒêang kh·ªüi ƒë·ªông l·∫°i bot...`, true);
                startBot();
            }
        }, 1000);
        retryBotTimeout = setTimeout(() => {
            if (!botRunning) { // Ch·ªâ kh·ªüi ƒë·ªông l·∫°i n·∫øu bot ch∆∞a t·ª± ch·∫°y l·∫°i
                startBot();
            }
        }, ERROR_RETRY_DELAY_MS);
    } else {
        customLog("üõë Bot ƒë√£ d·ª´ng th√†nh c√¥ng.", true);
    }
}

// H√†m ƒë·ªìng b·ªô th·ªùi gian v·ªõi server Binance
async function syncServerTime() {
    try {
        const response = await sendRequest('GET', '/fapi/v1/time');
        const serverTime = response.serverTime;
        serverTimeOffset = serverTime - Date.now();
        customLog(`‚úÖ ƒê·ªìng b·ªô th·ªùi gian server th√†nh c√¥ng. Offset: ${serverTimeOffset} ms.`);
    } catch (error) {
        customLog(`‚ùå L·ªói ƒë·ªìng b·ªô th·ªùi gian server: ${error.message}`, true);
        throw error;
    }
}

// --- WEB SERVER ---
const app = express();
app.use(express.static('public')); // Th∆∞ m·ª•c public ch·ª©a c√°c file tƒ©nh (html, css, js)

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/status', async (req, res) => {
    let balance = 0;
    let position = null;
    let pnlPercentage = 0;
    let pnlUsdt = 0;
    let currentPrice = 0;

    try {
        balance = await getAccountBalance();
        currentPrice = await getCurrentPrice(TARGET_SYMBOL);
        const openPositions = await getOpenPositions();
        if (openPositions.length > 0) {
            position = openPositions.find(p => p.symbol === TARGET_SYMBOL);
            if (position) {
                pnlUsdt = parseFloat(position.unRealizedProfit);
                pnlPercentage = (pnlUsdt / (parseFloat(position.entryPrice) * Math.abs(parseFloat(position.positionAmt)) / parseFloat(position.leverage))) * 100;
            }
        }
    } catch (error) {
        customLog(`‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i bot cho web: ${error.message}`, false);
    }

    res.json({
        running: botRunning,
        balance: balance.toFixed(2),
        symbol: TARGET_SYMBOL,
        leverage: TARGET_LEVERAGE,
        position: position ? {
            side: parseFloat(position.positionAmt) > 0 ? 'LONG' : 'SHORT',
            entryPrice: parseFloat(position.entryPrice).toFixed(pricePrecision),
            quantity: Math.abs(parseFloat(position.positionAmt)).toFixed(exchangeInfoCache ? exchangeInfoCache[TARGET_SYMBOL].stepSize.toString().split('.')[1].length : 3),
            pnlUsdt: pnlUsdt.toFixed(4),
            pnlPercentage: pnlPercentage.toFixed(2),
            martingaleLevel: martingaleLevel
        } : null,
        currentPrice: currentPrice.toFixed(exchangeInfoCache ? exchangeInfoCache[TARGET_SYMBOL].pricePrecision : 8),
        totalPnlUsdt: totalPnlUsdt.toFixed(4),
        totalInitialCapitalUsed: totalInitialCapitalUsed.toFixed(4),
        countdownMessage: currentCountdownMessage,
        botUptime: botStartTime ? formatUptime(botStartTime) : 'N/A'
    });
});

app.get('/log', (req, res) => {
    fs.readFile(BOT_LOG_FILE, 'utf8', (err, data) => {
        if (err) {
            console.error(`Error reading log file: ${err}`);
            return res.status(500).send('Error reading log file');
        }
        res.send(`<pre>${data}</pre>`);
    });
});

app.post('/start', (req, res) => {
    startBot();
    res.json({ message: 'Bot ƒëang kh·ªüi ƒë·ªông...' });
});

app.post('/stop', (req, res) => {
    stopBot();
    res.json({ message: 'Bot ƒëang d·ª´ng...' });
});

// H√†m format th·ªùi gian uptime
function formatUptime(startTime) {
    const now = new Date();
    const diff = now.getTime() - startTime.getTime(); // in milliseconds

    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    const remainingHours = hours % 24;
    const remainingMinutes = minutes % 60;
    const remainingSeconds = seconds % 60;

    let uptimeString = '';
    if (days > 0) uptimeString += `${days} ng√†y `;
    if (remainingHours > 0) uptimeString += `${remainingHours} gi·ªù `;
    if (remainingMinutes > 0) uptimeString += `${remainingMinutes} ph√∫t `;
    uptimeString += `${remainingSeconds} gi√¢y`;

    return uptimeString.trim();
}

app.listen(WEB_SERVER_PORT, () => {
    customLog(`Web server ƒëang ch·∫°y tr√™n c·ªïng ${WEB_SERVER_PORT}`, true);
    // Kh√¥ng t·ª± ƒë·ªông kh·ªüi ƒë·ªông bot khi web server kh·ªüi ƒë·ªông, ch·ªâ khi c√≥ l·ªánh
});

// Kh·ªüi ƒë·ªông bot khi file ƒë∆∞·ª£c ch·∫°y
// B·∫°n c√≥ th·ªÉ comment d√≤ng n√†y n·∫øu mu·ªën ch·ªâ kh·ªüi ƒë·ªông b·∫±ng PM2 ho·∫∑c qua web UI
startBot(); 
